{"id":"../../node_modules/phaser/src/tilemaps/parsers/Parse.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../Formats","loc":{"line":7,"column":22},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\Parse.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\Formats.js"},{"name":"./Parse2DArray","loc":{"line":8,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\Parse.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\Parse2DArray.js"},{"name":"./ParseCSV","loc":{"line":9,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\Parse.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\ParseCSV.js"},{"name":"./tiled/ParseJSONTiled","loc":{"line":10,"column":29},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\Parse.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\tiled\\ParseJSONTiled.js"},{"name":"./impact/ParseWeltmeister","loc":{"line":11,"column":31},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\Parse.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\impact\\ParseWeltmeister.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Formats = require('../Formats');\r\nvar Parse2DArray = require('./Parse2DArray');\r\nvar ParseCSV = require('./ParseCSV');\r\nvar ParseJSONTiled = require('./tiled/ParseJSONTiled');\r\nvar ParseWeltmeister = require('./impact/ParseWeltmeister');\r\n\r\n/**\r\n * Parses raw data of a given Tilemap format into a new MapData object. If no recognized data format\r\n * is found, returns `null`. When loading from CSV or a 2D array, you should specify the tileWidth &\r\n * tileHeight. When parsing from a map from Tiled, the tileWidth & tileHeight will be pulled from\r\n * the map data.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Parse\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {integer} mapFormat - See ../Formats.js.\r\n * @param {(integer[][]|string|object)} data - 2D array, CSV string or Tiled JSON object.\r\n * @param {integer} tileWidth - The width of a tile in pixels. Required for 2D array and CSV, but\r\n * ignored for Tiled JSON.\r\n * @param {integer} tileHeight - The height of a tile in pixels. Required for 2D array and CSV, but\r\n * ignored for Tiled JSON.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {Phaser.Tilemaps.MapData} The created `MapData` object.\r\n */\r\nvar Parse = function (name, mapFormat, data, tileWidth, tileHeight, insertNull)\r\n{\r\n    var newMap;\r\n\r\n    switch (mapFormat)\r\n    {\r\n        case (Formats.ARRAY_2D):\r\n            newMap = Parse2DArray(name, data, tileWidth, tileHeight, insertNull);\r\n            break;\r\n        case (Formats.CSV):\r\n            newMap = ParseCSV(name, data, tileWidth, tileHeight, insertNull);\r\n            break;\r\n        case (Formats.TILED_JSON):\r\n            newMap = ParseJSONTiled(name, data, insertNull);\r\n            break;\r\n        case (Formats.WELTMEISTER):\r\n            newMap = ParseWeltmeister(name, data, insertNull);\r\n            break;\r\n        default:\r\n            console.warn('Unrecognized tilemap data format: ' + mapFormat);\r\n            newMap = null;\r\n    }\r\n\r\n    return newMap;\r\n};\r\n\r\nmodule.exports = Parse;\r\n"},"sourceMaps":null,"error":null,"hash":"63c6ec5470c3d3a4e7c46d64cd0e5eff","cacheData":{"env":{}}}