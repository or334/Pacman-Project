{"id":"../../node_modules/phaser/src/core/Game.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../dom/AddToDOM","loc":{"line":7,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\dom\\AddToDOM.js"},{"name":"../animations/AnimationManager","loc":{"line":8,"column":31},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\AnimationManager.js"},{"name":"../cache/CacheManager","loc":{"line":9,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\cache\\CacheManager.js"},{"name":"../display/canvas/CanvasPool","loc":{"line":10,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\canvas\\CanvasPool.js"},{"name":"../utils/Class","loc":{"line":11,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./Config","loc":{"line":12,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Config.js"},{"name":"../dom/CreateDOMContainer","loc":{"line":13,"column":33},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\dom\\CreateDOMContainer.js"},{"name":"./CreateRenderer","loc":{"line":14,"column":29},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\CreateRenderer.js"},{"name":"../data/DataManager","loc":{"line":15,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\data\\DataManager.js"},{"name":"./DebugHeader","loc":{"line":16,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\DebugHeader.js"},{"name":"../device","loc":{"line":17,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\device\\index.js"},{"name":"../dom/DOMContentLoaded","loc":{"line":18,"column":31},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\dom\\DOMContentLoaded.js"},{"name":"eventemitter3","loc":{"line":19,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\eventemitter3\\index.js"},{"name":"./events","loc":{"line":20,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\events\\index.js"},{"name":"../input/InputManager","loc":{"line":21,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputManager.js"},{"name":"../plugins/PluginCache","loc":{"line":22,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\plugins\\PluginCache.js"},{"name":"../plugins/PluginManager","loc":{"line":23,"column":28},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\plugins\\PluginManager.js"},{"name":"../scale/ScaleManager","loc":{"line":24,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\scale\\ScaleManager.js"},{"name":"../scene/SceneManager","loc":{"line":25,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\SceneManager.js"},{"name":"../textures/events","loc":{"line":26,"column":28},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\textures\\events\\index.js"},{"name":"../textures/TextureManager","loc":{"line":27,"column":29},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\textures\\TextureManager.js"},{"name":"./TimeStep","loc":{"line":28,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\TimeStep.js"},{"name":"./VisibilityHandler","loc":{"line":29,"column":32},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\VisibilityHandler.js"},{"name":"../sound/SoundManagerCreator","loc":{"line":33,"column":38},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\sound\\SoundManagerCreator.js"},{"name":"../../plugins/fbinstant/src/FacebookInstantGamesPlugin","loc":{"line":38,"column":45},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\Game.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\fbinstant\\src\\FacebookInstantGamesPlugin.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar AddToDOM = require('../dom/AddToDOM');\r\nvar AnimationManager = require('../animations/AnimationManager');\r\nvar CacheManager = require('../cache/CacheManager');\r\nvar CanvasPool = require('../display/canvas/CanvasPool');\r\nvar Class = require('../utils/Class');\r\nvar Config = require('./Config');\r\nvar CreateDOMContainer = require('../dom/CreateDOMContainer');\r\nvar CreateRenderer = require('./CreateRenderer');\r\nvar DataManager = require('../data/DataManager');\r\nvar DebugHeader = require('./DebugHeader');\r\nvar Device = require('../device');\r\nvar DOMContentLoaded = require('../dom/DOMContentLoaded');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar InputManager = require('../input/InputManager');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar PluginManager = require('../plugins/PluginManager');\r\nvar ScaleManager = require('../scale/ScaleManager');\r\nvar SceneManager = require('../scene/SceneManager');\r\nvar TextureEvents = require('../textures/events');\r\nvar TextureManager = require('../textures/TextureManager');\r\nvar TimeStep = require('./TimeStep');\r\nvar VisibilityHandler = require('./VisibilityHandler');\r\n\r\nif (typeof FEATURE_SOUND)\r\n{\r\n    var SoundManagerCreator = require('../sound/SoundManagerCreator');\r\n}\r\n\r\nif (typeof PLUGIN_FBINSTANT)\r\n{\r\n    var FacebookInstantGamesPlugin = require('../../plugins/fbinstant/src/FacebookInstantGamesPlugin');\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * The Phaser.Game instance is the main controller for the entire Phaser game. It is responsible\r\n * for handling the boot process, parsing the configuration values, creating the renderer,\r\n * and setting-up all of the global Phaser systems, such as sound and input.\r\n * Once that is complete it will start the Scene Manager and then begin the main game loop.\r\n *\r\n * You should generally avoid accessing any of the systems created by Game, and instead use those\r\n * made available to you via the Phaser.Scene Systems class instead.\r\n *\r\n * @class Game\r\n * @memberof Phaser\r\n * @constructor\r\n * @fires Phaser.Core.Events#BLUR\r\n * @fires Phaser.Core.Events#FOCUS\r\n * @fires Phaser.Core.Events#HIDDEN\r\n * @fires Phaser.Core.Events#VISIBLE\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Core.GameConfig} [GameConfig] - The configuration object for your Phaser Game instance.\r\n */\r\nvar Game = new Class({\r\n\r\n    initialize:\r\n\r\n    function Game (config)\r\n    {\r\n        /**\r\n         * The parsed Game Configuration object.\r\n         *\r\n         * The values stored within this object are read-only and should not be changed at run-time.\r\n         *\r\n         * @name Phaser.Game#config\r\n         * @type {Phaser.Core.Config}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.config = new Config(config);\r\n\r\n        /**\r\n         * A reference to either the Canvas or WebGL Renderer that this Game is using.\r\n         *\r\n         * @name Phaser.Game#renderer\r\n         * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n         * @since 3.0.0\r\n         */\r\n        this.renderer = null;\r\n\r\n        /**\r\n         * A reference to an HTML Div Element used as the DOM Element Container.\r\n         * \r\n         * Only set if `createDOMContainer` is `true` in the game config (by default it is `false`) and\r\n         * if you provide a parent element to insert the Phaser Game inside.\r\n         *\r\n         * See the DOM Element Game Object for more details.\r\n         *\r\n         * @name Phaser.Game#domContainer\r\n         * @type {HTMLDivElement}\r\n         * @since 3.17.0\r\n         */\r\n        this.domContainer = null;\r\n\r\n        /**\r\n         * A reference to the HTML Canvas Element that Phaser uses to render the game.\r\n         * This is created automatically by Phaser unless you provide a `canvas` property\r\n         * in your Game Config.\r\n         *\r\n         * @name Phaser.Game#canvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.0.0\r\n         */\r\n        this.canvas = null;\r\n\r\n        /**\r\n         * A reference to the Rendering Context belonging to the Canvas Element this game is rendering to.\r\n         * If the game is running under Canvas it will be a 2d Canvas Rendering Context.\r\n         * If the game is running under WebGL it will be a WebGL Rendering Context.\r\n         * This context is created automatically by Phaser unless you provide a `context` property\r\n         * in your Game Config.\r\n         *\r\n         * @name Phaser.Game#context\r\n         * @type {(CanvasRenderingContext2D|WebGLRenderingContext)}\r\n         * @since 3.0.0\r\n         */\r\n        this.context = null;\r\n\r\n        /**\r\n         * A flag indicating when this Game instance has finished its boot process.\r\n         *\r\n         * @name Phaser.Game#isBooted\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.isBooted = false;\r\n\r\n        /**\r\n         * A flag indicating if this Game is currently running its game step or not.\r\n         *\r\n         * @name Phaser.Game#isRunning\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * An Event Emitter which is used to broadcast game-level events from the global systems.\r\n         *\r\n         * @name Phaser.Game#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events = new EventEmitter();\r\n\r\n        /**\r\n         * An instance of the Animation Manager.\r\n         *\r\n         * The Animation Manager is a global system responsible for managing all animations used within your game.\r\n         *\r\n         * @name Phaser.Game#anims\r\n         * @type {Phaser.Animations.AnimationManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.anims = new AnimationManager(this);\r\n\r\n        /**\r\n         * An instance of the Texture Manager.\r\n         *\r\n         * The Texture Manager is a global system responsible for managing all textures being used by your game.\r\n         *\r\n         * @name Phaser.Game#textures\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.textures = new TextureManager(this);\r\n\r\n        /**\r\n         * An instance of the Cache Manager.\r\n         *\r\n         * The Cache Manager is a global system responsible for caching, accessing and releasing external game assets.\r\n         *\r\n         * @name Phaser.Game#cache\r\n         * @type {Phaser.Cache.CacheManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.cache = new CacheManager(this);\r\n\r\n        /**\r\n         * An instance of the Data Manager\r\n         *\r\n         * @name Phaser.Game#registry\r\n         * @type {Phaser.Data.DataManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.registry = new DataManager(this);\r\n\r\n        /**\r\n         * An instance of the Input Manager.\r\n         *\r\n         * The Input Manager is a global system responsible for the capture of browser-level input events.\r\n         *\r\n         * @name Phaser.Game#input\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.input = new InputManager(this, this.config);\r\n\r\n        /**\r\n         * An instance of the Scene Manager.\r\n         *\r\n         * The Scene Manager is a global system responsible for creating, modifying and updating the Scenes in your game.\r\n         *\r\n         * @name Phaser.Game#scene\r\n         * @type {Phaser.Scenes.SceneManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = new SceneManager(this, this.config.sceneConfig);\r\n\r\n        /**\r\n         * A reference to the Device inspector.\r\n         *\r\n         * Contains information about the device running this game, such as OS, browser vendor and feature support.\r\n         * Used by various systems to determine capabilities and code paths.\r\n         *\r\n         * @name Phaser.Game#device\r\n         * @type {Phaser.DeviceConf}\r\n         * @since 3.0.0\r\n         */\r\n        this.device = Device;\r\n\r\n        /**\r\n         * An instance of the Scale Manager.\r\n         *\r\n         * The Scale Manager is a global system responsible for handling scaling of the game canvas.\r\n         *\r\n         * @name Phaser.Game#scale\r\n         * @type {Phaser.Scale.ScaleManager}\r\n         * @since 3.16.0\r\n         */\r\n        this.scale = new ScaleManager(this, this.config);\r\n\r\n        /**\r\n         * An instance of the base Sound Manager.\r\n         *\r\n         * The Sound Manager is a global system responsible for the playback and updating of all audio in your game.\r\n         * \r\n         * You can disable the inclusion of the Sound Manager in your build by toggling the webpack `FEATURE_SOUND` flag.\r\n         *\r\n         * @name Phaser.Game#sound\r\n         * @type {Phaser.Sound.BaseSoundManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.sound = null;\r\n\r\n        if (typeof FEATURE_SOUND)\r\n        {\r\n            this.sound = SoundManagerCreator.create(this);\r\n        }\r\n\r\n        /**\r\n         * An instance of the Time Step.\r\n         *\r\n         * The Time Step is a global system responsible for setting-up and responding to the browser frame events, processing\r\n         * them and calculating delta values. It then automatically calls the game step.\r\n         *\r\n         * @name Phaser.Game#loop\r\n         * @type {Phaser.Core.TimeStep}\r\n         * @since 3.0.0\r\n         */\r\n        this.loop = new TimeStep(this, this.config.fps);\r\n\r\n        /**\r\n         * An instance of the Plugin Manager.\r\n         *\r\n         * The Plugin Manager is a global system that allows plugins to register themselves with it, and can then install\r\n         * those plugins into Scenes as required.\r\n         *\r\n         * @name Phaser.Game#plugins\r\n         * @type {Phaser.Plugins.PluginManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.plugins = new PluginManager(this, this.config);\r\n\r\n        if (typeof PLUGIN_FBINSTANT)\r\n        {\r\n            /**\r\n             * An instance of the Facebook Instant Games Plugin.\r\n             * \r\n             * This will only be available if the plugin has been built into Phaser,\r\n             * or you're using the special Facebook Instant Games custom build.\r\n             *\r\n             * @name Phaser.Game#facebook\r\n             * @type {Phaser.FacebookInstantGamesPlugin}\r\n             * @since 3.13.0\r\n             */\r\n            this.facebook = new FacebookInstantGamesPlugin(this);\r\n        }\r\n\r\n        /**\r\n         * Is this Game pending destruction at the start of the next frame?\r\n         *\r\n         * @name Phaser.Game#pendingDestroy\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.pendingDestroy = false;\r\n\r\n        /**\r\n         * Remove the Canvas once the destroy is over?\r\n         *\r\n         * @name Phaser.Game#removeCanvas\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.removeCanvas = false;\r\n\r\n        /**\r\n         * Remove everything when the game is destroyed.\r\n         * You cannot create a new Phaser instance on the same web page after doing this.\r\n         *\r\n         * @name Phaser.Game#noReturn\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this.noReturn = false;\r\n\r\n        /**\r\n         * Does the window the game is running in currently have focus or not?\r\n         * This is modified by the VisibilityHandler.\r\n         *\r\n         * @name Phaser.Game#hasFocus\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.9.0\r\n         */\r\n        this.hasFocus = false;\r\n\r\n        //  Wait for the DOM Ready event, then call boot.\r\n        DOMContentLoaded(this.boot.bind(this));\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically when the DOM is ready. It is responsible for creating the renderer,\r\n     * displaying the Debug Header, adding the game canvas to the DOM and emitting the 'boot' event.\r\n     * It listens for a 'ready' event from the base systems and once received it will call `Game.start`.\r\n     *\r\n     * @method Phaser.Game#boot\r\n     * @protected\r\n     * @fires Phaser.Core.Events#BOOT\r\n     * @listens Phaser.Textures.Events#READY\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        if (!PluginCache.hasCore('EventEmitter'))\r\n        {\r\n            console.warn('Aborting. Core Plugins missing.');\r\n            return;\r\n        }\r\n\r\n        this.isBooted = true;\r\n\r\n        this.config.preBoot(this);\r\n\r\n        this.scale.preBoot();\r\n\r\n        CreateRenderer(this);\r\n\r\n        CreateDOMContainer(this);\r\n\r\n        DebugHeader(this);\r\n\r\n        AddToDOM(this.canvas, this.config.parent);\r\n\r\n        //  The Texture Manager has to wait on a couple of non-blocking events before it's fully ready.\r\n        //  So it will emit this internal event when done:\r\n        this.textures.once(TextureEvents.READY, this.texturesReady, this);\r\n\r\n        this.events.emit(Events.BOOT);\r\n    },\r\n\r\n    /**\r\n     * Called automatically when the Texture Manager has finished setting up and preparing the\r\n     * default textures.\r\n     *\r\n     * @method Phaser.Game#texturesReady\r\n     * @private\r\n     * @fires Phaser.Game#ready\r\n     * @since 3.12.0\r\n     */\r\n    texturesReady: function ()\r\n    {\r\n        //  Start all the other systems\r\n        this.events.emit(Events.READY);\r\n\r\n        this.start();\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Game.boot once all of the global systems have finished setting themselves up.\r\n     * By this point the Game is now ready to start the main loop running.\r\n     * It will also enable the Visibility Handler.\r\n     *\r\n     * @method Phaser.Game#start\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    start: function ()\r\n    {\r\n        this.isRunning = true;\r\n\r\n        this.config.postBoot(this);\r\n\r\n        if (this.renderer)\r\n        {\r\n            this.loop.start(this.step.bind(this));\r\n        }\r\n        else\r\n        {\r\n            this.loop.start(this.headlessStep.bind(this));\r\n        }\r\n\r\n        VisibilityHandler(this);\r\n\r\n        var eventEmitter = this.events;\r\n\r\n        eventEmitter.on(Events.HIDDEN, this.onHidden, this);\r\n        eventEmitter.on(Events.VISIBLE, this.onVisible, this);\r\n        eventEmitter.on(Events.BLUR, this.onBlur, this);\r\n        eventEmitter.on(Events.FOCUS, this.onFocus, this);\r\n    },\r\n\r\n    /**\r\n     * The main Game Step. Called automatically by the Time Step, once per browser frame (typically as a result of\r\n     * Request Animation Frame, or Set Timeout on very old browsers.)\r\n     *\r\n     * The step will update the global managers first, then proceed to update each Scene in turn, via the Scene Manager.\r\n     *\r\n     * It will then render each Scene in turn, via the Renderer. This process emits `prerender` and `postrender` events.\r\n     *\r\n     * @method Phaser.Game#step\r\n     * @fires Phaser.Core.Events#PRE_STEP_EVENT\r\n     * @fires Phaser.Core.Events#STEP_EVENT\r\n     * @fires Phaser.Core.Events#POST_STEP_EVENT\r\n     * @fires Phaser.Core.Events#PRE_RENDER_EVENT\r\n     * @fires Phaser.Core.Events#POST_RENDER_EVENT\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    step: function (time, delta)\r\n    {\r\n        if (this.pendingDestroy)\r\n        {\r\n            return this.runDestroy();\r\n        }\r\n\r\n        var eventEmitter = this.events;\r\n\r\n        //  Global Managers like Input and Sound update in the prestep\r\n\r\n        eventEmitter.emit(Events.PRE_STEP, time, delta);\r\n\r\n        //  This is mostly meant for user-land code and plugins\r\n\r\n        eventEmitter.emit(Events.STEP, time, delta);\r\n\r\n        //  Update the Scene Manager and all active Scenes\r\n\r\n        this.scene.update(time, delta);\r\n\r\n        //  Our final event before rendering starts\r\n\r\n        eventEmitter.emit(Events.POST_STEP, time, delta);\r\n\r\n        var renderer = this.renderer;\r\n\r\n        //  Run the Pre-render (clearing the canvas, setting background colors, etc)\r\n\r\n        renderer.preRender();\r\n\r\n        eventEmitter.emit(Events.PRE_RENDER, renderer, time, delta);\r\n\r\n        //  The main render loop. Iterates all Scenes and all Cameras in those scenes, rendering to the renderer instance.\r\n\r\n        this.scene.render(renderer);\r\n\r\n        //  The Post-Render call. Tidies up loose end, takes snapshots, etc.\r\n\r\n        renderer.postRender();\r\n\r\n        //  The final event before the step repeats. Your last chance to do anything to the canvas before it all starts again.\r\n\r\n        eventEmitter.emit(Events.POST_RENDER, renderer, time, delta);\r\n    },\r\n\r\n    /**\r\n     * A special version of the Game Step for the HEADLESS renderer only.\r\n     *\r\n     * The main Game Step. Called automatically by the Time Step, once per browser frame (typically as a result of\r\n     * Request Animation Frame, or Set Timeout on very old browsers.)\r\n     *\r\n     * The step will update the global managers first, then proceed to update each Scene in turn, via the Scene Manager.\r\n     *\r\n     * This process emits `prerender` and `postrender` events, even though nothing actually displays.\r\n     *\r\n     * @method Phaser.Game#headlessStep\r\n     * @fires Phaser.Game#prerenderEvent\r\n     * @fires Phaser.Game#postrenderEvent\r\n     * @since 3.2.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    headlessStep: function (time, delta)\r\n    {\r\n        var eventEmitter = this.events;\r\n\r\n        //  Global Managers\r\n\r\n        eventEmitter.emit(Events.PRE_STEP, time, delta);\r\n\r\n        eventEmitter.emit(Events.STEP, time, delta);\r\n\r\n        //  Scenes\r\n\r\n        this.scene.update(time, delta);\r\n\r\n        eventEmitter.emit(Events.POST_STEP, time, delta);\r\n\r\n        //  Render\r\n\r\n        eventEmitter.emit(Events.PRE_RENDER);\r\n\r\n        eventEmitter.emit(Events.POST_RENDER);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by the Visibility Handler.\r\n     * This will pause the main loop and then emit a pause event.\r\n     *\r\n     * @method Phaser.Game#onHidden\r\n     * @protected\r\n     * @fires Phaser.Core.Events#PAUSE\r\n     * @since 3.0.0\r\n     */\r\n    onHidden: function ()\r\n    {\r\n        this.loop.pause();\r\n\r\n        this.events.emit(Events.PAUSE);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by the Visibility Handler.\r\n     * This will resume the main loop and then emit a resume event.\r\n     *\r\n     * @method Phaser.Game#onVisible\r\n     * @protected\r\n     * @fires Phaser.Core.Events#RESUME\r\n     * @since 3.0.0\r\n     */\r\n    onVisible: function ()\r\n    {\r\n        this.loop.resume();\r\n\r\n        this.events.emit(Events.RESUME);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by the Visibility Handler.\r\n     * This will set the main loop into a 'blurred' state, which pauses it.\r\n     *\r\n     * @method Phaser.Game#onBlur\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: function ()\r\n    {\r\n        this.hasFocus = false;\r\n\r\n        this.loop.blur();\r\n    },\r\n\r\n    /**\r\n     * Called automatically by the Visibility Handler.\r\n     * This will set the main loop into a 'focused' state, which resumes it.\r\n     *\r\n     * @method Phaser.Game#onFocus\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: function ()\r\n    {\r\n        this.hasFocus = true;\r\n\r\n        this.loop.focus();\r\n    },\r\n\r\n    /**\r\n     * Returns the current game frame.\r\n     * When the game starts running, the frame is incremented every time Request Animation Frame, or Set Timeout, fires.\r\n     *\r\n     * @method Phaser.Game#getFrame\r\n     * @since 3.16.0\r\n     * \r\n     * @return {number} The current game frame.\r\n     */\r\n    getFrame: function ()\r\n    {\r\n        return this.loop.frame;\r\n    },\r\n\r\n    /**\r\n     * Returns the current game timestamp.\r\n     * When the game starts running, the frame is incremented every time Request Animation Frame, or Set Timeout, fires.\r\n     *\r\n     * @method Phaser.Game#getTime\r\n     * @since 3.16.0\r\n     * \r\n     * @return {number} The current game timestamp.\r\n     */\r\n    getTime: function ()\r\n    {\r\n        return this.loop.frame.time;\r\n    },\r\n\r\n    /**\r\n     * Flags this Game instance as needing to be destroyed on the _next frame_, making this an asynchronous operation.\r\n     * \r\n     * It will wait until the current frame has completed and then call `runDestroy` internally.\r\n     * \r\n     * If you need to react to the games eventual destruction, listen for the `DESTROY` event.\r\n     * \r\n     * If you **do not** need to run Phaser again on the same web page you can set the `noReturn` argument to `true` and it will free-up\r\n     * memory being held by the core Phaser plugins. If you do need to create another game instance on the same page, leave this as `false`.\r\n     *\r\n     * @method Phaser.Game#destroy\r\n     * @fires Phaser.Core.Events#DESTROY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} removeCanvas - Set to `true` if you would like the parent canvas element removed from the DOM, or `false` to leave it in place.\r\n     * @param {boolean} [noReturn=false] - If `true` all the core Phaser plugins are destroyed. You cannot create another instance of Phaser on the same web page if you do this.\r\n     */\r\n    destroy: function (removeCanvas, noReturn)\r\n    {\r\n        if (noReturn === undefined) { noReturn = false; }\r\n        \r\n        this.pendingDestroy = true;\r\n\r\n        this.removeCanvas = removeCanvas;\r\n        this.noReturn = noReturn;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Phaser.Game instance, all global systems, all sub-systems and all Scenes.\r\n     *\r\n     * @method Phaser.Game#runDestroy\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    runDestroy: function ()\r\n    {\r\n        this.events.emit(Events.DESTROY);\r\n\r\n        this.events.removeAllListeners();\r\n\r\n        this.scene.destroy();\r\n\r\n        if (this.renderer)\r\n        {\r\n            this.renderer.destroy();\r\n        }\r\n\r\n        if (this.removeCanvas && this.canvas)\r\n        {\r\n            CanvasPool.remove(this.canvas);\r\n\r\n            if (this.canvas.parentNode)\r\n            {\r\n                this.canvas.parentNode.removeChild(this.canvas);\r\n            }\r\n        }\r\n\r\n        if (this.domContainer)\r\n        {\r\n            this.domContainer.parentNode.removeChild(this.domContainer);\r\n        }\r\n\r\n        this.loop.destroy();\r\n        \r\n        this.pendingDestroy = false;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Game;\r\n\r\n/**\r\n * \"Computers are good at following instructions, but not at reading your mind.\" - Donald Knuth\r\n */\r\n"},"sourceMaps":null,"error":null,"hash":"5fd611470a6e8a27e155abc7fefa77cd","cacheData":{"env":{}}}