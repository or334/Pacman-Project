{"id":"../../node_modules/phaser/src/tilemaps/ImageCollection.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\ImageCollection.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * An Image Collection is a special Tile Set containing multiple images, with no slicing into each image.\r\n *\r\n * Image Collections are normally created automatically when Tiled data is loaded.\r\n *\r\n * @class ImageCollection\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n * \r\n * @param {string} name - The name of the image collection in the map data.\r\n * @param {integer} firstgid - The first image index this image collection contains.\r\n * @param {integer} [width=32] - Width of widest image (in pixels).\r\n * @param {integer} [height=32] - Height of tallest image (in pixels).\r\n * @param {integer} [margin=0] - The margin around all images in the collection (in pixels).\r\n * @param {integer} [spacing=0] - The spacing between each image in the collection (in pixels).\r\n * @param {object} [properties={}] - Custom Image Collection properties.\r\n */\r\nvar ImageCollection = new Class({\r\n\r\n    initialize:\r\n\r\n    function ImageCollection (name, firstgid, width, height, margin, spacing, properties)\r\n    {\r\n        if (width === undefined || width <= 0) { width = 32; }\r\n        if (height === undefined || height <= 0) { height = 32; }\r\n        if (margin === undefined) { margin = 0; }\r\n        if (spacing === undefined) { spacing = 0; }\r\n\r\n        /**\r\n         * The name of the Image Collection.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#name\r\n         * @type {string}\r\n         * @since 3.0.0\r\n        */\r\n        this.name = name;\r\n\r\n        /**\r\n         * The Tiled firstgid value.\r\n         * This is the starting index of the first image index this Image Collection contains.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#firstgid\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.firstgid = firstgid | 0;\r\n\r\n        /**\r\n         * The width of the widest image (in pixels).\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#imageWidth\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.imageWidth = width | 0;\r\n\r\n        /**\r\n         * The height of the tallest image (in pixels).\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#imageHeight\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.imageHeight = height | 0;\r\n\r\n        /**\r\n         * The margin around the images in the collection (in pixels).\r\n         * Use `setSpacing` to change.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#imageMarge\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.imageMargin = margin | 0;\r\n\r\n        /**\r\n         * The spacing between each image in the collection (in pixels).\r\n         * Use `setSpacing` to change.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#imageSpacing\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.imageSpacing = spacing | 0;\r\n\r\n        /**\r\n         * Image Collection-specific properties that are typically defined in the Tiled editor.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#properties\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.properties = properties || {};\r\n\r\n        /**\r\n         * The cached images that are a part of this collection.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#images\r\n         * @type {array}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.images = [];\r\n\r\n        /**\r\n         * The total number of images in the image collection.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#total\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.total = 0;\r\n    },\r\n\r\n    /**\r\n     * Returns true if and only if this image collection contains the given image index.\r\n     *\r\n     * @method Phaser.Tilemaps.ImageCollection#containsImageIndex\r\n     * @since 3.0.0\r\n     * \r\n     * @param {integer} imageIndex - The image index to search for.\r\n     * \r\n     * @return {boolean} True if this Image Collection contains the given index.\r\n     */\r\n    containsImageIndex: function (imageIndex)\r\n    {\r\n        return (imageIndex >= this.firstgid && imageIndex < (this.firstgid + this.total));\r\n    },\r\n\r\n    /**\r\n     * Add an image to this Image Collection.\r\n     *\r\n     * @method Phaser.Tilemaps.ImageCollection#addImage\r\n     * @since 3.0.0\r\n     * \r\n     * @param {integer} gid - The gid of the image in the Image Collection.\r\n     * @param {string} image - The the key of the image in the Image Collection and in the cache.\r\n     *\r\n     * @return {Phaser.Tilemaps.ImageCollection} This ImageCollection object.\r\n     */\r\n    addImage: function (gid, image)\r\n    {\r\n        this.images.push({ gid: gid, image: image });\r\n        this.total++;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = ImageCollection;\r\n"},"sourceMaps":null,"error":null,"hash":"f47d798d3e74ab088031fea13693139b","cacheData":{"env":{}}}