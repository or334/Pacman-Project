{"id":"../../node_modules/phaser/src/input/touch/TouchManager.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\touch\\TouchManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../events","loc":{"line":8,"column":26},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\touch\\TouchManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\events\\index.js"},{"name":"../../utils/NOOP","loc":{"line":9,"column":19},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\touch\\TouchManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\NOOP.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar InputEvents = require('../events');\r\nvar NOOP = require('../../utils/NOOP');\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\r\n// https://patrickhlauke.github.io/touch/tests/results/\r\n// https://www.html5rocks.com/en/mobile/touch/\r\n\r\n/**\r\n * @classdesc\r\n * The Touch Manager is a helper class that belongs to the Input Manager.\r\n * \r\n * Its role is to listen for native DOM Touch Events and then pass them onto the Input Manager for further processing.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically.\r\n *\r\n * @class TouchManager\r\n * @memberof Phaser.Input.Touch\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\r\nvar TouchManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function TouchManager (inputManager)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = inputManager;\r\n\r\n        /**\r\n         * If true the DOM events will have event.preventDefault applied to them, if false they will propagate fully.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#capture\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.capture = true;\r\n\r\n        /**\r\n         * A boolean that controls if the Touch Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#enabled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = false;\r\n\r\n        /**\r\n         * The Touch Event target, as defined in the Game Config.\r\n         * Typically the canvas to which the game is rendering, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#target\r\n         * @type {any}\r\n         * @since 3.0.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * The Touch Start event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchStart\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.onTouchStart = NOOP;\r\n\r\n        /**\r\n         * The Touch Start event handler function specifically for events on the Window.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchStartWindow\r\n         * @type {function}\r\n         * @since 3.17.0\r\n         */\r\n        this.onTouchStartWindow = NOOP;\r\n\r\n        /**\r\n         * The Touch Move event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchMove\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.onTouchMove = NOOP;\r\n\r\n        /**\r\n         * The Touch End event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchEnd\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.onTouchEnd = NOOP;\r\n\r\n        /**\r\n         * The Touch End event handler function specifically for events on the Window.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchEndWindow\r\n         * @type {function}\r\n         * @since 3.17.0\r\n         */\r\n        this.onTouchEndWindow = NOOP;\r\n\r\n        /**\r\n         * The Touch Cancel event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchCancel\r\n         * @type {function}\r\n         * @since 3.15.0\r\n         */\r\n        this.onTouchCancel = NOOP;\r\n\r\n        /**\r\n         * The Touch Over event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchOver\r\n         * @type {function}\r\n         * @since 3.16.0\r\n         */\r\n        this.onTouchOver = NOOP;\r\n\r\n        /**\r\n         * The Touch Out event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchOut\r\n         * @type {function}\r\n         * @since 3.16.0\r\n         */\r\n        this.onTouchOut = NOOP;\r\n\r\n        inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Touch Manager boot process.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#boot\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var config = this.manager.config;\r\n\r\n        this.enabled = config.inputTouch;\r\n        this.target = config.inputTouchEventTarget;\r\n        this.capture = config.inputTouchCapture;\r\n\r\n        if (!this.target)\r\n        {\r\n            this.target = this.manager.game.canvas;\r\n        }\r\n\r\n        if (this.enabled && this.target)\r\n        {\r\n            this.startListeners();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Starts the Touch Event listeners running as long as an input target is set.\r\n     * \r\n     * This method is called automatically if Touch Input is enabled in the game config,\r\n     * which it is by default. However, you can call it manually should you need to\r\n     * delay input capturing until later in the game.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#startListeners\r\n     * @since 3.0.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var _this = this;\r\n        var canvas = this.manager.canvas;\r\n        var autoFocus = (window && window.focus && this.manager.game.config.autoFocus);\r\n\r\n        this.onTouchStart = function (event)\r\n        {\r\n            if (autoFocus)\r\n            {\r\n                window.focus();\r\n            }\r\n\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                //  Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.queueTouchStart(event);\r\n    \r\n            if (_this.capture && event.target === canvas)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        this.onTouchStartWindow = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                //  Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            if (event.target !== canvas)\r\n            {\r\n                //  Only process the event if the target isn't the canvas\r\n                _this.manager.queueTouchStart(event);\r\n            }\r\n        };\r\n\r\n        this.onTouchMove = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                //  Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.queueTouchMove(event);\r\n    \r\n            if (_this.capture)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        this.onTouchEnd = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                //  Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.queueTouchEnd(event);\r\n    \r\n            if (_this.capture && event.target === canvas)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        this.onTouchEndWindow = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                //  Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            if (event.target !== canvas)\r\n            {\r\n                //  Only process the event if the target isn't the canvas\r\n                _this.manager.queueTouchEnd(event);\r\n            }\r\n        };\r\n\r\n        this.onTouchCancel = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                //  Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.queueTouchCancel(event);\r\n    \r\n            if (_this.capture)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        this.onTouchOver = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.setCanvasOver(event);\r\n        };\r\n\r\n        this.onTouchOut = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.setCanvasOut(event);\r\n        };\r\n\r\n        var target = this.target;\r\n\r\n        if (!target)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var passive = { passive: true };\r\n        var nonPassive = { passive: false };\r\n\r\n        target.addEventListener('touchstart', this.onTouchStart, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchmove', this.onTouchMove, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchend', this.onTouchEnd, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchcancel', this.onTouchCancel, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchover', this.onTouchOver, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchout', this.onTouchOut, (this.capture) ? nonPassive : passive);\r\n\r\n        if (window && this.manager.game.config.inputWindowEvents)\r\n        {\r\n            window.addEventListener('touchstart', this.onTouchStartWindow, nonPassive);\r\n            window.addEventListener('touchend', this.onTouchEndWindow, nonPassive);\r\n        }\r\n\r\n        this.enabled = true;\r\n    },\r\n\r\n    /**\r\n     * Stops the Touch Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#stopListeners\r\n     * @since 3.0.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        var target = this.target;\r\n\r\n        target.removeEventListener('touchstart', this.onTouchStart);\r\n        target.removeEventListener('touchmove', this.onTouchMove);\r\n        target.removeEventListener('touchend', this.onTouchEnd);\r\n        target.removeEventListener('touchcancel', this.onTouchCancel);\r\n        target.removeEventListener('touchover', this.onTouchOver);\r\n        target.removeEventListener('touchout', this.onTouchOut);\r\n\r\n        if (window)\r\n        {\r\n            window.removeEventListener('touchstart', this.onTouchStartWindow);\r\n            window.removeEventListener('touchend', this.onTouchEndWindow);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Touch Manager instance.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.target = null;\r\n        this.enabled = false;\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TouchManager;\r\n"},"sourceMaps":null,"error":null,"hash":"7b40febfba8f15dc7590cde2c36de6c6","cacheData":{"env":{}}}