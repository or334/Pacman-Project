{"id":"../../node_modules/phaser/src/gameobjects/UpdateList.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\UpdateList.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../plugins/PluginCache","loc":{"line":8,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\UpdateList.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\plugins\\PluginCache.js"},{"name":"../scene/events","loc":{"line":9,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\UpdateList.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\events\\index.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar SceneEvents = require('../scene/events');\r\n\r\n/**\r\n * @classdesc\r\n * The Update List plugin.\r\n *\r\n * Update Lists belong to a Scene and maintain the list Game Objects to be updated every frame.\r\n *\r\n * Some or all of these Game Objects may also be part of the Scene's [Display List]{@link Phaser.GameObjects.DisplayList}, for Rendering.\r\n *\r\n * @class UpdateList\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that the Update List belongs to.\r\n */\r\nvar UpdateList = new Class({\r\n\r\n    initialize:\r\n\r\n    function UpdateList (scene)\r\n    {\r\n        /**\r\n         * The Scene that the Update List belongs to.\r\n         *\r\n         * @name Phaser.GameObjects.UpdateList#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * The Scene's Systems.\r\n         *\r\n         * @name Phaser.GameObjects.UpdateList#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * The list of Game Objects.\r\n         *\r\n         * @name Phaser.GameObjects.UpdateList#_list\r\n         * @type {array}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._list = [];\r\n\r\n        /**\r\n         * Game Objects that are pending insertion into the list.\r\n         *\r\n         * @name Phaser.GameObjects.UpdateList#_pendingInsertion\r\n         * @type {array}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._pendingInsertion = [];\r\n\r\n        /**\r\n         * Game Objects that are pending removal from the list.\r\n         *\r\n         * @name Phaser.GameObjects.UpdateList#_pendingRemoval\r\n         * @type {array}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._pendingRemoval = [];\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n        scene.sys.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.GameObjects.UpdateList#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.GameObjects.UpdateList#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on(SceneEvents.PRE_UPDATE, this.preUpdate, this);\r\n        eventEmitter.on(SceneEvents.UPDATE, this.update, this);\r\n        eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Add a Game Object to the Update List.\r\n     *\r\n     * @method Phaser.GameObjects.UpdateList#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object to add.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The added Game Object.\r\n     */\r\n    add: function (child)\r\n    {\r\n        //  Is child already in this list?\r\n\r\n        if (this._list.indexOf(child) === -1 && this._pendingInsertion.indexOf(child) === -1)\r\n        {\r\n            this._pendingInsertion.push(child);\r\n        }\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * The pre-update step.\r\n     *\r\n     * Handles Game Objects that are pending insertion to and removal from the list.\r\n     *\r\n     * @method Phaser.GameObjects.UpdateList#preUpdate\r\n     * @since 3.0.0\r\n     */\r\n    preUpdate: function ()\r\n    {\r\n        var toRemove = this._pendingRemoval.length;\r\n        var toInsert = this._pendingInsertion.length;\r\n\r\n        if (toRemove === 0 && toInsert === 0)\r\n        {\r\n            //  Quick bail\r\n            return;\r\n        }\r\n\r\n        var i;\r\n        var gameObject;\r\n\r\n        //  Delete old gameObjects\r\n        for (i = 0; i < toRemove; i++)\r\n        {\r\n            gameObject = this._pendingRemoval[i];\r\n\r\n            var index = this._list.indexOf(gameObject);\r\n\r\n            if (index > -1)\r\n            {\r\n                this._list.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        //  Move pending to active\r\n        this._list = this._list.concat(this._pendingInsertion.splice(0));\r\n\r\n        //  Clear the lists\r\n        this._pendingRemoval.length = 0;\r\n        this._pendingInsertion.length = 0;\r\n    },\r\n\r\n    /**\r\n     * The update step.\r\n     *\r\n     * Pre-updates every active Game Object in the list.\r\n     *\r\n     * @method Phaser.GameObjects.UpdateList#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp.\r\n     * @param {number} delta - The delta time elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        for (var i = 0; i < this._list.length; i++)\r\n        {\r\n            var gameObject = this._list[i];\r\n\r\n            if (gameObject.active)\r\n            {\r\n                gameObject.preUpdate.call(gameObject, time, delta);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Remove a Game Object from the list.\r\n     *\r\n     * @method Phaser.GameObjects.UpdateList#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object to remove from the list.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The removed Game Object.\r\n     */\r\n    remove: function (child)\r\n    {\r\n        var index = this._pendingRemoval.indexOf(child);\r\n\r\n        if (index !== -1)\r\n        {\r\n            this._pendingRemoval.push(child);\r\n        }\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * Remove all Game Objects from the list.\r\n     *\r\n     * @method Phaser.GameObjects.UpdateList#removeAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.UpdateList} This UpdateList.\r\n     */\r\n    removeAll: function ()\r\n    {\r\n        var i = this._list.length;\r\n\r\n        while (i--)\r\n        {\r\n            this.remove(this._list[i]);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.GameObjects.UpdateList#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        var i = this._list.length;\r\n\r\n        while (i--)\r\n        {\r\n            this._list[i].destroy(true);\r\n        }\r\n\r\n        i = this._pendingRemoval.length;\r\n\r\n        while (i--)\r\n        {\r\n            this._pendingRemoval[i].destroy(true);\r\n        }\r\n\r\n        i = this._pendingInsertion.length;\r\n\r\n        while (i--)\r\n        {\r\n            this._pendingInsertion[i].destroy(true);\r\n        }\r\n\r\n        this._list.length = 0;\r\n        this._pendingRemoval.length = 0;\r\n        this._pendingInsertion.length = 0;\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off(SceneEvents.PRE_UPDATE, this.preUpdate, this);\r\n        eventEmitter.off(SceneEvents.UPDATE, this.update, this);\r\n        eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.GameObjects.UpdateList#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    },\r\n\r\n    /**\r\n     * The length of the list.\r\n     *\r\n     * @name Phaser.GameObjects.UpdateList#length\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.10.0\r\n     */\r\n    length: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._list.length;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('UpdateList', UpdateList, 'updateList');\r\n\r\nmodule.exports = UpdateList;\r\n"},"sourceMaps":null,"error":null,"hash":"3e5b964ed9f8a67d5911b69d2a4f69df","cacheData":{"env":{}}}