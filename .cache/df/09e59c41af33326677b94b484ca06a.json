{"id":"../../node_modules/phaser/src/renderer/snapshot/WebGLSnapshot.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../display/canvas/CanvasPool","loc":{"line":7,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\snapshot\\WebGLSnapshot.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\canvas\\CanvasPool.js"},{"name":"../../display/color/Color","loc":{"line":8,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\snapshot\\WebGLSnapshot.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\color\\Color.js"},{"name":"../../utils/object/GetFastValue","loc":{"line":9,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\snapshot\\WebGLSnapshot.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetFastValue.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CanvasPool = require('../../display/canvas/CanvasPool');\r\nvar Color = require('../../display/color/Color');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\n\r\n/**\r\n * Takes a snapshot of an area from the current frame displayed by a WebGL canvas.\r\n * \r\n * This is then copied to an Image object. When this loads, the results are sent\r\n * to the callback provided in the Snapshot Configuration object.\r\n *\r\n * @function Phaser.Renderer.Snapshot.WebGL\r\n * @since 3.0.0\r\n *\r\n * @param {HTMLCanvasElement} sourceCanvas - The canvas to take a snapshot of.\r\n * @param {Phaser.Types.Renderer.Snapshot.SnapshotState} config - The snapshot configuration object.\r\n */\r\nvar WebGLSnapshot = function (sourceCanvas, config)\r\n{\r\n    var gl = sourceCanvas.getContext('experimental-webgl');\r\n\r\n    var callback = GetFastValue(config, 'callback');\r\n    var type = GetFastValue(config, 'type', 'image/png');\r\n    var encoderOptions = GetFastValue(config, 'encoder', 0.92);\r\n    var x = GetFastValue(config, 'x', 0);\r\n    var y = GetFastValue(config, 'y', 0);\r\n    var width = GetFastValue(config, 'width', gl.drawingBufferWidth);\r\n    var height = GetFastValue(config, 'height', gl.drawingBufferHeight);\r\n    var getPixel = GetFastValue(config, 'getPixel', false);\r\n\r\n    if (getPixel)\r\n    {\r\n        var pixel = new Uint8Array(4);\r\n\r\n        gl.readPixels(x, gl.drawingBufferHeight - y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\r\n\r\n        callback.call(null, new Color(pixel[0], pixel[1], pixel[2], pixel[3] / 255));\r\n    }\r\n    else\r\n    {\r\n        var pixels = new Uint8Array(width * height * 4);\r\n\r\n        gl.readPixels(x, gl.drawingBufferHeight - y - height, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n    \r\n        var canvas = CanvasPool.createWebGL(this, width, height);\r\n        var ctx = canvas.getContext('2d');\r\n\r\n        var imageData = ctx.getImageData(0, 0, width, height);\r\n    \r\n        var data = imageData.data;\r\n    \r\n        for (var py = 0; py < height; py++)\r\n        {\r\n            for (var px = 0; px < width; px++)\r\n            {\r\n                var sourceIndex = ((height - py) * width + px) * 4;\r\n                var destIndex = (py * width + px) * 4;\r\n\r\n                data[destIndex + 0] = pixels[sourceIndex + 0];\r\n                data[destIndex + 1] = pixels[sourceIndex + 1];\r\n                data[destIndex + 2] = pixels[sourceIndex + 2];\r\n                data[destIndex + 3] = pixels[sourceIndex + 3];\r\n            }\r\n        }\r\n    \r\n        ctx.putImageData(imageData, 0, 0);\r\n    \r\n        var image = new Image();\r\n\r\n        image.onerror = function ()\r\n        {\r\n            callback.call(null);\r\n\r\n            CanvasPool.remove(canvas);\r\n        };\r\n\r\n        image.onload = function ()\r\n        {\r\n            callback.call(null, image);\r\n\r\n            CanvasPool.remove(canvas);\r\n        };\r\n\r\n        image.src = canvas.toDataURL(type, encoderOptions);\r\n    }\r\n};\r\n\r\nmodule.exports = WebGLSnapshot;\r\n"},"sourceMaps":null,"error":null,"hash":"ee86eb80effcf9bb0b38178d97f0b71d","cacheData":{"env":{}}}