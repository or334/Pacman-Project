{"id":"../../node_modules/phaser/src/renderer/snapshot/CanvasSnapshot.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../display/canvas/CanvasPool","loc":{"line":7,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\snapshot\\CanvasSnapshot.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\canvas\\CanvasPool.js"},{"name":"../../display/color/Color","loc":{"line":8,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\snapshot\\CanvasSnapshot.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\color\\Color.js"},{"name":"../../utils/object/GetFastValue","loc":{"line":9,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\snapshot\\CanvasSnapshot.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetFastValue.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CanvasPool = require('../../display/canvas/CanvasPool');\r\nvar Color = require('../../display/color/Color');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\n\r\n/**\r\n * Takes a snapshot of an area from the current frame displayed by a canvas.\r\n * \r\n * This is then copied to an Image object. When this loads, the results are sent\r\n * to the callback provided in the Snapshot Configuration object.\r\n *\r\n * @function Phaser.Renderer.Snapshot.Canvas\r\n * @since 3.0.0\r\n *\r\n * @param {HTMLCanvasElement} sourceCanvas - The canvas to take a snapshot of.\r\n * @param {Phaser.Types.Renderer.Snapshot.SnapshotState} config - The snapshot configuration object.\r\n */\r\nvar CanvasSnapshot = function (canvas, config)\r\n{\r\n    var callback = GetFastValue(config, 'callback');\r\n    var type = GetFastValue(config, 'type', 'image/png');\r\n    var encoderOptions = GetFastValue(config, 'encoder', 0.92);\r\n    var x = Math.abs(Math.round(GetFastValue(config, 'x', 0)));\r\n    var y = Math.abs(Math.round(GetFastValue(config, 'y', 0)));\r\n    var width = GetFastValue(config, 'width', canvas.width);\r\n    var height = GetFastValue(config, 'height', canvas.height);\r\n    var getPixel = GetFastValue(config, 'getPixel', false);\r\n\r\n    if (getPixel)\r\n    {\r\n        var context = canvas.getContext('2d');\r\n        var imageData = context.getImageData(x, y, 1, 1);\r\n        var data = imageData.data;\r\n\r\n        callback.call(null, new Color(data[0], data[1], data[2], data[3] / 255));\r\n    }\r\n    else if (x !== 0 || y !== 0 || width !== canvas.width || height !== canvas.height)\r\n    {\r\n        //  Area Grab\r\n        var copyCanvas = CanvasPool.createWebGL(this, width, height);\r\n        var ctx = copyCanvas.getContext('2d');\r\n\r\n        ctx.drawImage(canvas, x, y, width, height, 0, 0, width, height);\r\n\r\n        var image1 = new Image();\r\n    \r\n        image1.onerror = function ()\r\n        {\r\n            callback.call(null);\r\n\r\n            CanvasPool.remove(copyCanvas);\r\n        };\r\n\r\n        image1.onload = function ()\r\n        {\r\n            callback.call(null, image1);\r\n\r\n            CanvasPool.remove(copyCanvas);\r\n        };\r\n\r\n        image1.src = copyCanvas.toDataURL(type, encoderOptions);\r\n    }\r\n    else\r\n    {\r\n        //  Full Grab\r\n        var image2 = new Image();\r\n    \r\n        image2.onerror = function ()\r\n        {\r\n            callback.call(null);\r\n        };\r\n\r\n        image2.onload = function ()\r\n        {\r\n            callback.call(null, image2);\r\n        };\r\n\r\n        image2.src = canvas.toDataURL(type, encoderOptions);\r\n    }\r\n};\r\n\r\nmodule.exports = CanvasSnapshot;\r\n"},"sourceMaps":null,"error":null,"hash":"ee67ef491be4086b8de5491bdfdcee8a","cacheData":{"env":{}}}