{"id":"../../node_modules/phaser/src/physics/matter-js/lib/plugins/MatterAttractors.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../CustomMain","loc":{"line":1,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\plugins\\MatterAttractors.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\CustomMain.js"}],"generated":{"js":"var Matter = require('../../CustomMain');\r\n\r\n/**\r\n * An attractors plugin for matter.js.\r\n * See the readme for usage and examples.\r\n * @module MatterAttractors\r\n */\r\nvar MatterAttractors = {\r\n  // plugin meta\r\n  name: 'matter-attractors', // PLUGIN_NAME\r\n  version: '0.1.7', // PLUGIN_VERSION\r\n  for: 'matter-js@^0.13.1',\r\n  silent: true, // no console log please\r\n\r\n  // installs the plugin where `base` is `Matter`\r\n  // you should not need to call this directly.\r\n  install: function(base) {\r\n    base.after('Body.create', function() {\r\n      MatterAttractors.Body.init(this);\r\n    });\r\n\r\n    base.before('Engine.update', function(engine) {\r\n      MatterAttractors.Engine.update(engine);\r\n    });\r\n  },\r\n\r\n  Body: {\r\n    /**\r\n     * Initialises the `body` to support attractors.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterAttractors.Body.init\r\n     * @param {Matter.Body} body The body to init.\r\n     * @returns {void} No return value.\r\n     */\r\n    init: function(body) {\r\n      body.plugin.attractors = body.plugin.attractors || [];\r\n    }\r\n  },\r\n\r\n  Engine: {\r\n    /**\r\n     * Applies all attractors for all bodies in the `engine`.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterAttractors.Engine.update\r\n     * @param {Matter.Engine} engine The engine to update.\r\n     * @returns {void} No return value.\r\n     */\r\n    update: function(engine) {\r\n      var world = engine.world,\r\n        bodies = Matter.Composite.allBodies(world);\r\n\r\n      for (var i = 0; i < bodies.length; i += 1) {\r\n        var bodyA = bodies[i],\r\n          attractors = bodyA.plugin.attractors;\r\n\r\n        if (attractors && attractors.length > 0) {\r\n          for (var j = i + 1; j < bodies.length; j += 1) {\r\n            var bodyB = bodies[j];\r\n\r\n            for (var k = 0; k < attractors.length; k += 1) {\r\n              var attractor = attractors[k],\r\n                forceVector = attractor;\r\n\r\n              if (Matter.Common.isFunction(attractor)) {\r\n                forceVector = attractor(bodyA, bodyB);\r\n              }\r\n\r\n              if (forceVector) {\r\n                Matter.Body.applyForce(bodyB, bodyB.position, forceVector);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Defines some useful common attractor functions that can be used\r\n   * by pushing them to your body's `body.plugin.attractors` array.\r\n   * @namespace MatterAttractors.Attractors\r\n   * @property {number} gravityConstant The gravitational constant used by the gravity attractor.\r\n   */\r\n  Attractors: {\r\n    gravityConstant: 0.001,\r\n\r\n    /**\r\n     * An attractor function that applies Newton's law of gravitation.\r\n     * Use this by pushing `MatterAttractors.Attractors.gravity` to your body's `body.plugin.attractors` array.\r\n     * The gravitational constant defaults to `0.001` which you can change\r\n     * at `MatterAttractors.Attractors.gravityConstant`.\r\n     * @function MatterAttractors.Attractors.gravity\r\n     * @param {Matter.Body} bodyA The first body.\r\n     * @param {Matter.Body} bodyB The second body.\r\n     * @returns {void} No return value.\r\n     */\r\n    gravity: function(bodyA, bodyB) {\r\n      // use Newton's law of gravitation\r\n      var bToA = Matter.Vector.sub(bodyB.position, bodyA.position),\r\n        distanceSq = Matter.Vector.magnitudeSquared(bToA) || 0.0001,\r\n        normal = Matter.Vector.normalise(bToA),\r\n        magnitude = -MatterAttractors.Attractors.gravityConstant * (bodyA.mass * bodyB.mass / distanceSq),\r\n        force = Matter.Vector.mult(normal, magnitude);\r\n\r\n      // to apply forces to both bodies\r\n      Matter.Body.applyForce(bodyA, bodyA.position, Matter.Vector.neg(force));\r\n      Matter.Body.applyForce(bodyB, bodyB.position, force);\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = MatterAttractors;\r\n\r\n/**\r\n * @namespace Matter.Body\r\n * @see http://brm.io/matter-js/docs/classes/Body.html\r\n */\r\n\r\n/**\r\n * This plugin adds a new property `body.plugin.attractors` to instances of `Matter.Body`.\r\n * This is an array of callback functions that will be called automatically\r\n * for every pair of bodies, on every engine update.\r\n * @property {Function[]} body.plugin.attractors\r\n * @memberof Matter.Body\r\n */\r\n\r\n/**\r\n * An attractor function calculates the force to be applied\r\n * to `bodyB`, it should either:\r\n * - return the force vector to be applied to `bodyB`\r\n * - or apply the force to the body(s) itself\r\n * @callback AttractorFunction\r\n * @param {Matter.Body} bodyA\r\n * @param {Matter.Body} bodyB\r\n * @returns {(Vector|undefined)} a force vector (optional)\r\n */\r\n"},"sourceMaps":null,"error":null,"hash":"8bfe6690d23962ddfd0c91735fcd9eb4","cacheData":{"env":{}}}