{"id":"../../node_modules/phaser/src/loader/filetypes/HTML5AudioFile.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\HTML5AudioFile.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../events","loc":{"line":8,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\HTML5AudioFile.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\events\\index.js"},{"name":"../File","loc":{"line":9,"column":19},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\HTML5AudioFile.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\File.js"},{"name":"../../utils/object/GetFastValue","loc":{"line":10,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\HTML5AudioFile.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetFastValue.js"},{"name":"../GetURL","loc":{"line":11,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\HTML5AudioFile.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\GetURL.js"},{"name":"../../utils/object/IsPlainObject","loc":{"line":12,"column":28},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\HTML5AudioFile.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\IsPlainObject.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Events = require('../events');\r\nvar File = require('../File');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar GetURL = require('../GetURL');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @classdesc\r\n * A single Audio File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#audio method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audio.\r\n *\r\n * @class HTML5AudioFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.AudioFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [urlConfig] - The absolute or relative URL to load this file from.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar HTML5AudioFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function HTML5AudioFile (loader, key, urlConfig, audioConfig)\r\n    {\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            audioConfig = GetFastValue(config, 'config', audioConfig);\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'audio',\r\n            cache: loader.cacheManager.audio,\r\n            extension: urlConfig.type,\r\n            key: key,\r\n            url: urlConfig.url,\r\n            config: audioConfig\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n\r\n        //  New properties specific to this class\r\n        this.locked = 'ontouchstart' in window;\r\n        this.loaded = false;\r\n        this.filesLoaded = 0;\r\n        this.filesTotal = 0;\r\n    },\r\n\r\n    /**\r\n     * Called when the file finishes loading.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTML5AudioFile#onLoad\r\n     * @since 3.0.0\r\n     */\r\n    onLoad: function ()\r\n    {\r\n        if (this.loaded)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.loaded = true;\r\n\r\n        this.loader.nextFile(this, true);\r\n    },\r\n\r\n    /**\r\n     * Called if the file errors while loading.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTML5AudioFile#onError\r\n     * @since 3.0.0\r\n     */\r\n    onError: function ()\r\n    {\r\n        for (var i = 0; i < this.data.length; i++)\r\n        {\r\n            var audio = this.data[i];\r\n\r\n            audio.oncanplaythrough = null;\r\n            audio.onerror = null;\r\n        }\r\n\r\n        this.loader.nextFile(this, false);\r\n    },\r\n\r\n    /**\r\n     * Called during the file load progress. Is sent a DOM ProgressEvent.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTML5AudioFile#onProgress\r\n     * @fires Phaser.Loader.Events#FILE_PROGRESS\r\n     * @since 3.0.0\r\n     */\r\n    onProgress: function (event)\r\n    {\r\n        var audio = event.target;\r\n\r\n        audio.oncanplaythrough = null;\r\n        audio.onerror = null;\r\n\r\n        this.filesLoaded++;\r\n\r\n        this.percentComplete = Math.min((this.filesLoaded / this.filesTotal), 1);\r\n\r\n        this.loader.emit(Events.FILE_PROGRESS, this, this.percentComplete);\r\n\r\n        if (this.filesLoaded === this.filesTotal)\r\n        {\r\n            this.onLoad();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by the Loader, starts the actual file downloading.\r\n     * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\r\n     * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTML5AudioFile#load\r\n     * @since 3.0.0\r\n     */\r\n    load: function ()\r\n    {\r\n        this.data = [];\r\n\r\n        var instances = (this.config && this.config.instances) || 1;\r\n\r\n        this.filesTotal = instances;\r\n        this.filesLoaded = 0;\r\n        this.percentComplete = 0;\r\n\r\n        for (var i = 0; i < instances; i++)\r\n        {\r\n            var audio = new Audio();\r\n            audio.dataset = {};\r\n            audio.dataset.name = this.key + ('0' + i).slice(-2);\r\n            audio.dataset.used = 'false';\r\n\r\n            if (this.locked)\r\n            {\r\n                audio.dataset.locked = 'true';\r\n            }\r\n            else\r\n            {\r\n                audio.dataset.locked = 'false';\r\n\r\n                audio.preload = 'auto';\r\n                audio.oncanplaythrough = this.onProgress.bind(this);\r\n                audio.onerror = this.onError.bind(this);\r\n            }\r\n\r\n            this.data.push(audio);\r\n        }\r\n\r\n        for (i = 0; i < this.data.length; i++)\r\n        {\r\n            audio = this.data[i];\r\n            audio.src = GetURL(this, this.loader.baseURL);\r\n\r\n            if (!this.locked)\r\n            {\r\n                audio.load();\r\n            }\r\n        }\r\n\r\n        if (this.locked)\r\n        {\r\n            //  This is super-dangerous but works. Race condition potential high.\r\n            //  Is there another way?\r\n            setTimeout(this.onLoad.bind(this));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = HTML5AudioFile;\r\n"},"sourceMaps":null,"error":null,"hash":"ed2726d1a254d874e38959e757c159cb","cacheData":{"env":{}}}