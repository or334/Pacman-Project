{"id":"../../node_modules/phaser/src/tweens/tween/TweenData.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns a TweenDataConfig object that describes the tween data for a unique property of a unique target. A single Tween consists of multiple TweenDatas, depending on how many properties are being changed by the Tween.\r\n *\r\n * This is an internal function used by the TweenBuilder and should not be accessed directly, instead, Tweens should be created using the GameObjectFactory or GameObjectCreator.\r\n *\r\n * @function Phaser.Tweens.TweenData\r\n * @since 3.0.0\r\n *\r\n * @param {object} target - The target to tween.\r\n * @param {string} key - The property of the target to tween.\r\n * @param {function} getEnd - What the property will be at the END of the Tween.\r\n * @param {function} getStart - What the property will be at the START of the Tween.\r\n * @param {function} ease - The ease function this tween uses.\r\n * @param {number} delay - Time in ms/frames before tween will start.\r\n * @param {number} duration - Duration of the tween in ms/frames.\r\n * @param {boolean} yoyo - Determines whether the tween should return back to its start value after hold has expired.\r\n * @param {number} hold - Time in ms/frames the tween will pause before repeating or returning to its starting value if yoyo is set to true.\r\n * @param {number} repeat - Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.\r\n * @param {number} repeatDelay - Time in ms/frames before the repeat will start.\r\n * @param {boolean} flipX - Should toggleFlipX be called when yoyo or repeat happens?\r\n * @param {boolean} flipY - Should toggleFlipY be called when yoyo or repeat happens?\r\n *\r\n * @return {Phaser.Types.Tweens.TweenDataConfig} The config object describing this TweenData.\r\n */\r\nvar TweenData = function (target, key, getEnd, getStart, ease, delay, duration, yoyo, hold, repeat, repeatDelay, flipX, flipY)\r\n{\r\n    return {\r\n\r\n        //  The target to tween\r\n        target: target,\r\n\r\n        //  The property of the target to tween\r\n        key: key,\r\n\r\n        //  The returned value sets what the property will be at the END of the Tween.\r\n        getEndValue: getEnd,\r\n\r\n        //  The returned value sets what the property will be at the START of the Tween.\r\n        getStartValue: getStart,\r\n\r\n        //  The ease function this tween uses.\r\n        ease: ease,\r\n\r\n        //  Duration of the tween in ms/frames, excludes time for yoyo or repeats.\r\n        duration: 0,\r\n\r\n        //  The total calculated duration of this TweenData (based on duration, repeat, delay and yoyo)\r\n        totalDuration: 0,\r\n\r\n        //  Time in ms/frames before tween will start.\r\n        delay: 0,\r\n\r\n        //  Cause the tween to return back to its start value after hold has expired.\r\n        yoyo: yoyo,\r\n\r\n        //  Time in ms/frames the tween will pause before running the yoyo or starting a repeat.\r\n        hold: 0,\r\n\r\n        //  Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.\r\n        repeat: 0,\r\n\r\n        //  Time in ms/frames before the repeat will start.\r\n        repeatDelay: 0,\r\n\r\n        //  Automatically call toggleFlipX when the TweenData yoyos or repeats\r\n        flipX: flipX,\r\n\r\n        //  Automatically call toggleFlipY when the TweenData yoyos or repeats\r\n        flipY: flipY,\r\n\r\n        //  Between 0 and 1 showing completion of this TweenData.\r\n        progress: 0,\r\n\r\n        //  Delta counter.\r\n        elapsed: 0,\r\n\r\n        //  How many repeats are left to run?\r\n        repeatCounter: 0,\r\n\r\n        //  Ease Value Data:\r\n\r\n        start: 0,\r\n        current: 0,\r\n        end: 0,\r\n\r\n        //  Time Durations\r\n        t1: 0,\r\n        t2: 0,\r\n\r\n        //  LoadValue generation functions\r\n        gen: {\r\n            delay: delay,\r\n            duration: duration,\r\n            hold: hold,\r\n            repeat: repeat,\r\n            repeatDelay: repeatDelay\r\n        },\r\n\r\n        //  TWEEN_CONST.CREATED\r\n        state: 0\r\n    };\r\n};\r\n\r\nmodule.exports = TweenData;\r\n"},"sourceMaps":null,"error":null,"hash":"d031a60d1e760f1e338679ad2b079838","cacheData":{"env":{}}}