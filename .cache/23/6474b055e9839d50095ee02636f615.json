{"id":"../../node_modules/phaser/src/geom/intersects/RectangleToTriangle.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"./LineToLine","loc":{"line":7,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\intersects\\RectangleToTriangle.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\intersects\\LineToLine.js"},{"name":"../rectangle/Contains","loc":{"line":8,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\intersects\\RectangleToTriangle.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\rectangle\\Contains.js"},{"name":"../triangle/ContainsArray","loc":{"line":9,"column":28},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\intersects\\RectangleToTriangle.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\ContainsArray.js"},{"name":"../rectangle/Decompose","loc":{"line":10,"column":24},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\intersects\\RectangleToTriangle.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\rectangle\\Decompose.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar LineToLine = require('./LineToLine');\r\nvar Contains = require('../rectangle/Contains');\r\nvar ContainsArray = require('../triangle/ContainsArray');\r\nvar Decompose = require('../rectangle/Decompose');\r\n\r\n/**\r\n * Checks for intersection between Rectangle shape and Triangle shape.\r\n *\r\n * @function Phaser.Geom.Intersects.RectangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - Rectangle object to test.\r\n * @param {Phaser.Geom.Triangle} triangle - Triangle object to test.\r\n *\r\n * @return {boolean} A value of `true` if objects intersect; otherwise `false`.\r\n */\r\nvar RectangleToTriangle = function (rect, triangle)\r\n{\r\n    //  First the cheapest ones:\r\n\r\n    if (\r\n        triangle.left > rect.right ||\r\n        triangle.right < rect.left ||\r\n        triangle.top > rect.bottom ||\r\n        triangle.bottom < rect.top)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    var triA = triangle.getLineA();\r\n    var triB = triangle.getLineB();\r\n    var triC = triangle.getLineC();\r\n\r\n    //  Are any of the triangle points within the rectangle?\r\n\r\n    if (Contains(rect, triA.x1, triA.y1) || Contains(rect, triA.x2, triA.y2))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (Contains(rect, triB.x1, triB.y1) || Contains(rect, triB.x2, triB.y2))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (Contains(rect, triC.x1, triC.y1) || Contains(rect, triC.x2, triC.y2))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    //  Cheap tests over, now to see if any of the lines intersect ...\r\n\r\n    var rectA = rect.getLineA();\r\n    var rectB = rect.getLineB();\r\n    var rectC = rect.getLineC();\r\n    var rectD = rect.getLineD();\r\n\r\n    if (LineToLine(triA, rectA) || LineToLine(triA, rectB) || LineToLine(triA, rectC) || LineToLine(triA, rectD))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (LineToLine(triB, rectA) || LineToLine(triB, rectB) || LineToLine(triB, rectC) || LineToLine(triB, rectD))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (LineToLine(triC, rectA) || LineToLine(triC, rectB) || LineToLine(triC, rectC) || LineToLine(triC, rectD))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    //  None of the lines intersect, so are any rectangle points within the triangle?\r\n\r\n    var points = Decompose(rect);\r\n    var within = ContainsArray(triangle, points, true);\r\n\r\n    return (within.length > 0);\r\n};\r\n\r\nmodule.exports = RectangleToTriangle;\r\n"},"sourceMaps":null,"error":null,"hash":"5f86f8effe8b0105414869510a8dc397","cacheData":{"env":{}}}