{"id":"../../node_modules/phaser/src/geom/polygon/Polygon.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\polygon\\Polygon.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./Contains","loc":{"line":8,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\polygon\\Polygon.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\polygon\\Contains.js"},{"name":"./GetPoints","loc":{"line":9,"column":24},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\polygon\\Polygon.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\polygon\\GetPoints.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Contains = require('./Contains');\r\nvar GetPoints = require('./GetPoints');\r\n\r\n/**\r\n * @classdesc\r\n * A Polygon object\r\n *\r\n\r\n * The polygon is a closed shape consists of a series of connected straight lines defined by list of ordered points.\r\n * Several formats are supported to define the list of points, check the setTo method for details. \r\n * This is a geometry object allowing you to define and inspect the shape.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render a Polygon you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Polygon\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Point[]} [points] - List of points defining the perimeter of this Polygon. Several formats are supported: \r\n * - A string containing paired x y values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\r\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\r\n * - An array of objects with public x y properties: `[obj1, obj2, ...]`\r\n * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\r\n * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\r\n */\r\nvar Polygon = new Class({\r\n\r\n    initialize:\r\n\r\n    function Polygon (points)\r\n    {\r\n        /**\r\n         * The area of this Polygon.\r\n         *\r\n         * @name Phaser.Geom.Polygon#area\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.area = 0;\r\n\r\n        /**\r\n         * An array of number pair objects that make up this polygon. I.e. [ {x,y}, {x,y}, {x,y} ]\r\n         *\r\n         * @name Phaser.Geom.Polygon#points\r\n         * @type {Phaser.Geom.Point[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.points = [];\r\n\r\n        if (points)\r\n        {\r\n            this.setTo(points);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Check to see if the Polygon contains the given x / y coordinates.\r\n     *\r\n     * @method Phaser.Geom.Polygon#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to check within the polygon.\r\n     * @param {number} y - The y coordinate to check within the polygon.\r\n     *\r\n     * @return {boolean} `true` if the coordinates are within the polygon, otherwise `false`.\r\n     */\r\n    contains: function (x, y)\r\n    {\r\n        return Contains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * Sets this Polygon to the given points.\r\n     *\r\n     * The points can be set from a variety of formats:\r\n     *\r\n     * - A string containing paired values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\r\n     * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\r\n     * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\r\n     * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\r\n     * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\r\n     *\r\n     * `setTo` may also be called without any arguments to remove all points.\r\n     *\r\n     * @method Phaser.Geom.Polygon#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {array} points - Points defining the perimeter of this polygon. Please check function description above for the different supported formats.\r\n     *\r\n     * @return {Phaser.Geom.Polygon} This Polygon object.\r\n     */\r\n    setTo: function (points)\r\n    {\r\n        this.area = 0;\r\n        this.points = [];\r\n\r\n        if (typeof points === 'string')\r\n        {\r\n            points = points.split(' ');\r\n        }\r\n\r\n        if (!Array.isArray(points))\r\n        {\r\n            return this;\r\n        }\r\n\r\n        var p;\r\n        var y0 = Number.MAX_VALUE;\r\n\r\n        //  The points argument is an array, so iterate through it\r\n        for (var i = 0; i < points.length; i++)\r\n        {\r\n            p = { x: 0, y: 0 };\r\n\r\n            if (typeof points[i] === 'number' || typeof points[i] === 'string')\r\n            {\r\n                p.x = parseFloat(points[i]);\r\n                p.y = parseFloat(points[i + 1]);\r\n                i++;\r\n            }\r\n            else if (Array.isArray(points[i]))\r\n            {\r\n                //  An array of arrays?\r\n                p.x = points[i][0];\r\n                p.y = points[i][1];\r\n            }\r\n            else\r\n            {\r\n                p.x = points[i].x;\r\n                p.y = points[i].y;\r\n            }\r\n\r\n            this.points.push(p);\r\n\r\n            //  Lowest boundary\r\n            if (p.y < y0)\r\n            {\r\n                y0 = p.y;\r\n            }\r\n        }\r\n\r\n        this.calculateArea(y0);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates the area of the Polygon. This is available in the property Polygon.area\r\n     *\r\n     * @method Phaser.Geom.Polygon#calculateArea\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The area of the polygon.\r\n     */\r\n    calculateArea: function ()\r\n    {\r\n        if (this.points.length < 3)\r\n        {\r\n            this.area = 0;\r\n\r\n            return this.area;\r\n        }\r\n\r\n        var sum = 0;\r\n        var p1;\r\n        var p2;\r\n\r\n        for (var i = 0; i < this.points.length - 1; i++)\r\n        {\r\n            p1 = this.points[i];\r\n            p2 = this.points[i + 1];\r\n\r\n            sum += (p2.x - p1.x) * (p1.y + p2.y);\r\n        }\r\n\r\n        p1 = this.points[0];\r\n        p2 = this.points[this.points.length - 1];\r\n\r\n        sum += (p1.x - p2.x) * (p2.y + p1.y);\r\n\r\n        this.area = -sum * 0.5;\r\n\r\n        return this.area;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of Point objects containing the coordinates of the points around the perimeter of the Polygon,\r\n     * based on the given quantity or stepRate values.\r\n     *\r\n     * @method Phaser.Geom.Polygon#getPoints\r\n     * @since 3.12.0\r\n     *\r\n     * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n     * @param {number} [stepRate] - Sets the quantity by getting the perimeter of the Polygon and dividing it by the stepRate.\r\n     * @param {array} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n     *\r\n     * @return {Phaser.Geom.Point[]} An array of Point objects pertaining to the points around the perimeter of the Polygon.\r\n     */\r\n    getPoints: function (quantity, step, output)\r\n    {\r\n        return GetPoints(this, quantity, step, output);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Polygon;\r\n"},"sourceMaps":null,"error":null,"hash":"ae88f937d6f5c2bd9bed42b22b542746","cacheData":{"env":{}}}