{"id":"../../node_modules/phaser/src/renderer/webgl/pipelines/ForwardDiffuseLightPipeline.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../../utils/Class","loc":{"line":8,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\webgl\\pipelines\\ForwardDiffuseLightPipeline.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../shaders/ForwardDiffuse-frag.js","loc":{"line":9,"column":29},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\webgl\\pipelines\\ForwardDiffuseLightPipeline.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\webgl\\shaders\\ForwardDiffuse-frag.js"},{"name":"./TextureTintPipeline","loc":{"line":10,"column":34},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\webgl\\pipelines\\ForwardDiffuseLightPipeline.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\webgl\\pipelines\\TextureTintPipeline.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\nvar ShaderSourceFS = require('../shaders/ForwardDiffuse-frag.js');\r\nvar TextureTintPipeline = require('./TextureTintPipeline');\r\n\r\nvar LIGHT_COUNT = 10;\r\n\r\n/**\r\n * @classdesc\r\n * ForwardDiffuseLightPipeline implements a forward rendering approach for 2D lights.\r\n * This pipeline extends TextureTintPipeline so it implements all it's rendering functions\r\n * and batching system.\r\n *\r\n * @class ForwardDiffuseLightPipeline\r\n * @extends Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline\r\n * @memberof Phaser.Renderer.WebGL.Pipelines\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {object} config - The configuration of the pipeline, same as the {@link Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline}. The fragment shader will be replaced with the lighting shader.\r\n */\r\nvar ForwardDiffuseLightPipeline = new Class({\r\n\r\n    Extends: TextureTintPipeline,\r\n\r\n    initialize:\r\n\r\n    function ForwardDiffuseLightPipeline (config)\r\n    {\r\n        LIGHT_COUNT = config.maxLights;\r\n\r\n        config.fragShader = ShaderSourceFS.replace('%LIGHT_COUNT%', LIGHT_COUNT.toString());\r\n\r\n        TextureTintPipeline.call(this, config);\r\n\r\n        /**\r\n         * Default normal map texture to use.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.Pipelines.ForwardDiffuseLightPipeline#defaultNormalMap\r\n         * @type {Phaser.Texture.Frame}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this.defaultNormalMap;\r\n\r\n        /**\r\n         * Inverse rotation matrix for normal map rotations.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.Pipelines.ForwardDiffuseLightPipeline#inverseRotationMatrix\r\n         * @type {Float32Array}\r\n         * @private\r\n         * @since 3.16.0\r\n         */\r\n        this.inverseRotationMatrix = new Float32Array([\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            0, 0, 1\r\n        ]);\r\n    },\r\n\r\n    /**\r\n     * Called when the Game has fully booted and the Renderer has finished setting up.\r\n     * \r\n     * By this stage all Game level systems are now in place and you can perform any final\r\n     * tasks that the pipeline may need that relied on game systems such as the Texture Manager.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.Pipelines.ForwardDiffuseLightPipeline#boot\r\n     * @override\r\n     * @since 3.11.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.defaultNormalMap = this.game.textures.getFrame('__DEFAULT');\r\n    },\r\n\r\n    /**\r\n     * This function binds its base class resources and this lights 2D resources.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.Pipelines.ForwardDiffuseLightPipeline#onBind\r\n     * @override\r\n     * @since 3.0.0\r\n     * \r\n     * @param {Phaser.GameObjects.GameObject} [gameObject] - The Game Object that invoked this pipeline, if any.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    onBind: function (gameObject)\r\n    {\r\n        TextureTintPipeline.prototype.onBind.call(this);\r\n\r\n        var renderer = this.renderer;\r\n        var program = this.program;\r\n\r\n        this.mvpUpdate();\r\n\r\n        renderer.setInt1(program, 'uNormSampler', 1);\r\n        renderer.setFloat2(program, 'uResolution', this.width, this.height);\r\n\r\n        if (gameObject)\r\n        {\r\n            this.setNormalMap(gameObject);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * This function sets all the needed resources for each camera pass.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.Pipelines.ForwardDiffuseLightPipeline#onRender\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Scene} scene - The Scene being rendered.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Scene Camera being rendered with.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    onRender: function (scene, camera)\r\n    {\r\n        this.active = false;\r\n\r\n        var lightManager = scene.sys.lights;\r\n\r\n        if (!lightManager || lightManager.lights.length <= 0 || !lightManager.active)\r\n        {\r\n            //  Passthru\r\n            return this;\r\n        }\r\n\r\n        var lights = lightManager.cull(camera);\r\n        var lightCount = Math.min(lights.length, LIGHT_COUNT);\r\n\r\n        if (lightCount === 0)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        this.active = true;\r\n\r\n        var renderer = this.renderer;\r\n        var program = this.program;\r\n        var cameraMatrix = camera.matrix;\r\n        var point = {x: 0, y: 0};\r\n        var height = renderer.height;\r\n        var index;\r\n\r\n        for (index = 0; index < LIGHT_COUNT; ++index)\r\n        {\r\n            //  Reset lights\r\n            renderer.setFloat1(program, 'uLights[' + index + '].radius', 0);\r\n        }\r\n\r\n        renderer.setFloat4(program, 'uCamera', camera.x, camera.y, camera.rotation, camera.zoom);\r\n        renderer.setFloat3(program, 'uAmbientLightColor', lightManager.ambientColor.r, lightManager.ambientColor.g, lightManager.ambientColor.b);\r\n\r\n        for (index = 0; index < lightCount; ++index)\r\n        {\r\n            var light = lights[index];\r\n            var lightName = 'uLights[' + index + '].';\r\n\r\n            cameraMatrix.transformPoint(light.x, light.y, point);\r\n\r\n            renderer.setFloat2(program, lightName + 'position', point.x - (camera.scrollX * light.scrollFactorX * camera.zoom), height - (point.y - (camera.scrollY * light.scrollFactorY) * camera.zoom));\r\n            renderer.setFloat3(program, lightName + 'color', light.r, light.g, light.b);\r\n            renderer.setFloat1(program, lightName + 'intensity', light.intensity);\r\n            renderer.setFloat1(program, lightName + 'radius', light.radius);\r\n        }\r\n        \r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Generic function for batching a textured quad\r\n     *\r\n     * @method Phaser.Renderer.WebGL.Pipelines.ForwardDiffuseLightPipeline#batchTexture\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - Source GameObject\r\n     * @param {WebGLTexture} texture - Raw WebGLTexture associated with the quad\r\n     * @param {integer} textureWidth - Real texture width\r\n     * @param {integer} textureHeight - Real texture height\r\n     * @param {number} srcX - X coordinate of the quad\r\n     * @param {number} srcY - Y coordinate of the quad\r\n     * @param {number} srcWidth - Width of the quad\r\n     * @param {number} srcHeight - Height of the quad\r\n     * @param {number} scaleX - X component of scale\r\n     * @param {number} scaleY - Y component of scale\r\n     * @param {number} rotation - Rotation of the quad\r\n     * @param {boolean} flipX - Indicates if the quad is horizontally flipped\r\n     * @param {boolean} flipY - Indicates if the quad is vertically flipped\r\n     * @param {number} scrollFactorX - By which factor is the quad affected by the camera horizontal scroll\r\n     * @param {number} scrollFactorY - By which factor is the quad effected by the camera vertical scroll\r\n     * @param {number} displayOriginX - Horizontal origin in pixels\r\n     * @param {number} displayOriginY - Vertical origin in pixels\r\n     * @param {number} frameX - X coordinate of the texture frame\r\n     * @param {number} frameY - Y coordinate of the texture frame\r\n     * @param {number} frameWidth - Width of the texture frame\r\n     * @param {number} frameHeight - Height of the texture frame\r\n     * @param {integer} tintTL - Tint for top left\r\n     * @param {integer} tintTR - Tint for top right\r\n     * @param {integer} tintBL - Tint for bottom left\r\n     * @param {integer} tintBR - Tint for bottom right\r\n     * @param {number} tintEffect - The tint effect (0 for additive, 1 for replacement)\r\n     * @param {number} uOffset - Horizontal offset on texture coordinate\r\n     * @param {number} vOffset - Vertical offset on texture coordinate\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - Current used camera\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} parentTransformMatrix - Parent container\r\n     */\r\n    batchTexture: function (\r\n        gameObject,\r\n        texture,\r\n        textureWidth, textureHeight,\r\n        srcX, srcY,\r\n        srcWidth, srcHeight,\r\n        scaleX, scaleY,\r\n        rotation,\r\n        flipX, flipY,\r\n        scrollFactorX, scrollFactorY,\r\n        displayOriginX, displayOriginY,\r\n        frameX, frameY, frameWidth, frameHeight,\r\n        tintTL, tintTR, tintBL, tintBR, tintEffect,\r\n        uOffset, vOffset,\r\n        camera,\r\n        parentTransformMatrix)\r\n    {\r\n        if (!this.active)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.renderer.setPipeline(this);\r\n\r\n        var normalTexture;\r\n\r\n        if (gameObject.displayTexture)\r\n        {\r\n            normalTexture = gameObject.displayTexture.dataSource[gameObject.displayFrame.sourceIndex];\r\n        }\r\n        else if (gameObject.texture)\r\n        {\r\n            normalTexture = gameObject.texture.dataSource[gameObject.frame.sourceIndex];\r\n        }\r\n        else if (gameObject.tileset)\r\n        {\r\n            normalTexture = gameObject.tileset.image.dataSource[0];\r\n        }\r\n\r\n        if (!normalTexture)\r\n        {\r\n            console.warn('Normal map missing or invalid');\r\n            return;\r\n        }\r\n\r\n        this.setTexture2D(normalTexture.glTexture, 1);\r\n        this.setNormalMapRotation(rotation);\r\n\r\n        var camMatrix = this._tempMatrix1;\r\n        var spriteMatrix = this._tempMatrix2;\r\n        var calcMatrix = this._tempMatrix3;\r\n\r\n        var u0 = (frameX / textureWidth) + uOffset;\r\n        var v0 = (frameY / textureHeight) + vOffset;\r\n        var u1 = (frameX + frameWidth) / textureWidth + uOffset;\r\n        var v1 = (frameY + frameHeight) / textureHeight + vOffset;\r\n\r\n        var width = srcWidth;\r\n        var height = srcHeight;\r\n\r\n        // var x = -displayOriginX + frameX;\r\n        // var y = -displayOriginY + frameY;\r\n\r\n        var x = -displayOriginX;\r\n        var y = -displayOriginY;\r\n\r\n        if (gameObject.isCropped)\r\n        {\r\n            var crop = gameObject._crop;\r\n\r\n            width = crop.width;\r\n            height = crop.height;\r\n\r\n            srcWidth = crop.width;\r\n            srcHeight = crop.height;\r\n\r\n            frameX = crop.x;\r\n            frameY = crop.y;\r\n\r\n            var ox = frameX;\r\n            var oy = frameY;\r\n\r\n            if (flipX)\r\n            {\r\n                ox = (frameWidth - crop.x - crop.width);\r\n            }\r\n    \r\n            if (flipY && !texture.isRenderTexture)\r\n            {\r\n                oy = (frameHeight - crop.y - crop.height);\r\n            }\r\n\r\n            u0 = (ox / textureWidth) + uOffset;\r\n            v0 = (oy / textureHeight) + vOffset;\r\n            u1 = (ox + crop.width) / textureWidth + uOffset;\r\n            v1 = (oy + crop.height) / textureHeight + vOffset;\r\n\r\n            x = -displayOriginX + frameX;\r\n            y = -displayOriginY + frameY;\r\n        }\r\n\r\n        //  Invert the flipY if this is a RenderTexture\r\n        flipY = flipY ^ (texture.isRenderTexture ? 1 : 0);\r\n\r\n        if (flipX)\r\n        {\r\n            width *= -1;\r\n            x += srcWidth;\r\n        }\r\n\r\n        if (flipY)\r\n        {\r\n            height *= -1;\r\n            y += srcHeight;\r\n        }\r\n\r\n        //  Do we need this? (doubt it)\r\n        // if (camera.roundPixels)\r\n        // {\r\n        //     x |= 0;\r\n        //     y |= 0;\r\n        // }\r\n\r\n        var xw = x + width;\r\n        var yh = y + height;\r\n\r\n        spriteMatrix.applyITRS(srcX, srcY, rotation, scaleX, scaleY);\r\n\r\n        camMatrix.copyFrom(camera.matrix);\r\n\r\n        if (parentTransformMatrix)\r\n        {\r\n            //  Multiply the camera by the parent matrix\r\n            camMatrix.multiplyWithOffset(parentTransformMatrix, -camera.scrollX * scrollFactorX, -camera.scrollY * scrollFactorY);\r\n\r\n            //  Undo the camera scroll\r\n            spriteMatrix.e = srcX;\r\n            spriteMatrix.f = srcY;\r\n\r\n            //  Multiply by the Sprite matrix, store result in calcMatrix\r\n            camMatrix.multiply(spriteMatrix, calcMatrix);\r\n        }\r\n        else\r\n        {\r\n            spriteMatrix.e -= camera.scrollX * scrollFactorX;\r\n            spriteMatrix.f -= camera.scrollY * scrollFactorY;\r\n    \r\n            //  Multiply by the Sprite matrix, store result in calcMatrix\r\n            camMatrix.multiply(spriteMatrix, calcMatrix);\r\n        }\r\n\r\n        var tx0 = calcMatrix.getX(x, y);\r\n        var ty0 = calcMatrix.getY(x, y);\r\n\r\n        var tx1 = calcMatrix.getX(x, yh);\r\n        var ty1 = calcMatrix.getY(x, yh);\r\n\r\n        var tx2 = calcMatrix.getX(xw, yh);\r\n        var ty2 = calcMatrix.getY(xw, yh);\r\n\r\n        var tx3 = calcMatrix.getX(xw, y);\r\n        var ty3 = calcMatrix.getY(xw, y);\r\n\r\n        if (camera.roundPixels)\r\n        {\r\n            tx0 = Math.round(tx0);\r\n            ty0 = Math.round(ty0);\r\n\r\n            tx1 = Math.round(tx1);\r\n            ty1 = Math.round(ty1);\r\n\r\n            tx2 = Math.round(tx2);\r\n            ty2 = Math.round(ty2);\r\n\r\n            tx3 = Math.round(tx3);\r\n            ty3 = Math.round(ty3);\r\n        }\r\n\r\n        this.setTexture2D(texture, 0);\r\n\r\n        this.batchQuad(tx0, ty0, tx1, ty1, tx2, ty2, tx3, ty3, u0, v0, u1, v1, tintTL, tintTR, tintBL, tintBR, tintEffect, texture, 0);\r\n    },\r\n\r\n    /**\r\n     * Sets the Game Objects normal map as the active texture.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.Pipelines.ForwardDiffuseLightPipeline#setNormalMap\r\n     * @since 3.11.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to update.\r\n     */\r\n    setNormalMap: function (gameObject)\r\n    {\r\n        if (!this.active || !gameObject)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var normalTexture;\r\n\r\n        if (gameObject.texture)\r\n        {\r\n            normalTexture = gameObject.texture.dataSource[gameObject.frame.sourceIndex];\r\n        }\r\n\r\n        if (!normalTexture)\r\n        {\r\n            normalTexture = this.defaultNormalMap;\r\n        }\r\n\r\n        this.setTexture2D(normalTexture.glTexture, 1);\r\n\r\n        this.renderer.setPipeline(gameObject.defaultPipeline);\r\n    },\r\n\r\n    /**\r\n     * Rotates the normal map vectors inversely by the given angle.\r\n     * Only works in 2D space.\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ForwardDiffuseLightPipeline#setNormalMapRotation\r\n     * @since 3.16.0\r\n     * \r\n     * @param {number} rotation - The angle of rotation in radians.\r\n     */\r\n    setNormalMapRotation: function (rotation)\r\n    {\r\n        var inverseRotationMatrix = this.inverseRotationMatrix;\r\n\r\n        if (rotation)\r\n        {\r\n            var rot = -rotation;\r\n            var c = Math.cos(rot);\r\n            var s = Math.sin(rot);\r\n\r\n            inverseRotationMatrix[1] = s;\r\n            inverseRotationMatrix[3] = -s;\r\n            inverseRotationMatrix[0] = inverseRotationMatrix[4] = c;\r\n        }\r\n        else\r\n        {\r\n            inverseRotationMatrix[0] = inverseRotationMatrix[4] = 1;\r\n            inverseRotationMatrix[1] = inverseRotationMatrix[3] = 0;\r\n        }\r\n\r\n        this.renderer.setMatrix3(this.program, 'uInverseRotationMatrix', false, inverseRotationMatrix);\r\n    },\r\n\r\n    /**\r\n     * Takes a Sprite Game Object, or any object that extends it, which has a normal texture and adds it to the batch.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.Pipelines.ForwardDiffuseLightPipeline#batchSprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Sprite} sprite - The texture-based Game Object to add to the batch.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to use for the rendering transform.\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} parentTransformMatrix - The transform matrix of the parent container, if set.\r\n     */\r\n    batchSprite: function (sprite, camera, parentTransformMatrix)\r\n    {\r\n        if (!this.active)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var normalTexture = sprite.texture.dataSource[sprite.frame.sourceIndex];\r\n\r\n        if (normalTexture)\r\n        {\r\n            this.renderer.setPipeline(this);\r\n\r\n            this.setTexture2D(normalTexture.glTexture, 1);\r\n            this.setNormalMapRotation(sprite.rotation);\r\n\r\n            TextureTintPipeline.prototype.batchSprite.call(this, sprite, camera, parentTransformMatrix);\r\n        }\r\n    }\r\n\r\n});\r\n\r\nForwardDiffuseLightPipeline.LIGHT_COUNT = LIGHT_COUNT;\r\n\r\nmodule.exports = ForwardDiffuseLightPipeline;\r\n"},"sourceMaps":null,"error":null,"hash":"c7d76903f4cf40544bda24031416dcbb","cacheData":{"env":{}}}