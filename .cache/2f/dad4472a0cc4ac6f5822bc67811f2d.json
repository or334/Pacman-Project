{"id":"../../node_modules/phaser/src/physics/impact/Factory.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\Factory.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./ImpactBody","loc":{"line":8,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\Factory.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\ImpactBody.js"},{"name":"./ImpactImage","loc":{"line":9,"column":26},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\Factory.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\ImpactImage.js"},{"name":"./ImpactSprite","loc":{"line":10,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\Factory.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\ImpactSprite.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar ImpactBody = require('./ImpactBody');\r\nvar ImpactImage = require('./ImpactImage');\r\nvar ImpactSprite = require('./ImpactSprite');\r\n\r\n/**\r\n * @classdesc\r\n * The Impact Physics Factory allows you to easily create Impact Physics enabled Game Objects.\r\n * Objects that are created by this Factory are automatically added to the physics world.\r\n *\r\n * @class Factory\r\n * @memberof Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - A reference to the Impact Physics world.\r\n */\r\nvar Factory = new Class({\r\n\r\n    initialize:\r\n\r\n    function Factory (world)\r\n    {\r\n        /**\r\n         * A reference to the Impact Physics world.\r\n         *\r\n         * @name Phaser.Physics.Impact.Factory#world\r\n         * @type {Phaser.Physics.Impact.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * A reference to the Scene.Systems this Impact Physics instance belongs to.\r\n         *\r\n         * @name Phaser.Physics.Impact.Factory#sys\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.sys = world.scene.sys;\r\n    },\r\n\r\n    /**\r\n     * Creates a new ImpactBody object and adds it to the physics simulation.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#body\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of the body in the physics world.\r\n     * @param {number} y - The vertical position of the body in the physics world.\r\n     * @param {number} width - The width of the body.\r\n     * @param {number} height - The height of the body.\r\n     *\r\n     * @return {Phaser.Physics.Impact.ImpactBody} The ImpactBody object that was created.\r\n     */\r\n    body: function (x, y, width, height)\r\n    {\r\n        return new ImpactBody(this.world, x, y, width, height);\r\n    },\r\n\r\n    /**\r\n     * Adds an Impact Physics Body to the given Game Object.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#existing\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to receive the physics body.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object.\r\n     */\r\n    existing: function (gameObject)\r\n    {\r\n        var x = gameObject.x - gameObject.frame.centerX;\r\n        var y = gameObject.y - gameObject.frame.centerY;\r\n        var w = gameObject.width;\r\n        var h = gameObject.height;\r\n\r\n        gameObject.body = this.world.create(x, y, w, h);\r\n\r\n        gameObject.body.parent = gameObject;\r\n        gameObject.body.gameObject = gameObject;\r\n\r\n        return gameObject;\r\n    },\r\n\r\n    /**\r\n     * Creates a new ImpactImage object and adds it to the physics world.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#image\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Impact.ImpactImage} The ImpactImage object that was created.\r\n     */\r\n    image: function (x, y, key, frame)\r\n    {\r\n        var image = new ImpactImage(this.world, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(image);\r\n\r\n        return image;\r\n    },\r\n\r\n    /**\r\n     * Creates a new ImpactSprite object and adds it to the physics world.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#sprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Impact.ImpactSprite} The ImpactSprite object that was created.\r\n     */\r\n    sprite: function (x, y, key, frame)\r\n    {\r\n        var sprite = new ImpactSprite(this.world, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(sprite);\r\n        this.sys.updateList.add(sprite);\r\n\r\n        return sprite;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Factory.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.world = null;\r\n        this.sys = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Factory;\r\n"},"sourceMaps":null,"error":null,"hash":"d3a9d6db54d008e524544175080e31e7","cacheData":{"env":{}}}