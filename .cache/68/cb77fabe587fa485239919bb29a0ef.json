{"id":"../../node_modules/phaser/src/scene/Settings.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"./const","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\Settings.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\const.js"},{"name":"../utils/object/GetValue","loc":{"line":8,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\Settings.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetValue.js"},{"name":"../utils/object/Merge","loc":{"line":9,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\Settings.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\Merge.js"},{"name":"./InjectionMap","loc":{"line":10,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\Settings.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\InjectionMap.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CONST = require('./const');\r\nvar GetValue = require('../utils/object/GetValue');\r\nvar Merge = require('../utils/object/Merge');\r\nvar InjectionMap = require('./InjectionMap');\r\n\r\n/**\r\n * @namespace Phaser.Scenes.Settings\r\n */\r\n\r\nvar Settings = {\r\n\r\n    /**\r\n     * Takes a Scene configuration object and returns a fully formed System Settings object.\r\n     *\r\n     * @function Phaser.Scenes.Settings.create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Types.Scenes.SettingsConfig)} config - The Scene configuration object used to create this Scene Settings.\r\n     *\r\n     * @return {Phaser.Types.Scenes.SettingsObject} The Scene Settings object created as a result of the config and default settings.\r\n     */\r\n    create: function (config)\r\n    {\r\n        if (typeof config === 'string')\r\n        {\r\n            config = { key: config };\r\n        }\r\n        else if (config === undefined)\r\n        {\r\n            //  Pass the 'hasOwnProperty' checks\r\n            config = {};\r\n        }\r\n\r\n        return {\r\n\r\n            status: CONST.PENDING,\r\n\r\n            key: GetValue(config, 'key', ''),\r\n            active: GetValue(config, 'active', false),\r\n            visible: GetValue(config, 'visible', true),\r\n\r\n            isBooted: false,\r\n\r\n            isTransition: false,\r\n            transitionFrom: null,\r\n            transitionDuration: 0,\r\n            transitionAllowInput: true,\r\n\r\n            //  Loader payload array\r\n\r\n            data: {},\r\n\r\n            pack: GetValue(config, 'pack', false),\r\n\r\n            //  Cameras\r\n\r\n            cameras: GetValue(config, 'cameras', null),\r\n\r\n            //  Scene Property Injection Map\r\n\r\n            map: GetValue(config, 'map', Merge(InjectionMap, GetValue(config, 'mapAdd', {}))),\r\n\r\n            //  Physics\r\n\r\n            physics: GetValue(config, 'physics', {}),\r\n\r\n            //  Loader\r\n\r\n            loader: GetValue(config, 'loader', {}),\r\n\r\n            //  Plugins\r\n\r\n            plugins: GetValue(config, 'plugins', false),\r\n\r\n            //  Input\r\n\r\n            input: GetValue(config, 'input', {})\r\n\r\n        };\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Settings;\r\n"},"sourceMaps":null,"error":null,"hash":"a7bf2a8a913d28bda8d088dadbec4fed","cacheData":{"env":{}}}