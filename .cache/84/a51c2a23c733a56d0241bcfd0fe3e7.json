{"id":"../../node_modules/phaser/src/utils/array/StableSort.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//! stable.js 0.1.6, https://github.com/Two-Screen/stable\r\n//! © 2017 Angry Bytes and contributors. MIT licensed.\r\n\r\n/**\r\n * @namespace Phaser.Utils.Array.StableSortFunctions\r\n */\r\n\r\n(function() {\r\n\r\n /**\r\n * A stable array sort, because `Array#sort()` is not guaranteed stable.\r\n * This is an implementation of merge sort, without recursion.\r\n *\r\n * @function Phaser.Utils.Array.StableSort\r\n * @since 3.0.0\r\n *\r\n * @param {array} arr - The input array to be sorted.\r\n * @param {function} comp - The comparison handler.\r\n *\r\n * @return {array} The sorted result.\r\n */\r\nvar stable = function(arr, comp) {\r\n    return exec(arr.slice(), comp);\r\n};\r\n\r\n /**\r\n * Sort the input array and simply copy it back if the result isn't in the original array, which happens on an odd number of passes.\r\n *\r\n * @function Phaser.Utils.Array.StableSortFunctions.inplace\r\n * @memberof Phaser.Utils.Array.StableSortFunctions\r\n * @since 3.0.0\r\n *\r\n * @param {array} arr - The input array.\r\n * @param {function} comp - The comparison handler.\r\n *\r\n * @return {array} The sorted array.\r\n */\r\nstable.inplace = function(arr, comp) {\r\n    var result = exec(arr, comp);\r\n\r\n    // This simply copies back if the result isn't in the original array,\r\n    // which happens on an odd number of passes.\r\n    if (result !== arr) {\r\n        pass(result, null, arr.length, arr);\r\n    }\r\n\r\n    return arr;\r\n};\r\n\r\n// Execute the sort using the input array and a second buffer as work space.\r\n// Returns one of those two, containing the final result.\r\nfunction exec(arr, comp) {\r\n    if (typeof(comp) !== 'function') {\r\n        comp = function(a, b) {\r\n            return String(a).localeCompare(b);\r\n        };\r\n    }\r\n\r\n    // Short-circuit when there's nothing to sort.\r\n    var len = arr.length;\r\n    if (len <= 1) {\r\n        return arr;\r\n    }\r\n\r\n    // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.\r\n    // Chunks are the size of the left or right hand in merge sort.\r\n    // Stop when the left-hand covers all of the array.\r\n    var buffer = new Array(len);\r\n    for (var chk = 1; chk < len; chk *= 2) {\r\n        pass(arr, comp, chk, buffer);\r\n\r\n        var tmp = arr;\r\n        arr = buffer;\r\n        buffer = tmp;\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\n// Run a single pass with the given chunk size.\r\nvar pass = function(arr, comp, chk, result) {\r\n    var len = arr.length;\r\n    var i = 0;\r\n    // Step size / double chunk size.\r\n    var dbl = chk * 2;\r\n    // Bounds of the left and right chunks.\r\n    var l, r, e;\r\n    // Iterators over the left and right chunk.\r\n    var li, ri;\r\n\r\n    // Iterate over pairs of chunks.\r\n    for (l = 0; l < len; l += dbl) {\r\n        r = l + chk;\r\n        e = r + chk;\r\n        if (r > len) r = len;\r\n        if (e > len) e = len;\r\n\r\n        // Iterate both chunks in parallel.\r\n        li = l;\r\n        ri = r;\r\n        while (true) {\r\n            // Compare the chunks.\r\n            if (li < r && ri < e) {\r\n                // This works for a regular `sort()` compatible comparator,\r\n                // but also for a simple comparator like: `a > b`\r\n                if (comp(arr[li], arr[ri]) <= 0) {\r\n                    result[i++] = arr[li++];\r\n                }\r\n                else {\r\n                    result[i++] = arr[ri++];\r\n                }\r\n            }\r\n            // Nothing to compare, just flush what's left.\r\n            else if (li < r) {\r\n                result[i++] = arr[li++];\r\n            }\r\n            else if (ri < e) {\r\n                result[i++] = arr[ri++];\r\n            }\r\n            // Both iterators are at the chunk ends.\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// Export using CommonJS or to the window.\r\nif (typeof(module) !== 'undefined') {\r\n    module.exports = stable;\r\n}\r\nelse {\r\n    window.stable = stable;\r\n}\r\n\r\n})();"},"sourceMaps":null,"error":null,"hash":"d99183b39e85431ed1ec07f24840e150","cacheData":{"env":{}}}