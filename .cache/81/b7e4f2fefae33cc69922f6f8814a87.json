{"id":"../../node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayerWebGLRenderer.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * \r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n * \r\n * A Static Tilemap Layer renders immediately and does not use any batching.\r\n *\r\n * @method Phaser.Tilemaps.StaticTilemapLayer#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.Tilemaps.StaticTilemapLayer} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n */\r\nvar StaticTilemapLayerWebGLRenderer = function (renderer, src, interpolationPercentage, camera)\r\n{\r\n    var tilesets = src.tileset;\r\n\r\n    var pipeline = src.pipeline;\r\n    var pipelineVertexBuffer = pipeline.vertexBuffer;\r\n\r\n    renderer.setPipeline(pipeline);\r\n\r\n    pipeline.modelIdentity();\r\n    pipeline.modelTranslate(src.x - (camera.scrollX * src.scrollFactorX), src.y - (camera.scrollY * src.scrollFactorY), 0);\r\n    pipeline.modelScale(src.scaleX, src.scaleY, 1);\r\n    pipeline.viewLoad2D(camera.matrix.matrix);\r\n\r\n    for (var i = 0; i < tilesets.length; i++)\r\n    {\r\n        src.upload(camera, i);\r\n\r\n        if (src.vertexCount[i] > 0)\r\n        {\r\n            if (renderer.currentPipeline && renderer.currentPipeline.vertexCount > 0)\r\n            {\r\n                renderer.flush();\r\n            }\r\n        \r\n            pipeline.vertexBuffer = src.vertexBuffer[i];\r\n        \r\n            renderer.setPipeline(pipeline);\r\n        \r\n            renderer.setTexture2D(tilesets[i].glTexture, 0);\r\n        \r\n            renderer.gl.drawArrays(pipeline.topology, 0, src.vertexCount[i]);\r\n        }\r\n    }\r\n\r\n    //  Restore the pipeline\r\n    pipeline.vertexBuffer = pipelineVertexBuffer;\r\n\r\n    pipeline.viewIdentity();\r\n    pipeline.modelIdentity();\r\n};\r\n\r\nmodule.exports = StaticTilemapLayerWebGLRenderer;\r\n"},"sourceMaps":null,"error":null,"hash":"3bc9fef54d55c8911be52dd444abe1e4","cacheData":{"env":{}}}