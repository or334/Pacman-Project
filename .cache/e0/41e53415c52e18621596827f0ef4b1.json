{"id":"../../node_modules/phaser/src/physics/matter-js/lib/core/Metrics.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../body/Composite","loc":{"line":11,"column":24},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Metrics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\body\\Composite.js"},{"name":"./Common","loc":{"line":12,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Metrics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Common.js"}],"generated":{"js":"// @if DEBUG\r\n/**\r\n* _Internal Class_, not generally used outside of the engine's internals.\r\n*\r\n*/\r\n\r\nvar Metrics = {};\r\n\r\nmodule.exports = Metrics;\r\n\r\nvar Composite = require('../body/Composite');\r\nvar Common = require('./Common');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new metrics.\r\n     * @method create\r\n     * @private\r\n     * @return {metrics} A new metrics\r\n     */\r\n    Metrics.create = function(options) {\r\n        var defaults = {\r\n            extended: false,\r\n            narrowDetections: 0,\r\n            narrowphaseTests: 0,\r\n            narrowReuse: 0,\r\n            narrowReuseCount: 0,\r\n            midphaseTests: 0,\r\n            broadphaseTests: 0,\r\n            narrowEff: 0.0001,\r\n            midEff: 0.0001,\r\n            broadEff: 0.0001,\r\n            collisions: 0,\r\n            buckets: 0,\r\n            bodies: 0,\r\n            pairs: 0\r\n        };\r\n\r\n        return Common.extend(defaults, false, options);\r\n    };\r\n\r\n    /**\r\n     * Resets metrics.\r\n     * @method reset\r\n     * @private\r\n     * @param {metrics} metrics\r\n     */\r\n    Metrics.reset = function(metrics) {\r\n        if (metrics.extended) {\r\n            metrics.narrowDetections = 0;\r\n            metrics.narrowphaseTests = 0;\r\n            metrics.narrowReuse = 0;\r\n            metrics.narrowReuseCount = 0;\r\n            metrics.midphaseTests = 0;\r\n            metrics.broadphaseTests = 0;\r\n            metrics.narrowEff = 0;\r\n            metrics.midEff = 0;\r\n            metrics.broadEff = 0;\r\n            metrics.collisions = 0;\r\n            metrics.buckets = 0;\r\n            metrics.pairs = 0;\r\n            metrics.bodies = 0;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Updates metrics.\r\n     * @method update\r\n     * @private\r\n     * @param {metrics} metrics\r\n     * @param {engine} engine\r\n     */\r\n    Metrics.update = function(metrics, engine) {\r\n        if (metrics.extended) {\r\n            var world = engine.world,\r\n                bodies = Composite.allBodies(world);\r\n\r\n            metrics.collisions = metrics.narrowDetections;\r\n            metrics.pairs = engine.pairs.list.length;\r\n            metrics.bodies = bodies.length;\r\n            metrics.midEff = (metrics.narrowDetections / (metrics.midphaseTests || 1)).toFixed(2);\r\n            metrics.narrowEff = (metrics.narrowDetections / (metrics.narrowphaseTests || 1)).toFixed(2);\r\n            metrics.broadEff = (1 - (metrics.broadphaseTests / (bodies.length || 1))).toFixed(2);\r\n            metrics.narrowReuse = (metrics.narrowReuseCount / (metrics.narrowphaseTests || 1)).toFixed(2);\r\n            //var broadphase = engine.broadphase[engine.broadphase.current];\r\n            //if (broadphase.instance)\r\n            //    metrics.buckets = Common.keys(broadphase.instance.buckets).length;\r\n        }\r\n    };\r\n\r\n})();\r\n// @endif\r\n"},"sourceMaps":null,"error":null,"hash":"5e40443588726de116ede0c611ef1ff7","cacheData":{"env":{}}}