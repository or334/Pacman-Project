{"id":"../../node_modules/phaser/src/geom/triangle/CircumCircle.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../circle/Circle","loc":{"line":7,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\CircumCircle.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\circle\\Circle.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Circle = require('../circle/Circle');\r\n\r\n//  Adapted from https://gist.github.com/mutoo/5617691\r\n\r\n/**\r\n * Finds the circumscribed circle (circumcircle) of a Triangle object. The circumcircle is the circle which touches all of the triangle's vertices.\r\n *\r\n * @function Phaser.Geom.Triangle.CircumCircle\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Circle} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to use as input.\r\n * @param {Phaser.Geom.Circle} [out] - An optional Circle to store the result in.\r\n *\r\n * @return {Phaser.Geom.Circle} The updated `out` Circle, or a new Circle if none was provided.\r\n */\r\nvar CircumCircle = function (triangle, out)\r\n{\r\n    if (out === undefined) { out = new Circle(); }\r\n\r\n    //  A\r\n    var x1 = triangle.x1;\r\n    var y1 = triangle.y1;\r\n\r\n    //  B\r\n    var x2 = triangle.x2;\r\n    var y2 = triangle.y2;\r\n\r\n    //  C\r\n    var x3 = triangle.x3;\r\n    var y3 = triangle.y3;\r\n\r\n    var A = x2 - x1;\r\n    var B = y2 - y1;\r\n    var C = x3 - x1;\r\n    var D = y3 - y1;\r\n    var E = A * (x1 + x2) + B * (y1 + y2);\r\n    var F = C * (x1 + x3) + D * (y1 + y3);\r\n    var G = 2 * (A * (y3 - y2) - B * (x3 - x2));\r\n\r\n    var dx;\r\n    var dy;\r\n\r\n    //  If the points of the triangle are collinear, then just find the\r\n    //  extremes and use the midpoint as the center of the circumcircle.\r\n\r\n    if (Math.abs(G) < 0.000001)\r\n    {\r\n        var minX = Math.min(x1, x2, x3);\r\n        var minY = Math.min(y1, y2, y3);\r\n        dx = (Math.max(x1, x2, x3) - minX) * 0.5;\r\n        dy = (Math.max(y1, y2, y3) - minY) * 0.5;\r\n\r\n        out.x = minX + dx;\r\n        out.y = minY + dy;\r\n        out.radius = Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    else\r\n    {\r\n        out.x = (D * E - B * F) / G;\r\n        out.y = (A * F - C * E) / G;\r\n        dx = out.x - x1;\r\n        dy = out.y - y1;\r\n        out.radius = Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = CircumCircle;\r\n"},"sourceMaps":null,"error":null,"hash":"6fa4fd51a8f353111a2cf25622a1d925","cacheData":{"env":{}}}