{"id":"../../node_modules/phaser/src/display/color/HSVToRGB.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"./GetColor","loc":{"line":7,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\color\\HSVToRGB.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\color\\GetColor.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetColor = require('./GetColor');\r\n\r\n/**\r\n * Converts an HSV (hue, saturation and value) color value to RGB.\r\n * Conversion formula from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes HSV values are contained in the set [0, 1].\r\n * Based on code by Michael Jackson (https://github.com/mjijackson)\r\n *\r\n * @function Phaser.Display.Color.HSVToRGB\r\n * @since 3.0.0\r\n *\r\n * @param {number} h - The hue, in the range 0 - 1. This is the base color.\r\n * @param {number} s - The saturation, in the range 0 - 1. This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n * @param {number} v - The value, in the range 0 - 1. This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n * @param {(Phaser.Types.Display.ColorObject|Phaser.Display.Color)} [out] - A Color object to store the results in. If not given a new ColorObject will be created.\r\n *\r\n * @return {(Phaser.Types.Display.ColorObject|Phaser.Display.Color)} An object with the red, green and blue values set in the r, g and b properties.\r\n */\r\nvar HSVToRGB = function (h, s, v, out)\r\n{\r\n    if (s === undefined) { s = 1; }\r\n    if (v === undefined) { v = 1; }\r\n\r\n    var i = Math.floor(h * 6);\r\n    var f = h * 6 - i;\r\n\r\n    var p = Math.floor((v * (1 - s)) * 255);\r\n    var q = Math.floor((v * (1 - f * s)) * 255);\r\n    var t = Math.floor((v * (1 - (1 - f) * s)) * 255);\r\n\r\n    v = Math.floor(v *= 255);\r\n\r\n    var r = v;\r\n    var g = v;\r\n    var b = v;\r\n\r\n    var c = i % 6;\r\n\r\n    if (c === 0)\r\n    {\r\n        g = t;\r\n        b = p;\r\n    }\r\n    else if (c === 1)\r\n    {\r\n        r = q;\r\n        b = p;\r\n    }\r\n    else if (c === 2)\r\n    {\r\n        r = p;\r\n        b = t;\r\n    }\r\n    else if (c === 3)\r\n    {\r\n        r = p;\r\n        g = q;\r\n    }\r\n    else if (c === 4)\r\n    {\r\n        r = t;\r\n        g = p;\r\n    }\r\n    else if (c === 5)\r\n    {\r\n        g = p;\r\n        b = q;\r\n    }\r\n\r\n    if (!out)\r\n    {\r\n        return { r: r, g: g, b: b, color: GetColor(r, g, b) };\r\n    }\r\n    else if (out.setTo)\r\n    {\r\n        return out.setTo(r, g, b, out.alpha, false);\r\n    }\r\n    else\r\n    {\r\n        out.r = r;\r\n        out.g = g;\r\n        out.b = b;\r\n        out.color = GetColor(r, g, b);\r\n\r\n        return out;\r\n    }\r\n};\r\n\r\nmodule.exports = HSVToRGB;\r\n"},"sourceMaps":null,"error":null,"hash":"68d46b34dbd96ac78ef548d045a6cab7","cacheData":{"env":{}}}