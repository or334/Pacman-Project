{"id":"../../node_modules/phaser/src/physics/arcade/PhysicsGroup.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"./ArcadeSprite","loc":{"line":7,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\PhysicsGroup.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\ArcadeSprite.js"},{"name":"../../utils/Class","loc":{"line":8,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\PhysicsGroup.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./const","loc":{"line":9,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\PhysicsGroup.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\const.js"},{"name":"../../utils/object/GetFastValue","loc":{"line":10,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\PhysicsGroup.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetFastValue.js"},{"name":"../../gameobjects/group/Group","loc":{"line":11,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\PhysicsGroup.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\group\\Group.js"},{"name":"../../utils/object/IsPlainObject","loc":{"line":12,"column":28},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\PhysicsGroup.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\IsPlainObject.js"}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2019 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar ArcadeSprite = require('./ArcadeSprite');\nvar Class = require('../../utils/Class');\nvar CONST = require('./const');\nvar GetFastValue = require('../../utils/object/GetFastValue');\nvar Group = require('../../gameobjects/group/Group');\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n\n/**\n * @classdesc\n * An Arcade Physics Group object.\n *\n * All Game Objects created by this Group will automatically be given dynamic Arcade Physics bodies.\n *\n * Its static counterpart is {@link Phaser.Physics.Arcade.StaticGroup}.\n *\n * @class Group\n * @extends Phaser.GameObjects.Group\n * @memberof Phaser.Physics.Arcade\n * @constructor\n * @since 3.0.0\n *\n * @param {Phaser.Physics.Arcade.World} world - The physics simulation.\n * @param {Phaser.Scene} scene - The scene this group belongs to.\n * @param {(Phaser.GameObjects.GameObject[]|Phaser.Types.Physics.Arcade.PhysicsGroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\n * @param {Phaser.Types.Physics.Arcade.PhysicsGroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig} [config] - Settings for this group.\n */\nvar PhysicsGroup = new Class({\n\n    Extends: Group,\n\n    initialize:\n\n    function PhysicsGroup (world, scene, children, config)\n    {\n        if (!children && !config)\n        {\n            config = {\n                createCallback: this.createCallbackHandler,\n                removeCallback: this.removeCallbackHandler\n            };\n        }\n        else if (IsPlainObject(children))\n        {\n            //  children is a plain object, so swizzle them:\n            config = children;\n            children = null;\n\n            config.createCallback = this.createCallbackHandler;\n            config.removeCallback = this.removeCallbackHandler;\n        }\n        else if (Array.isArray(children) && IsPlainObject(children[0]))\n        {\n            //  children is an array of plain objects\n            config = children[0];\n\n            var _this = this;\n\n            children.forEach(function (singleConfig)\n            {\n                singleConfig.createCallback = _this.createCallbackHandler;\n                singleConfig.removeCallback = _this.removeCallbackHandler;\n            });\n        }\n        else\n        {\n            // config is not defined and children is not a plain object nor an array of plain objects\n            config = {\n                createCallback: this.createCallbackHandler,\n                removeCallback: this.removeCallbackHandler\n            };\n        }\n\n        /**\n         * The physics simulation.\n         *\n         * @name Phaser.Physics.Arcade.Group#world\n         * @type {Phaser.Physics.Arcade.World}\n         * @since 3.0.0\n         */\n        this.world = world;\n\n        /**\n         * The class to create new Group members from.\n         * \n         * This should be either `Phaser.Physics.Arcade.Image`, `Phaser.Physics.Arcade.Sprite`, or a class extending one of those.\n         *\n         * @name Phaser.Physics.Arcade.Group#classType\n         * @type {Phaser.Types.GameObjects.Group.GroupClassTypeConstructor}\n         * @default ArcadeSprite\n         * @since 3.0.0\n         */\n        config.classType = GetFastValue(config, 'classType', ArcadeSprite);\n\n        /**\n         * The physics type of the Group's members.\n         *\n         * @name Phaser.Physics.Arcade.Group#physicsType\n         * @type {integer}\n         * @default Phaser.Physics.Arcade.DYNAMIC_BODY\n         * @since 3.0.0\n         */\n        this.physicsType = CONST.DYNAMIC_BODY;\n\n        /**\n         * Default physics properties applied to Game Objects added to the Group or created by the Group. Derived from the `config` argument.\n         *\n         * @name Phaser.Physics.Arcade.Group#defaults\n         * @type {Phaser.Types.Physics.Arcade.PhysicsGroupDefaults}\n         * @since 3.0.0\n         */\n        this.defaults = {\n            setCollideWorldBounds: GetFastValue(config, 'collideWorldBounds', false),\n            setAccelerationX: GetFastValue(config, 'accelerationX', 0),\n            setAccelerationY: GetFastValue(config, 'accelerationY', 0),\n            setAllowDrag: GetFastValue(config, 'allowDrag', true),\n            setAllowGravity: GetFastValue(config, 'allowGravity', true),\n            setAllowRotation: GetFastValue(config, 'allowRotation', true),\n            setBounceX: GetFastValue(config, 'bounceX', 0),\n            setBounceY: GetFastValue(config, 'bounceY', 0),\n            setDragX: GetFastValue(config, 'dragX', 0),\n            setDragY: GetFastValue(config, 'dragY', 0),\n            setEnable: GetFastValue(config, 'enable', true),\n            setGravityX: GetFastValue(config, 'gravityX', 0),\n            setGravityY: GetFastValue(config, 'gravityY', 0),\n            setFrictionX: GetFastValue(config, 'frictionX', 0),\n            setFrictionY: GetFastValue(config, 'frictionY', 0),\n            setVelocityX: GetFastValue(config, 'velocityX', 0),\n            setVelocityY: GetFastValue(config, 'velocityY', 0),\n            setAngularVelocity: GetFastValue(config, 'angularVelocity', 0),\n            setAngularAcceleration: GetFastValue(config, 'angularAcceleration', 0),\n            setAngularDrag: GetFastValue(config, 'angularDrag', 0),\n            setMass: GetFastValue(config, 'mass', 1),\n            setImmovable: GetFastValue(config, 'immovable', false)\n        };\n\n        if (Array.isArray(children))\n        {\n            config = null;\n        }\n\n        Group.call(this, scene, children, config);\n    },\n\n    /**\n     * Enables a Game Object's Body and assigns `defaults`. Called when a Group member is added or created.\n     *\n     * @method Phaser.Physics.Arcade.Group#createCallbackHandler\n     * @since 3.0.0\n     *\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object being added.\n     */\n    createCallbackHandler: function (child)\n    {\n        if (!child.body)\n        {\n            this.world.enableBody(child, CONST.DYNAMIC_BODY);\n        }\n\n        var body = child.body;\n\n        for (var key in this.defaults)\n        {\n            body[key](this.defaults[key]);\n        }\n    },\n\n    /**\n     * Disables a Game Object's Body. Called when a Group member is removed.\n     *\n     * @method Phaser.Physics.Arcade.Group#removeCallbackHandler\n     * @since 3.0.0\n     *\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object being removed.\n     */\n    removeCallbackHandler: function (child)\n    {\n        if (child.body)\n        {\n            this.world.disableBody(child);\n        }\n    },\n\n    /**\n     * Sets the velocity of each Group member.\n     *\n     * @method Phaser.Physics.Arcade.Group#setVelocity\n     * @since 3.0.0\n     *\n     * @param {number} x - The horizontal velocity.\n     * @param {number} y - The vertical velocity.\n     * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (x, y), the second (x + step, y + step), and so on.\n     *\n     * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\n     */\n    setVelocity: function (x, y, step)\n    {\n        if (step === undefined) { step = 0; }\n\n        var items = this.getChildren();\n\n        for (var i = 0; i < items.length; i++)\n        {\n            items[i].body.velocity.set(x + (i * step), y + (i * step));\n        }\n\n        return this;\n    },\n\n    /**\n     * Sets the horizontal velocity of each Group member.\n     *\n     * @method Phaser.Physics.Arcade.Group#setVelocityX\n     * @since 3.0.0\n     *\n     * @param {number} value - The velocity value.\n     * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (x), the second (x + step), and so on.\n     *\n     * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\n     */\n    setVelocityX: function (value, step)\n    {\n        if (step === undefined) { step = 0; }\n\n        var items = this.getChildren();\n\n        for (var i = 0; i < items.length; i++)\n        {\n            items[i].body.velocity.x = value + (i * step);\n        }\n\n        return this;\n    },\n\n    /**\n     * Sets the vertical velocity of each Group member.\n     *\n     * @method Phaser.Physics.Arcade.Group#setVelocityY\n     * @since 3.0.0\n     *\n     * @param {number} value - The velocity value.\n     * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (y), the second (y + step), and so on.\n     *\n     * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\n     */\n    setVelocityY: function (value, step)\n    {\n        if (step === undefined) { step = 0; }\n\n        var items = this.getChildren();\n\n        for (var i = 0; i < items.length; i++)\n        {\n            items[i].body.velocity.y = value + (i * step);\n        }\n\n        return this;\n    }\n\n});\n\nmodule.exports = PhysicsGroup;\n"},"sourceMaps":null,"error":null,"hash":"5c148d4a8c11ad8ed95ebbd6f9b645bb","cacheData":{"env":{}}}