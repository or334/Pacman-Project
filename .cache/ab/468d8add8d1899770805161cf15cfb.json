{"id":"../../node_modules/phaser/src/physics/matter-js/components/Force.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../lib/body/Body","loc":{"line":7,"column":19},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\components\\Force.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\body\\Body.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Body = require('../lib/body/Body');\r\n\r\n/**\r\n * A component to apply force to Matter.js bodies.\r\n *\r\n * @namespace Phaser.Physics.Matter.Components.Force\r\n * @since 3.0.0\r\n */\r\nvar Force = {\r\n\r\n    //  force = vec2 / point\r\n\r\n    /**\r\n     * Applies a force to a body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#applyForce\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} force - A Vector that specifies the force to apply.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    applyForce: function (force)\r\n    {\r\n        this._tempVec2.set(this.body.position.x, this.body.position.y);\r\n\r\n        Body.applyForce(this.body, this._tempVec2, force);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Applies a force to a body from a given position.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#applyForceFrom\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} position - The position in which the force comes from.\r\n     * @param {Phaser.Math.Vector2} force - A Vector that specifies the force to apply.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    applyForceFrom: function (position, force)\r\n    {\r\n        Body.applyForce(this.body, position, force);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply thrust to the forward position of the body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#thrust\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    thrust: function (speed)\r\n    {\r\n        var angle = this.body.angle;\r\n\r\n        this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\r\n\r\n        Body.applyForce(this.body, { x: this.body.position.x, y: this.body.position.y }, this._tempVec2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply thrust to the left position of the body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#thrustLeft\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    thrustLeft: function (speed)\r\n    {\r\n        var angle = this.body.angle - Math.PI / 2;\r\n\r\n        this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\r\n\r\n        Body.applyForce(this.body, { x: this.body.position.x, y: this.body.position.y }, this._tempVec2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply thrust to the right position of the body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#thrustRight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    thrustRight: function (speed)\r\n    {\r\n        var angle = this.body.angle + Math.PI / 2;\r\n\r\n        this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\r\n\r\n        Body.applyForce(this.body, { x: this.body.position.x, y: this.body.position.y }, this._tempVec2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply thrust to the back position of the body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#thrustBack\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    thrustBack: function (speed)\r\n    {\r\n        var angle = this.body.angle - Math.PI;\r\n\r\n        this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\r\n\r\n        Body.applyForce(this.body, { x: this.body.position.x, y: this.body.position.y }, this._tempVec2);\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Force;\r\n"},"sourceMaps":null,"error":null,"hash":"310b2466cd86bd438396b10c45941ad8","cacheData":{"env":{}}}