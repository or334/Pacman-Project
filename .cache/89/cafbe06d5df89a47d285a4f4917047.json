{"id":"../../node_modules/phaser/plugins/camera3d/src/Camera.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../../src/utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\Camera.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../../../src/math/Matrix4","loc":{"line":8,"column":22},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\Camera.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Matrix4.js"},{"name":"../../../src/math/RandomXYZ","loc":{"line":9,"column":24},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\Camera.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\RandomXYZ.js"},{"name":"../../../src/math/RandomXYZW","loc":{"line":10,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\Camera.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\RandomXYZW.js"},{"name":"../../../src/math/RotateVec3","loc":{"line":11,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\Camera.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\RotateVec3.js"},{"name":"../../../src/structs/Set","loc":{"line":12,"column":18},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\Camera.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\structs\\Set.js"},{"name":"./sprite3d/Sprite3D","loc":{"line":13,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\Camera.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\sprite3d\\Sprite3D.js"},{"name":"../../../src/math/Vector2","loc":{"line":14,"column":22},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\Camera.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Vector2.js"},{"name":"../../../src/math/Vector3","loc":{"line":15,"column":22},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\Camera.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Vector3.js"},{"name":"../../../src/math/Vector4","loc":{"line":16,"column":22},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\Camera.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Vector4.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../src/utils/Class');\r\nvar Matrix4 = require('../../../src/math/Matrix4');\r\nvar RandomXYZ = require('../../../src/math/RandomXYZ');\r\nvar RandomXYZW = require('../../../src/math/RandomXYZW');\r\nvar RotateVec3 = require('../../../src/math/RotateVec3');\r\nvar Set = require('../../../src/structs/Set');\r\nvar Sprite3D = require('./sprite3d/Sprite3D');\r\nvar Vector2 = require('../../../src/math/Vector2');\r\nvar Vector3 = require('../../../src/math/Vector3');\r\nvar Vector4 = require('../../../src/math/Vector4');\r\n\r\n//  Local cache vars\r\nvar tmpVec3 = new Vector3();\r\nvar tmpVec4 = new Vector4();\r\nvar dirvec = new Vector3();\r\nvar rightvec = new Vector3();\r\nvar billboardMatrix = new Matrix4();\r\n\r\n//  @author attribute https://github.com/mattdesl/cam3d/wiki\r\n\r\n/**\r\n * @typedef {object} RayDef\r\n *\r\n * @property {Phaser.Math.Vector3} origin - [description]\r\n * @property {Phaser.Math.Vector3} direction - [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\r\nvar Camera = new Class({\r\n\r\n    initialize:\r\n\r\n    function Camera (scene)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#displayList\r\n         * @type {Phaser.GameObjects.DisplayList}\r\n         * @since 3.0.0\r\n         */\r\n        this.displayList = scene.sys.displayList;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#updateList\r\n         * @type {Phaser.GameObjects.UpdateList}\r\n         * @since 3.0.0\r\n         */\r\n        this.updateList = scene.sys.updateList;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#name\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.name = '';\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#direction\r\n         * @type {Phaser.Math.Vector3}\r\n         * @since 3.0.0\r\n         */\r\n        this.direction = new Vector3(0, 0, -1);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#up\r\n         * @type {Phaser.Math.Vector3}\r\n         * @since 3.0.0\r\n         */\r\n        this.up = new Vector3(0, 1, 0);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#position\r\n         * @type {Phaser.Math.Vector3}\r\n         * @since 3.0.0\r\n         */\r\n        this.position = new Vector3();\r\n\r\n        //  The mapping from 3D size units to pixels.\r\n        //  In the default case 1 3D unit = 128 pixels. So a sprite that is\r\n        //  256 x 128 px in size will be 2 x 1 units.\r\n        //  Change to whatever best fits your game assets.\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#pixelScale\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.pixelScale = 128;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#projection\r\n         * @type {Phaser.Math.Matrix4}\r\n         * @since 3.0.0\r\n         */\r\n        this.projection = new Matrix4();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#view\r\n         * @type {Phaser.Math.Matrix4}\r\n         * @since 3.0.0\r\n         */\r\n        this.view = new Matrix4();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#combined\r\n         * @type {Phaser.Math.Matrix4}\r\n         * @since 3.0.0\r\n         */\r\n        this.combined = new Matrix4();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#invProjectionView\r\n         * @type {Phaser.Math.Matrix4}\r\n         * @since 3.0.0\r\n         */\r\n        this.invProjectionView = new Matrix4();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#near\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.near = 1;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#far\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.far = 100;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#ray\r\n         * @type {RayDef}\r\n         * @since 3.0.0\r\n         */\r\n        this.ray = {\r\n            origin: new Vector3(),\r\n            direction: new Vector3()\r\n        };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#viewportWidth\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportWidth = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#viewportHeight\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportHeight = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#billboardMatrixDirty\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.billboardMatrixDirty = true;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#children\r\n         * @type {Phaser.Structs.Set.<Phaser.GameObjects.GameObject>}\r\n         * @since 3.0.0\r\n         */\r\n        this.children = new Set();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} z - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setPosition: function (x, y, z)\r\n    {\r\n        this.position.set(x, y, z);\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setScene\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Scene} scene - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setScene: function (scene)\r\n    {\r\n        this.scene = scene;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setPixelScale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setPixelScale: function (value)\r\n    {\r\n        this.pixelScale = value;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Sprite3D} sprite3D - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D} [description]\r\n     */\r\n    add: function (sprite3D)\r\n    {\r\n        this.children.set(sprite3D);\r\n\r\n        this.displayList.add(sprite3D.gameObject);\r\n        this.updateList.add(sprite3D.gameObject);\r\n\r\n        this.updateChildren();\r\n\r\n        return sprite3D;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    remove: function (child)\r\n    {\r\n        this.displayList.remove(child.gameObject);\r\n        this.updateList.remove(child.gameObject);\r\n\r\n        this.children.delete(child);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#clear\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    clear: function ()\r\n    {\r\n        var children = this.getChildren();\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            this.remove(children[i]);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#getChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @return {array} [description]\r\n     */\r\n    getChildren: function ()\r\n    {\r\n        return this.children.entries;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} z - [description]\r\n     * @param {string} key - [description]\r\n     * @param {(string|number)} frame - [description]\r\n     * @param {boolean} [visible=true] - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D} [description]\r\n     */\r\n    create: function (x, y, z, key, frame, visible)\r\n    {\r\n        if (visible === undefined) { visible = true; }\r\n\r\n        var child = new Sprite3D(this.scene, x, y, z, key, frame);\r\n\r\n        this.displayList.add(child.gameObject);\r\n        this.updateList.add(child.gameObject);\r\n\r\n        child.visible = visible;\r\n\r\n        this.children.set(child);\r\n\r\n        this.updateChildren();\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#createMultiple\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} quantity - [description]\r\n     * @param {string} key - [description]\r\n     * @param {(string|number)} frame - [description]\r\n     * @param {boolean} [visible=true] - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D[]} [description]\r\n     */\r\n    createMultiple: function (quantity, key, frame, visible)\r\n    {\r\n        if (visible === undefined) { visible = true; }\r\n\r\n        var output = [];\r\n\r\n        for (var i = 0; i < quantity; i++)\r\n        {\r\n            var child = new Sprite3D(this.scene, 0, 0, 0, key, frame);\r\n\r\n            this.displayList.add(child.gameObject);\r\n            this.updateList.add(child.gameObject);\r\n\r\n            child.visible = visible;\r\n\r\n            this.children.set(child);\r\n\r\n            output.push(child);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    //  Create a bunch of Sprite3D objects in a rectangle\r\n    //  size and spacing are Vec3s (or if integers are converted to vec3s)\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#createRect\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|{x:number,y:number})} size - [description]\r\n     * @param {(number|{x:number,y:number,z:number})} spacing - [description]\r\n     * @param {string} key - [description]\r\n     * @param {(string|number)} [frame] - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D[]} [description]\r\n     */\r\n    createRect: function (size, spacing, key, frame)\r\n    {\r\n        if (typeof size === 'number') { size = { x: size, y: size, z: size }; }\r\n        if (typeof spacing === 'number') { spacing = { x: spacing, y: spacing, z: spacing }; }\r\n\r\n        var quantity = size.x * size.y * size.z;\r\n\r\n        var sprites = this.createMultiple(quantity, key, frame);\r\n\r\n        var i = 0;\r\n\r\n        for (var z = 0.5 - (size.z / 2); z < (size.z / 2); z++)\r\n        {\r\n            for (var y = 0.5 - (size.y / 2); y < (size.y / 2); y++)\r\n            {\r\n                for (var x = 0.5 - (size.x / 2); x < (size.x / 2); x++)\r\n                {\r\n                    var bx = (x * spacing.x);\r\n                    var by = (y * spacing.y);\r\n                    var bz = (z * spacing.z);\r\n\r\n                    sprites[i].position.set(bx, by, bz);\r\n\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.update();\r\n\r\n        return sprites;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#randomSphere\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [radius=1] - [description]\r\n     * @param {Phaser.GameObjects.Sprite3D[]} [sprites] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    randomSphere: function (radius, sprites)\r\n    {\r\n        if (sprites === undefined) { sprites = this.getChildren(); }\r\n\r\n        for (var i = 0; i < sprites.length; i++)\r\n        {\r\n            RandomXYZ(sprites[i].position, radius);\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#randomCube\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [scale=1] - [description]\r\n     * @param {Phaser.GameObjects.Sprite3D[]} [sprites] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    randomCube: function (scale, sprites)\r\n    {\r\n        if (sprites === undefined) { sprites = this.getChildren(); }\r\n\r\n        for (var i = 0; i < sprites.length; i++)\r\n        {\r\n            RandomXYZW(sprites[i].position, scale);\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#translateChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} vec3 - [description]\r\n     * @param {Phaser.GameObjects.Sprite3D[]} sprites - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    translateChildren: function (vec3, sprites)\r\n    {\r\n        if (sprites === undefined) { sprites = this.getChildren(); }\r\n\r\n        for (var i = 0; i < sprites.length; i++)\r\n        {\r\n            sprites[i].position.add(vec3);\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#transformChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat4 - [description]\r\n     * @param {Phaser.GameObjects.Sprite3D[]} sprites - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    transformChildren: function (mat4, sprites)\r\n    {\r\n        if (sprites === undefined) { sprites = this.getChildren(); }\r\n\r\n        for (var i = 0; i < sprites.length; i++)\r\n        {\r\n            sprites[i].position.transformMat4(mat4);\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * Sets the width and height of the viewport. Does not update any matrices.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setViewport\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setViewport: function (width, height)\r\n    {\r\n        this.viewportWidth = width;\r\n        this.viewportHeight = height;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * Translates this camera by a specified Vector3 object\r\n     * or x, y, z parameters. Any undefined x y z values will\r\n     * default to zero, leaving that component unaffected.\r\n     * If you wish to set the camera position directly call setPosition instead.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#translate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} x - [description]\r\n     * @param {number} [y] - [description]\r\n     * @param {number} [z] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    translate: function (x, y, z)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            this.position.x += x.x || 0;\r\n            this.position.y += x.y || 0;\r\n            this.position.z += x.z || 0;\r\n        }\r\n        else\r\n        {\r\n            this.position.x += x || 0;\r\n            this.position.y += y || 0;\r\n            this.position.z += z || 0;\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#lookAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} x - [description]\r\n     * @param {number} [y] - [description]\r\n     * @param {number} [z] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    lookAt: function (x, y, z)\r\n    {\r\n        var dir = this.direction;\r\n        var up = this.up;\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            dir.copy(x);\r\n        }\r\n        else\r\n        {\r\n            dir.set(x, y, z);\r\n        }\r\n\r\n        dir.subtract(this.position).normalize();\r\n\r\n        //  Calculate right vector\r\n        tmpVec3.copy(dir).cross(up).normalize();\r\n\r\n        //  Calculate up vector\r\n        up.copy(tmpVec3).cross(dir).normalize();\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#rotate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radians - [description]\r\n     * @param {Phaser.Math.Vector3} axis - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    rotate: function (radians, axis)\r\n    {\r\n        RotateVec3(this.direction, axis, radians);\r\n        RotateVec3(this.up, axis, radians);\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#rotateAround\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} point - [description]\r\n     * @param {number} radians - [description]\r\n     * @param {Phaser.Math.Vector3} axis - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    rotateAround: function (point, radians, axis)\r\n    {\r\n        tmpVec3.copy(point).subtract(this.position);\r\n\r\n        this.translate(tmpVec3);\r\n        this.rotate(radians, axis);\r\n        this.translate(tmpVec3.negate());\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#project\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} vec - [description]\r\n     * @param {Phaser.Math.Vector4} out - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector4} [description]\r\n     */\r\n    project: function (vec, out)\r\n    {\r\n        if (out === undefined) { out = new Vector4(); }\r\n\r\n        //  TODO: support viewport XY\r\n        var viewportWidth = this.viewportWidth;\r\n        var viewportHeight = this.viewportHeight;\r\n        var n = Camera.NEAR_RANGE;\r\n        var f = Camera.FAR_RANGE;\r\n\r\n        //  For useful Z and W values we should do the usual steps: clip space -> NDC -> window coords\r\n\r\n        //  Implicit 1.0 for w component\r\n        tmpVec4.set(vec.x, vec.y, vec.z, 1.0);\r\n\r\n        //  Transform into clip space\r\n        tmpVec4.transformMat4(this.combined);\r\n\r\n        //  Avoid divide by zero when 0x0x0 camera projects to a 0x0x0 vec3\r\n        if (tmpVec4.w === 0)\r\n        {\r\n            tmpVec4.w = 1;\r\n        }\r\n\r\n        //  Now into NDC\r\n        tmpVec4.x = tmpVec4.x / tmpVec4.w;\r\n        tmpVec4.y = tmpVec4.y / tmpVec4.w;\r\n        tmpVec4.z = tmpVec4.z / tmpVec4.w;\r\n\r\n        //  And finally into window coordinates\r\n        out.x = viewportWidth / 2 * tmpVec4.x + (0 + viewportWidth / 2);\r\n        out.y = viewportHeight / 2 * tmpVec4.y + (0 + viewportHeight / 2);\r\n        out.z = (f - n) / 2 * tmpVec4.z + (f + n) / 2;\r\n\r\n        //  If the out vector has a fourth component, we also store (1/clip.w), same idea as gl_FragCoord.w\r\n        if (out.w === 0 || out.w)\r\n        {\r\n            out.w = 1 / tmpVec4.w;\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#unproject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} vec - [description]\r\n     * @param {Phaser.Math.Vector3} out - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector3} [description]\r\n     */\r\n    unproject: function (vec, out)\r\n    {\r\n        if (out === undefined) { out = new Vector3(); }\r\n\r\n        var viewport = tmpVec4.set(0, 0, this.viewportWidth, this.viewportHeight);\r\n\r\n        return out.copy(vec).unproject(viewport, this.invProjectionView);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#getPickRay\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} [y] - [description]\r\n     *\r\n     * @return {RayDef} [description]\r\n     */\r\n    getPickRay: function (x, y)\r\n    {\r\n        var origin = this.ray.origin.set(x, y, 0);\r\n        var direction = this.ray.direction.set(x, y, 1);\r\n        var viewport = tmpVec4.set(0, 0, this.viewportWidth, this.viewportHeight);\r\n        var mtx = this.invProjectionView;\r\n\r\n        origin.unproject(viewport, mtx);\r\n\r\n        direction.unproject(viewport, mtx);\r\n\r\n        direction.subtract(origin).normalize();\r\n\r\n        return this.ray;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#updateChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    updateChildren: function ()\r\n    {\r\n        var children = this.children.entries;\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            children[i].project(this);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    //  Overriden by subclasses\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#update\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    update: function ()\r\n    {\r\n        return this.updateChildren();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#updateBillboardMatrix\r\n     * @since 3.0.0\r\n     */\r\n    updateBillboardMatrix: function ()\r\n    {\r\n        var dir = dirvec.set(this.direction).negate();\r\n\r\n        // Better view-aligned billboards might use this:\r\n        // var dir = tmp.set(camera.position).subtract(p).normalize();\r\n\r\n        var right = rightvec.set(this.up).cross(dir).normalize();\r\n        var up = tmpVec3.set(dir).cross(right).normalize();\r\n\r\n        var out = billboardMatrix.val;\r\n\r\n        out[0] = right.x;\r\n        out[1] = right.y;\r\n        out[2] = right.z;\r\n        out[3] = 0;\r\n\r\n        out[4] = up.x;\r\n        out[5] = up.y;\r\n        out[6] = up.z;\r\n        out[7] = 0;\r\n\r\n        out[8] = dir.x;\r\n        out[9] = dir.y;\r\n        out[10] = dir.z;\r\n        out[11] = 0;\r\n\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n\r\n        this.billboardMatrixDirty = false;\r\n    },\r\n\r\n    /**\r\n     * This is a utility function for canvas 3D rendering,\r\n     * which determines the \"point size\" of a camera-facing\r\n     * sprite billboard given its 3D world position\r\n     * (origin at center of sprite) and its world width\r\n     * and height in x/y.\r\n     *\r\n     * We place into the output Vector2 the scaled width\r\n     * and height. If no `out` is specified, a new Vector2\r\n     * will be created for convenience (this should be avoided\r\n     * in tight loops).\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#getPointSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} vec - The position of the 3D Sprite.\r\n     * @param {Phaser.Math.Vector2} size - The x and y dimensions.\r\n     * @param {Phaser.Math.Vector2} out - The result, scaled x and y dimensions.\r\n     *\r\n     * @return {Phaser.Math.Vector2} [description]\r\n     */\r\n    getPointSize: function (vec, size, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        // TODO: optimize this with a simple distance calculation:\r\n        // https://developer.valvesoftware.com/wiki/Field_of_View\r\n\r\n        if (this.billboardMatrixDirty)\r\n        {\r\n            this.updateBillboardMatrix();\r\n        }\r\n\r\n        var tmp = tmpVec3;\r\n\r\n        var dx = (size.x / this.pixelScale) / 2;\r\n        var dy = (size.y / this.pixelScale) / 2;\r\n\r\n        tmp.set(-dx, -dy, 0).transformMat4(billboardMatrix).add(vec);\r\n\r\n        this.project(tmp, tmp);\r\n\r\n        var tlx = tmp.x;\r\n        var tly = tmp.y;\r\n\r\n        tmp.set(dx, dy, 0).transformMat4(billboardMatrix).add(vec);\r\n\r\n        this.project(tmp, tmp);\r\n\r\n        var brx = tmp.x;\r\n        var bry = tmp.y;\r\n\r\n        // var w = Math.abs(brx - tlx);\r\n        // var h = Math.abs(bry - tly);\r\n\r\n        //  Allow the projection to get negative ...\r\n        var w = brx - tlx;\r\n        var h = bry - tly;\r\n\r\n        return out.set(w, h);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.children.clear();\r\n\r\n        this.scene = undefined;\r\n        this.children = undefined;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setX: function (value)\r\n    {\r\n        this.position.x = value;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setY: function (value)\r\n    {\r\n        this.position.y = value;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setZ\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setZ: function (value)\r\n    {\r\n        this.position.z = value;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.Camera#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n        get: function ()\r\n        {\r\n            return this.position.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.x = value;\r\n            this.update();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.Camera#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n        get: function ()\r\n        {\r\n            return this.position.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.y = value;\r\n            this.update();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.Camera#z\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    z: {\r\n        get: function ()\r\n        {\r\n            return this.position.z;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.z = value;\r\n            this.update();\r\n        }\r\n    }\r\n\r\n});\r\n\r\nCamera.FAR_RANGE = 1.0;\r\nCamera.NEAR_RANGE = 0.0;\r\n\r\nmodule.exports = Camera;\r\n"},"sourceMaps":null,"error":null,"hash":"d2e988f82a08d69b0df00971cfd2f49c","cacheData":{"env":{}}}