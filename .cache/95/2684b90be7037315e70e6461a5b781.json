{"id":"../../node_modules/phaser/src/input/mouse/MouseManager.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../utils/Class","loc":{"line":10,"column":19},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\mouse\\MouseManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../../device/Features","loc":{"line":8,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\mouse\\MouseManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\device\\Features.js"},{"name":"../events","loc":{"line":9,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\mouse\\MouseManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\events\\index.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Features = require('../../device/Features');\r\nvar InputEvents = require('../events');\r\nvar NOOP = require('../../utils/Class');\r\n\r\n//  https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\r\n//  https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\n\r\n/**\r\n * @classdesc\r\n * The Mouse Manager is a helper class that belongs to the Input Manager.\r\n * \r\n * Its role is to listen for native DOM Mouse Events and then pass them onto the Input Manager for further processing.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically.\r\n *\r\n * @class MouseManager\r\n * @memberof Phaser.Input.Mouse\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\r\nvar MouseManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function MouseManager (inputManager)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = inputManager;\r\n\r\n        /**\r\n         * If true the DOM mouse events will have event.preventDefault applied to them, if false they will propagate fully.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#capture\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.capture = true;\r\n\r\n        /**\r\n         * A boolean that controls if the Mouse Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#enabled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = false;\r\n\r\n        /**\r\n         * The Touch Event target, as defined in the Game Config.\r\n         * Typically the canvas to which the game is rendering, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#target\r\n         * @type {any}\r\n         * @since 3.0.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * If the mouse has been pointer locked successfully this will be set to true.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#locked\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.locked = false;\r\n\r\n        /**\r\n         * The Mouse Move Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseMove\r\n         * @type {function}\r\n         * @since 3.10.0\r\n         */\r\n        this.onMouseMove = NOOP;\r\n\r\n        /**\r\n         * The Mouse Down Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseDown\r\n         * @type {function}\r\n         * @since 3.10.0\r\n         */\r\n        this.onMouseDown = NOOP;\r\n\r\n        /**\r\n         * The Mouse Up Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseUp\r\n         * @type {function}\r\n         * @since 3.10.0\r\n         */\r\n        this.onMouseUp = NOOP;\r\n\r\n        /**\r\n         * The Mouse Down Event handler specifically for events on the Window.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseDownWindow\r\n         * @type {function}\r\n         * @since 3.17.0\r\n         */\r\n        this.onMouseDownWindow = NOOP;\r\n\r\n        /**\r\n         * The Mouse Up Event handler specifically for events on the Window.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseUpWindow\r\n         * @type {function}\r\n         * @since 3.17.0\r\n         */\r\n        this.onMouseUpWindow = NOOP;\r\n\r\n        /**\r\n         * The Mouse Over Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseOver\r\n         * @type {function}\r\n         * @since 3.16.0\r\n         */\r\n        this.onMouseOver = NOOP;\r\n\r\n        /**\r\n         * The Mouse Out Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseOut\r\n         * @type {function}\r\n         * @since 3.16.0\r\n         */\r\n        this.onMouseOut = NOOP;\r\n\r\n        /**\r\n         * Internal pointerLockChange handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#pointerLockChange\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.pointerLockChange = NOOP;\r\n\r\n        inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Touch Manager boot process.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#boot\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var config = this.manager.config;\r\n\r\n        this.enabled = config.inputMouse;\r\n        this.target = config.inputMouseEventTarget;\r\n        this.capture = config.inputMouseCapture;\r\n\r\n        if (!this.target)\r\n        {\r\n            this.target = this.manager.game.canvas;\r\n        }\r\n\r\n        if (config.disableContextMenu)\r\n        {\r\n            this.disableContextMenu();\r\n        }\r\n\r\n        if (this.enabled && this.target)\r\n        {\r\n            this.startListeners();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Attempts to disable the context menu from appearing if you right-click on the browser.\r\n     * \r\n     * Works by listening for the `contextmenu` event and prevent defaulting it.\r\n     * \r\n     * Use this if you need to enable right-button mouse support in your game, and the browser\r\n     * menu keeps getting in the way.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#disableContextMenu\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Input.Mouse.MouseManager} This Mouse Manager instance.\r\n     */\r\n    disableContextMenu: function ()\r\n    {\r\n        document.body.addEventListener('contextmenu', function (event)\r\n        {\r\n            event.preventDefault();\r\n            return false;\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * If the browser supports it, you can request that the pointer be locked to the browser window.\r\n     *\r\n     * This is classically known as 'FPS controls', where the pointer can't leave the browser until\r\n     * the user presses an exit key.\r\n     *\r\n     * If the browser successfully enters a locked state, a `POINTER_LOCK_CHANGE_EVENT` will be dispatched,\r\n     * from the games Input Manager, with an `isPointerLocked` property.\r\n     *\r\n     * It is important to note that pointer lock can only be enabled after an 'engagement gesture',\r\n     * see: https://w3c.github.io/pointerlock/#dfn-engagement-gesture.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#requestPointerLock\r\n     * @since 3.0.0\r\n     */\r\n    requestPointerLock: function ()\r\n    {\r\n        if (Features.pointerLock)\r\n        {\r\n            var element = this.target;\r\n\r\n            element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;\r\n\r\n            element.requestPointerLock();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If the browser supports pointer lock, this will request that the pointer lock is released. If\r\n     * the browser successfully enters a locked state, a 'POINTER_LOCK_CHANGE_EVENT' will be\r\n     * dispatched - from the game's input manager - with an `isPointerLocked` property.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#releasePointerLock\r\n     * @since 3.0.0\r\n     */\r\n    releasePointerLock: function ()\r\n    {\r\n        if (Features.pointerLock)\r\n        {\r\n            document.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock;\r\n            document.exitPointerLock();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Starts the Mouse Event listeners running.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#startListeners\r\n     * @since 3.0.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var _this = this;\r\n        var canvas = this.manager.canvas;\r\n        var autoFocus = (window && window.focus && this.manager.game.config.autoFocus);\r\n\r\n        this.onMouseMove = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n\r\n            _this.manager.queueMouseMove(event);\r\n    \r\n            if (_this.capture)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        this.onMouseDown = function (event)\r\n        {\r\n            if (autoFocus)\r\n            {\r\n                window.focus();\r\n            }\r\n\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.queueMouseDown(event);\r\n    \r\n            if (_this.capture && event.target === canvas)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        this.onMouseDownWindow = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n\r\n            if (event.target !== canvas)\r\n            {\r\n                //  Only process the event if the target isn't the canvas\r\n                _this.manager.queueMouseDown(event);\r\n            }\r\n        };\r\n\r\n        this.onMouseUp = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.queueMouseUp(event);\r\n    \r\n            if (_this.capture && event.target === canvas)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        this.onMouseUpWindow = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n\r\n            if (event.target !== canvas)\r\n            {\r\n                //  Only process the event if the target isn't the canvas\r\n                _this.manager.queueMouseUp(event);\r\n            }\r\n        };\r\n\r\n        this.onMouseOver = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.setCanvasOver(event);\r\n        };\r\n\r\n        this.onMouseOut = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n    \r\n            _this.manager.setCanvasOut(event);\r\n        };\r\n\r\n        var target = this.target;\r\n\r\n        if (!target)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var passive = { passive: true };\r\n        var nonPassive = { passive: false };\r\n\r\n        target.addEventListener('mousemove', this.onMouseMove, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('mousedown', this.onMouseDown, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('mouseup', this.onMouseUp, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('mouseover', this.onMouseOver, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('mouseout', this.onMouseOut, (this.capture) ? nonPassive : passive);\r\n\r\n        if (window && this.manager.game.config.inputWindowEvents)\r\n        {\r\n            window.addEventListener('mousedown', this.onMouseDownWindow, nonPassive);\r\n            window.addEventListener('mouseup', this.onMouseUpWindow, nonPassive);\r\n        }\r\n\r\n        if (Features.pointerLock)\r\n        {\r\n            this.pointerLockChange = function (event)\r\n            {\r\n                var element = _this.target;\r\n\r\n                _this.locked = (document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement === element) ? true : false;\r\n        \r\n                _this.manager.queue.push(event);\r\n            };\r\n\r\n            document.addEventListener('pointerlockchange', this.pointerLockChange, true);\r\n            document.addEventListener('mozpointerlockchange', this.pointerLockChange, true);\r\n            document.addEventListener('webkitpointerlockchange', this.pointerLockChange, true);\r\n        }\r\n\r\n        this.enabled = true;\r\n    },\r\n\r\n    /**\r\n     * Stops the Mouse Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#stopListeners\r\n     * @since 3.0.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        var target = this.target;\r\n\r\n        target.removeEventListener('mousemove', this.onMouseMove);\r\n        target.removeEventListener('mousedown', this.onMouseDown);\r\n        target.removeEventListener('mouseup', this.onMouseUp);\r\n        target.removeEventListener('mouseover', this.onMouseOver);\r\n        target.removeEventListener('mouseout', this.onMouseOut);\r\n\r\n        if (window)\r\n        {\r\n            window.removeEventListener('mousedown', this.onMouseDownWindow);\r\n            window.removeEventListener('mouseup', this.onMouseUpWindow);\r\n        }\r\n\r\n        if (Features.pointerLock)\r\n        {\r\n            document.removeEventListener('pointerlockchange', this.pointerLockChange, true);\r\n            document.removeEventListener('mozpointerlockchange', this.pointerLockChange, true);\r\n            document.removeEventListener('webkitpointerlockchange', this.pointerLockChange, true);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Mouse Manager instance.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.target = null;\r\n        this.enabled = false;\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = MouseManager;\r\n"},"sourceMaps":null,"error":null,"hash":"5103e42688b1b1650018d4eff21f946f","cacheData":{"env":{}}}