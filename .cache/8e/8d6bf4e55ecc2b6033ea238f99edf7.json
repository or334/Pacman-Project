{"id":"../../node_modules/phaser/plugins/fbinstant/src/Leaderboard.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../../src/utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\fbinstant\\src\\Leaderboard.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"eventemitter3","loc":{"line":8,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\fbinstant\\src\\Leaderboard.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\eventemitter3\\index.js"},{"name":"./LeaderboardScore","loc":{"line":9,"column":31},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\fbinstant\\src\\Leaderboard.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\plugins\\fbinstant\\src\\LeaderboardScore.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../src/utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar LeaderboardScore = require('./LeaderboardScore');\r\n\r\n/**\r\n * @classdesc\r\n * This class represents one single Leaderboard that belongs to a Facebook Instant Game.\r\n * \r\n * You do not need to instantiate this class directly, it will be created when you use the\r\n * `getLeaderboard()` method of the main plugin.\r\n *\r\n * @class FacebookInstantGamesLeaderboard\r\n * @memberOf Phaser\r\n * @constructor\r\n * @since 3.13.0\r\n * \r\n * @param {Phaser.FacebookInstantGamesPlugin} plugin - A reference to the Facebook Instant Games Plugin.\r\n * @param {any} data - An Instant Game leaderboard instance.\r\n */\r\nvar Leaderboard = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function Leaderboard (plugin, data)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the Facebook Instant Games Plugin.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#plugin\r\n         * @type {Phaser.FacebookInstantGamesPlugin}\r\n         * @since 3.13.0\r\n         */\r\n        this.plugin = plugin;\r\n\r\n        /**\r\n         * An Instant Game leaderboard instance.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#ref\r\n         * @type {any}\r\n         * @since 3.13.0\r\n         */\r\n        this.ref = data;\r\n\r\n        /**\r\n         * The name of the leaderboard.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#name\r\n         * @type {string}\r\n         * @since 3.13.0\r\n         */\r\n        this.name = data.getName();\r\n\r\n        /**\r\n         * The ID of the context that the leaderboard is associated with, or null if the leaderboard is not tied to a particular context.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#contextID\r\n         * @type {string}\r\n         * @since 3.13.0\r\n         */\r\n        this.contextID = data.getContextID();\r\n\r\n        /**\r\n         * The total number of player entries in the leaderboard.\r\n         * This value defaults to zero. Populate it via the `getEntryCount()` method.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#entryCount\r\n         * @type {integer}\r\n         * @since 3.13.0\r\n         */\r\n        this.entryCount = 0;\r\n\r\n        /**\r\n         * The players score object.\r\n         * This value defaults to `null`. Populate it via the `getPlayerScore()` method.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#playerScore\r\n         * @type {LeaderboardScore}\r\n         * @since 3.13.0\r\n         */\r\n        this.playerScore = null;\r\n\r\n        /**\r\n         * The scores in the Leaderboard from the currently requested range.\r\n         * This value defaults to an empty array. Populate it via the `getScores()` method.\r\n         * The contents of this array are reset each time `getScores()` is called.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#scores\r\n         * @type {LeaderboardScore[]}\r\n         * @since 3.13.0\r\n         */\r\n        this.scores = [];\r\n\r\n        this.getEntryCount();\r\n    },\r\n\r\n    /**\r\n     * Fetches the total number of player entries in the leaderboard.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `getentrycount` event along with the count and name of the Leaderboard.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesLeaderboard#getEntryCount\r\n     * @since 3.13.0\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    getEntryCount: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        this.ref.getEntryCountAsync().then(function (count)\r\n        {\r\n            _this.entryCount = count;\r\n\r\n            _this.emit('getentrycount', count, _this.name);\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Updates the player's score. If the player has an existing score, the old score will only be replaced if the new score is better than it.\r\n     * NOTE: If the leaderboard is associated with a specific context, the game must be in that context to set a score for the player.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `setscore` event along with the LeaderboardScore object and the name of the Leaderboard.\r\n     * \r\n     * If the save fails the event will send `null` as the score value.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesLeaderboard#setScore\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} score - The new score for the player. Must be a 64-bit integer number.\r\n     * @param {(string|any)} [data] - Metadata to associate with the stored score. Must be less than 2KB in size. If an object is given it will be passed to `JSON.stringify`.\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    setScore: function (score, data)\r\n    {\r\n        if (data === undefined) { data = ''; }\r\n\r\n        if (typeof data === 'object')\r\n        {\r\n            data = JSON.stringify(data);\r\n        }\r\n\r\n        var _this = this;\r\n\r\n        this.ref.setScoreAsync(score, data).then(function (entry)\r\n        {\r\n            if (entry)\r\n            {\r\n                var score = LeaderboardScore(entry);\r\n\r\n                _this.playerScore = score;\r\n    \r\n                _this.emit('setscore', score, _this.name);\r\n            }\r\n            else\r\n            {\r\n                _this.emit('setscore', null, _this.name);\r\n            }\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the players leaderboard entry and stores it in the `playerScore` property.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `getplayerscore` event along with the score and the name of the Leaderboard.\r\n     * \r\n     * If the player has not yet saved a score, the event will send `null` as the score value, and `playerScore` will be set to `null` as well.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesLeaderboard#getPlayerScore\r\n     * @since 3.13.0\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    getPlayerScore: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        this.ref.getPlayerEntryAsync().then(function (entry)\r\n        {\r\n            if (entry)\r\n            {\r\n                var score = LeaderboardScore(entry);\r\n\r\n                _this.playerScore = score;\r\n    \r\n                _this.emit('getplayerscore', score, _this.name);\r\n            }\r\n            else\r\n            {\r\n                _this.emit('getplayerscore', null, _this.name);\r\n            }\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Retrieves a set of leaderboard entries, ordered by score ranking in the leaderboard.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `getscores` event along with an array of LeaderboardScore entries and the name of the Leaderboard.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesLeaderboard#getScores\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} [count=10] - The number of entries to attempt to fetch from the leaderboard. Currently, up to a maximum of 100 entries may be fetched per query.\r\n     * @param {integer} [offset=0] - The offset from the top of the leaderboard that entries will be fetched from.\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    getScores: function (count, offset)\r\n    {\r\n        if (count === undefined) { count = 10; }\r\n        if (offset === undefined) { offset = 0; }\r\n\r\n        var _this = this;\r\n\r\n        this.ref.getEntriesAsync(count, offset).then(function (entries)\r\n        {\r\n            _this.scores = [];\r\n\r\n            entries.forEach(function (entry)\r\n            {\r\n                _this.scores.push(LeaderboardScore(entry));\r\n            });\r\n\r\n            _this.emit('getscores', _this.scores, _this.name);\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Retrieves a set of leaderboard entries, based on the current player's connected players (including the current player), ordered by local rank within the set of connected players.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `getconnectedscores` event along with an array of LeaderboardScore entries and the name of the Leaderboard.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesLeaderboard#getConnectedScores\r\n     * @since 3.16.0\r\n     * \r\n     * @param {integer} [count=10] - The number of entries to attempt to fetch from the leaderboard. Currently, up to a maximum of 100 entries may be fetched per query.\r\n     * @param {integer} [offset=0] - The offset from the top of the leaderboard that entries will be fetched from.\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    getConnectedScores: function (count, offset)\r\n    {\r\n        if (count === undefined) { count = 10; }\r\n        if (offset === undefined) { offset = 0; }\r\n\r\n        var _this = this;\r\n\r\n        this.ref.getConnectedPlayerEntriesAsync().then(function (entries)\r\n        {\r\n            _this.scores = [];\r\n\r\n            entries.forEach(function (entry)\r\n            {\r\n                _this.scores.push(LeaderboardScore(entry));\r\n            });\r\n\r\n            _this.emit('getconnectedscores', _this.scores, _this.name);\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Leaderboard;\r\n"},"sourceMaps":null,"error":null,"hash":"cce2af98640042b1790a8ffa54c78d66","cacheData":{"env":{}}}