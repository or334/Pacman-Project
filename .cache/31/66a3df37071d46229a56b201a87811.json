{"id":"../../node_modules/phaser/src/geom/circle/Circle.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\circle\\Circle.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./Contains","loc":{"line":8,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\circle\\Circle.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\circle\\Contains.js"},{"name":"./GetPoint","loc":{"line":9,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\circle\\Circle.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\circle\\GetPoint.js"},{"name":"./GetPoints","loc":{"line":10,"column":24},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\circle\\Circle.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\circle\\GetPoints.js"},{"name":"./Random","loc":{"line":11,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\circle\\Circle.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\circle\\Random.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Contains = require('./Contains');\r\nvar GetPoint = require('./GetPoint');\r\nvar GetPoints = require('./GetPoints');\r\nvar Random = require('./Random');\r\n\r\n/**\r\n * @classdesc\r\n * A Circle object.\r\n *\r\n * This is a geometry object, containing numerical values and related methods to inspect and modify them.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render a Circle you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Circle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The x position of the center of the circle.\r\n * @param {number} [y=0] - The y position of the center of the circle.\r\n * @param {number} [radius=0] - The radius of the circle.\r\n */\r\nvar Circle = new Class({\r\n\r\n    initialize:\r\n\r\n    function Circle (x, y, radius)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (radius === undefined) { radius = 0; }\r\n\r\n        /**\r\n         * The x position of the center of the circle.\r\n         *\r\n         * @name Phaser.Geom.Circle#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = x;\r\n\r\n        /**\r\n         * The y position of the center of the circle.\r\n         *\r\n         * @name Phaser.Geom.Circle#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = y;\r\n\r\n        /**\r\n         * The internal radius of the circle.\r\n         *\r\n         * @name Phaser.Geom.Circle#_radius\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._radius = radius;\r\n\r\n        /**\r\n         * The internal diameter of the circle.\r\n         *\r\n         * @name Phaser.Geom.Circle#_diameter\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._diameter = radius * 2;\r\n    },\r\n\r\n    /**\r\n     * Check to see if the Circle contains the given x / y coordinates.\r\n     *\r\n     * @method Phaser.Geom.Circle#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to check within the circle.\r\n     * @param {number} y - The y coordinate to check within the circle.\r\n     *\r\n     * @return {boolean} True if the coordinates are within the circle, otherwise false.\r\n     */\r\n    contains: function (x, y)\r\n    {\r\n        return Contains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * Returns a Point object containing the coordinates of a point on the circumference of the Circle\r\n     * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\r\n     * at 180 degrees around the circle.\r\n     *\r\n     * @method Phaser.Geom.Circle#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [out,$return]\r\n     *\r\n     * @param {number} position - A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the circle.\r\n     * @param {(Phaser.Geom.Point|object)} [out] - An object to store the return values in. If not given a Point object will be created.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point around the circle.\r\n     */\r\n    getPoint: function (position, point)\r\n    {\r\n        return GetPoint(this, position, point);\r\n    },\r\n\r\n    /**\r\n     * Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\r\n     * based on the given quantity or stepRate values.\r\n     *\r\n     * @method Phaser.Geom.Circle#getPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n     *\r\n     * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n     * @param {number} [stepRate] - Sets the quantity by getting the circumference of the circle and dividing it by the stepRate.\r\n     * @param {(array|Phaser.Geom.Point[])} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n     *\r\n     * @return {(array|Phaser.Geom.Point[])} An array of Point objects pertaining to the points around the circumference of the circle.\r\n     */\r\n    getPoints: function (quantity, stepRate, output)\r\n    {\r\n        return GetPoints(this, quantity, stepRate, output);\r\n    },\r\n\r\n    /**\r\n     * Returns a uniformly distributed random point from anywhere within the Circle.\r\n     *\r\n     * @method Phaser.Geom.Circle#getRandomPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [point,$return]\r\n     *\r\n     * @param {(Phaser.Geom.Point|object)} [point] - A Point or point-like object to set the random `x` and `y` values in.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n     */\r\n    getRandomPoint: function (point)\r\n    {\r\n        return Random(this, point);\r\n    },\r\n\r\n    /**\r\n     * Sets the x, y and radius of this circle.\r\n     *\r\n     * @method Phaser.Geom.Circle#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The x position of the center of the circle.\r\n     * @param {number} [y=0] - The y position of the center of the circle.\r\n     * @param {number} [radius=0] - The radius of the circle.\r\n     *\r\n     * @return {Phaser.Geom.Circle} This Circle object.\r\n     */\r\n    setTo: function (x, y, radius)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this._radius = radius;\r\n        this._diameter = radius * 2;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets this Circle to be empty with a radius of zero.\r\n     * Does not change its position.\r\n     *\r\n     * @method Phaser.Geom.Circle#setEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Geom.Circle} This Circle object.\r\n     */\r\n    setEmpty: function ()\r\n    {\r\n        this._radius = 0;\r\n        this._diameter = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the position of this Circle.\r\n     *\r\n     * @method Phaser.Geom.Circle#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The x position of the center of the circle.\r\n     * @param {number} [y=0] - The y position of the center of the circle.\r\n     *\r\n     * @return {Phaser.Geom.Circle} This Circle object.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the Circle is empty: has a radius of zero.\r\n     *\r\n     * @method Phaser.Geom.Circle#isEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} True if the Circle is empty, otherwise false.\r\n     */\r\n    isEmpty: function ()\r\n    {\r\n        return (this._radius <= 0);\r\n    },\r\n\r\n    /**\r\n     * The radius of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#radius\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    radius: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._radius = value;\r\n            this._diameter = value * 2;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The diameter of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#diameter\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    diameter: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._diameter;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._diameter = value;\r\n            this._radius = value * 0.5;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The left position of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#left\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    left: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x - this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.x = value + this._radius;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The right position of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#right\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    right: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x + this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.x = value - this._radius;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The top position of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#top\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    top: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y - this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.y = value + this._radius;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The bottom position of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#bottom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    bottom: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y + this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.y = value - this._radius;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Circle;\r\n"},"sourceMaps":null,"error":null,"hash":"440a85ea64e14316fc1fb3fbebc653c9","cacheData":{"env":{}}}