{"id":"../../node_modules/phaser/plugins/camera3d/src/OrthographicCamera.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"./Camera","loc":{"line":7,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\OrthographicCamera.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\Camera.js"},{"name":"../../../src/utils/Class","loc":{"line":8,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\OrthographicCamera.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../../../src/math/Vector3","loc":{"line":9,"column":22},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\OrthographicCamera.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Vector3.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Camera = require('./Camera');\r\nvar Class = require('../../../src/utils/Class');\r\nvar Vector3 = require('../../../src/math/Vector3');\r\n\r\n//  Local cache vars\r\nvar tmpVec3 = new Vector3();\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class OrthographicCamera\r\n * @extends Phaser.Cameras.Sprite3D.Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {integer} [viewportWidth=0] - [description]\r\n * @param {integer} [viewportHeight=0] - [description]\r\n */\r\nvar OrthographicCamera = new Class({\r\n\r\n    Extends: Camera,\r\n\r\n    initialize:\r\n\r\n    function OrthographicCamera (scene, viewportWidth, viewportHeight)\r\n    {\r\n        if (viewportWidth === undefined) { viewportWidth = 0; }\r\n        if (viewportHeight === undefined) { viewportHeight = 0; }\r\n\r\n        Camera.call(this, scene);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.OrthographicCamera#viewportWidth\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportWidth = viewportWidth;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.OrthographicCamera#viewportHeight\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportHeight = viewportHeight;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.OrthographicCamera#_zoom\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._zoom = 1.0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.OrthographicCamera#near\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.near = 0;\r\n\r\n        this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.OrthographicCamera#setToOrtho\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} yDown - [description]\r\n     * @param {number} [viewportWidth] - [description]\r\n     * @param {number} [viewportHeight] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n     */\r\n    setToOrtho: function (yDown, viewportWidth, viewportHeight)\r\n    {\r\n        if (viewportWidth === undefined) { viewportWidth = this.viewportWidth; }\r\n        if (viewportHeight === undefined) { viewportHeight = this.viewportHeight; }\r\n\r\n        var zoom = this.zoom;\r\n\r\n        this.up.set(0, (yDown) ? -1 : 1, 0);\r\n        this.direction.set(0, 0, (yDown) ? 1 : -1);\r\n        this.position.set(zoom * viewportWidth / 2, zoom * viewportHeight / 2, 0);\r\n\r\n        this.viewportWidth = viewportWidth;\r\n        this.viewportHeight = viewportHeight;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.OrthographicCamera#update\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n     */\r\n    update: function ()\r\n    {\r\n        var w = this.viewportWidth;\r\n        var h = this.viewportHeight;\r\n        var near = Math.abs(this.near);\r\n        var far = Math.abs(this.far);\r\n        var zoom = this.zoom;\r\n\r\n        if (w === 0 || h === 0)\r\n        {\r\n            //  What to do here... hmm?\r\n            return this;\r\n        }\r\n\r\n        this.projection.ortho(\r\n            zoom * -w / 2, zoom * w / 2,\r\n            zoom * -h / 2, zoom * h / 2,\r\n            near,\r\n            far\r\n        );\r\n\r\n        //  Build the view matrix\r\n        tmpVec3.copy(this.position).add(this.direction);\r\n\r\n        this.view.lookAt(this.position, tmpVec3, this.up);\r\n\r\n        //  Projection * view matrix\r\n        this.combined.copy(this.projection).multiply(this.view);\r\n\r\n        //  Invert combined matrix, used for unproject\r\n        this.invProjectionView.copy(this.combined).invert();\r\n\r\n        this.billboardMatrixDirty = true;\r\n\r\n        this.updateChildren();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.OrthographicCamera#zoom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    zoom: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._zoom;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._zoom = value;\r\n            this.update();\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = OrthographicCamera;\r\n"},"sourceMaps":null,"error":null,"hash":"cf44c1c331a09192e788b68ff50851ce","cacheData":{"env":{}}}