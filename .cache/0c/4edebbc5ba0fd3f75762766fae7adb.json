{"id":"../../node_modules/phaser/src/structs/ProcessQueue.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\structs\\ProcessQueue.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A Process Queue maintains three internal lists.\r\n * \r\n * The `pending` list is a selection of items which are due to be made 'active' in the next update.\r\n * The `active` list is a selection of items which are considered active and should be updated.\r\n * The `destroy` list is a selection of items that were active and are awaiting being destroyed in the next update.\r\n *\r\n * When new items are added to a Process Queue they are put in the pending list, rather than being added\r\n * immediately the active list. Equally, items that are removed are put into the destroy list, rather than\r\n * being destroyed immediately. This allows the Process Queue to carefully process each item at a specific, fixed\r\n * time, rather than at the time of the request from the API.\r\n *\r\n * @class ProcessQueue\r\n * @memberof Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n */\r\nvar ProcessQueue = new Class({\r\n\r\n    initialize:\r\n\r\n    function ProcessQueue ()\r\n    {\r\n        /**\r\n         * The `pending` list is a selection of items which are due to be made 'active' in the next update.\r\n         *\r\n         * @genericUse {T[]} - [$type]\r\n         *\r\n         * @name Phaser.Structs.ProcessQueue#_pending\r\n         * @type {Array.<*>}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._pending = [];\r\n\r\n        /**\r\n         * The `active` list is a selection of items which are considered active and should be updated.\r\n         *\r\n         * @genericUse {T[]} - [$type]\r\n         *\r\n         * @name Phaser.Structs.ProcessQueue#_active\r\n         * @type {Array.<*>}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._active = [];\r\n\r\n        /**\r\n         * The `destroy` list is a selection of items that were active and are awaiting being destroyed in the next update.\r\n         *\r\n         * @genericUse {T[]} - [$type]\r\n         *\r\n         * @name Phaser.Structs.ProcessQueue#_destroy\r\n         * @type {Array.<*>}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._destroy = [];\r\n\r\n        /**\r\n         * The total number of items awaiting processing.\r\n         *\r\n         * @name Phaser.Structs.ProcessQueue#_toProcess\r\n         * @type {integer}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._toProcess = 0;\r\n    },\r\n\r\n    /**\r\n     * Adds a new item to the Process Queue.\r\n     * The item is added to the pending list and made active in the next update.\r\n     *\r\n     * @method Phaser.Structs.ProcessQueue#add\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [item]\r\n     * @genericUse {Phaser.Structs.ProcessQueue.<T>} - [$return]\r\n     *\r\n     * @param {*} item - The item to add to the queue.\r\n     *\r\n     * @return {Phaser.Structs.ProcessQueue} This Process Queue object.\r\n     */\r\n    add: function (item)\r\n    {\r\n        this._pending.push(item);\r\n\r\n        this._toProcess++;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes an item from the Process Queue.\r\n     * The item is added to the pending destroy and fully removed in the next update.\r\n     *\r\n     * @method Phaser.Structs.ProcessQueue#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [item]\r\n     * @genericUse {Phaser.Structs.ProcessQueue.<T>} - [$return]\r\n     *\r\n     * @param {*} item - The item to be removed from the queue.\r\n     *\r\n     * @return {Phaser.Structs.ProcessQueue} This Process Queue object.\r\n     */\r\n    remove: function (item)\r\n    {\r\n        this._destroy.push(item);\r\n\r\n        this._toProcess++;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Update this queue. First it will process any items awaiting destruction, and remove them.\r\n     * \r\n     * Then it will check to see if there are any items pending insertion, and move them to an\r\n     * active state. Finally, it will return a list of active items for further processing.\r\n     *\r\n     * @method Phaser.Structs.ProcessQueue#update\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T[]} - [$return]\r\n     *\r\n     * @return {Array.<*>} A list of active items.\r\n     */\r\n    update: function ()\r\n    {\r\n        if (this._toProcess === 0)\r\n        {\r\n            //  Quick bail\r\n            return this._active;\r\n        }\r\n\r\n        var list = this._destroy;\r\n        var active = this._active;\r\n        var i;\r\n        var item;\r\n\r\n        //  Clear the 'destroy' list\r\n        for (i = 0; i < list.length; i++)\r\n        {\r\n            item = list[i];\r\n\r\n            //  Remove from the 'active' array\r\n            var idx = active.indexOf(item);\r\n\r\n            if (idx !== -1)\r\n            {\r\n                active.splice(idx, 1);\r\n            }\r\n        }\r\n\r\n        list.length = 0;\r\n\r\n        //  Process the pending addition list\r\n        //  This stops callbacks and out of sync events from populating the active array mid-way during an update\r\n\r\n        list = this._pending;\r\n\r\n        for (i = 0; i < list.length; i++)\r\n        {\r\n            item = list[i];\r\n\r\n            this._active.push(item);\r\n        }\r\n\r\n        list.length = 0;\r\n\r\n        this._toProcess = 0;\r\n\r\n        //  The owner of this queue can now safely do whatever it needs to with the active list\r\n        return this._active;\r\n    },\r\n\r\n    /**\r\n     * Returns the current list of active items.\r\n     *\r\n     * @method Phaser.Structs.ProcessQueue#getActive\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T[]} - [$return]\r\n     *\r\n     * @return {Array.<*>} A list of active items.\r\n     */\r\n    getActive: function ()\r\n    {\r\n        return this._active;\r\n    },\r\n\r\n    /**\r\n     * Immediately destroys this process queue, clearing all of its internal arrays and resetting the process totals.\r\n     *\r\n     * @method Phaser.Structs.ProcessQueue#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this._toProcess = 0;\r\n\r\n        this._pending = [];\r\n        this._active = [];\r\n        this._destroy = [];\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = ProcessQueue;\r\n"},"sourceMaps":null,"error":null,"hash":"37749ba54353e0ed12c697feb80975e7","cacheData":{"env":{}}}