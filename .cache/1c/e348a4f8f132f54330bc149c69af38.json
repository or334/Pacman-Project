{"id":"../../node_modules/phaser/src/physics/matter-js/MatterPhysics.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./Factory","loc":{"line":8,"column":22},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\Factory.js"},{"name":"../../utils/object/GetFastValue","loc":{"line":9,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetFastValue.js"},{"name":"../../utils/object/GetValue","loc":{"line":10,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetValue.js"},{"name":"./lib/plugins/MatterAttractors","loc":{"line":11,"column":31},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\plugins\\MatterAttractors.js"},{"name":"./lib/core/Matter","loc":{"line":12,"column":24},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Matter.js"},{"name":"./lib/plugins/MatterWrap","loc":{"line":13,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\plugins\\MatterWrap.js"},{"name":"../../utils/object/Merge","loc":{"line":14,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\Merge.js"},{"name":"./lib/core/Plugin","loc":{"line":15,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Plugin.js"},{"name":"../../plugins/PluginCache","loc":{"line":16,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\plugins\\PluginCache.js"},{"name":"../../scene/events","loc":{"line":17,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\events\\index.js"},{"name":"./World","loc":{"line":18,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\World.js"},{"name":"./lib/geometry/Vertices","loc":{"line":19,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\geometry\\Vertices.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Factory = require('./Factory');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar MatterAttractors = require('./lib/plugins/MatterAttractors');\r\nvar MatterLib = require('./lib/core/Matter');\r\nvar MatterWrap = require('./lib/plugins/MatterWrap');\r\nvar Merge = require('../../utils/object/Merge');\r\nvar Plugin = require('./lib/core/Plugin');\r\nvar PluginCache = require('../../plugins/PluginCache');\r\nvar SceneEvents = require('../../scene/events');\r\nvar World = require('./World');\r\nvar Vertices = require('./lib/geometry/Vertices');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class MatterPhysics\r\n * @memberof Phaser.Physics.Matter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\r\nvar MatterPhysics = new Class({\r\n\r\n    initialize:\r\n\r\n    function MatterPhysics (scene)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#config\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = this.getConfig();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#world\r\n         * @type {Phaser.Physics.Matter.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#add\r\n         * @type {Phaser.Physics.Matter.Factory}\r\n         * @since 3.0.0\r\n         */\r\n        this.add;\r\n\r\n        /**\r\n         * A reference to the `Matter.Vertices` module which contains methods for creating and manipulating sets of vertices.\r\n         * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\r\n         * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#verts\r\n         * @type {MatterJS.Vertices}\r\n         * @since 3.14.0\r\n         */\r\n        this.verts = Vertices;\r\n\r\n        //  Matter plugins\r\n\r\n        if (GetValue(this.config, 'plugins.attractors', false))\r\n        {\r\n            Plugin.register(MatterAttractors);\r\n            Plugin.use(MatterLib, MatterAttractors);\r\n        }\r\n\r\n        if (GetValue(this.config, 'plugins.wrap', false))\r\n        {\r\n            Plugin.register(MatterWrap);\r\n            Plugin.use(MatterLib, MatterWrap);\r\n        }\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n        scene.sys.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.world = new World(this.scene, this.config);\r\n        this.add = new Factory(this.world);\r\n\r\n        this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (!this.world)\r\n        {\r\n            this.world = new World(this.scene, this.config);\r\n            this.add = new Factory(this.world);\r\n        }\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on(SceneEvents.UPDATE, this.world.update, this.world);\r\n        eventEmitter.on(SceneEvents.POST_UPDATE, this.world.postUpdate, this.world);\r\n        eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#getConfig\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} [description]\r\n     */\r\n    getConfig: function ()\r\n    {\r\n        var gameConfig = this.systems.game.config.physics;\r\n        var sceneConfig = this.systems.settings.physics;\r\n\r\n        var config = Merge(\r\n            GetFastValue(sceneConfig, 'matter', {}),\r\n            GetFastValue(gameConfig, 'matter', {})\r\n        );\r\n\r\n        return config;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#enableAttractorPlugin\r\n     * @since 3.0.0\r\n     * \r\n     * @return {Phaser.Physics.Matter.MatterPhysics} This Matter Physics instance.\r\n     */\r\n    enableAttractorPlugin: function ()\r\n    {\r\n        Plugin.register(MatterAttractors);\r\n        Plugin.use(MatterLib, MatterAttractors);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#enableWrapPlugin\r\n     * @since 3.0.0\r\n     * \r\n     * @return {Phaser.Physics.Matter.MatterPhysics} This Matter Physics instance.\r\n     */\r\n    enableWrapPlugin: function ()\r\n    {\r\n        Plugin.register(MatterWrap);\r\n        Plugin.use(MatterLib, MatterWrap);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} The Matter World object.\r\n     */\r\n    pause: function ()\r\n    {\r\n        return this.world.pause();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} The Matter World object.\r\n     */\r\n    resume: function ()\r\n    {\r\n        return this.world.resume();\r\n    },\r\n\r\n    /**\r\n     * Sets the Matter Engine to run at fixed timestep of 60Hz and enables `autoUpdate`.\r\n     * If you have set a custom `getDelta` function then this will override it.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#set60Hz\r\n     * @since 3.4.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.MatterPhysics} This Matter Physics instance.\r\n     */\r\n    set60Hz: function ()\r\n    {\r\n        this.world.getDelta = this.world.update60Hz;\r\n        this.world.autoUpdate = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the Matter Engine to run at fixed timestep of 30Hz and enables `autoUpdate`.\r\n     * If you have set a custom `getDelta` function then this will override it.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#set30Hz\r\n     * @since 3.4.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.MatterPhysics} This Matter Physics instance.\r\n     */\r\n    set30Hz: function ()\r\n    {\r\n        this.world.getDelta = this.world.update30Hz;\r\n        this.world.autoUpdate = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Manually advances the physics simulation by one iteration.\r\n     * \r\n     * You can optionally pass in the `delta` and `correction` values to be used by Engine.update.\r\n     * If undefined they use the Matter defaults of 60Hz and no correction.\r\n     * \r\n     * Calling `step` directly bypasses any checks of `enabled` or `autoUpdate`.\r\n     * \r\n     * It also ignores any custom `getDelta` functions, as you should be passing the delta\r\n     * value in to this call.\r\n     *\r\n     * You can adjust the number of iterations that Engine.update performs internally.\r\n     * Use the Scene Matter Physics config object to set the following properties:\r\n     *\r\n     * positionIterations (defaults to 6)\r\n     * velocityIterations (defaults to 4)\r\n     * constraintIterations (defaults to 2)\r\n     *\r\n     * Adjusting these values can help performance in certain situations, depending on the physics requirements\r\n     * of your game.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#step\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} [delta=16.666] - [description]\r\n     * @param {number} [correction=1] - [description]\r\n     */\r\n    step: function (delta, correction)\r\n    {\r\n        this.world.step(delta, correction);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off(SceneEvents.UPDATE, this.world.update, this.world);\r\n        eventEmitter.off(SceneEvents.POST_UPDATE, this.world.postUpdate, this.world);\r\n        eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n\r\n        this.add.destroy();\r\n        this.world.destroy();\r\n\r\n        this.add = null;\r\n        this.world = null;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('MatterPhysics', MatterPhysics, 'matterPhysics');\r\n\r\nmodule.exports = MatterPhysics;\r\n"},"sourceMaps":null,"error":null,"hash":"8f63ef66df0f899e68a34367dc44ed65","cacheData":{"env":{}}}