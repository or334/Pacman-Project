{"id":"../../node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\staticlayer\\StaticTilemapLayer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../../gameobjects/components","loc":{"line":8,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\staticlayer\\StaticTilemapLayer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\components\\index.js"},{"name":"../../const","loc":{"line":9,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\staticlayer\\StaticTilemapLayer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\const.js"},{"name":"../../gameobjects/GameObject","loc":{"line":10,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\staticlayer\\StaticTilemapLayer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\GameObject.js"},{"name":"./StaticTilemapLayerRender","loc":{"line":11,"column":39},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\staticlayer\\StaticTilemapLayer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\staticlayer\\StaticTilemapLayerRender.js"},{"name":"../components","loc":{"line":12,"column":32},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\staticlayer\\StaticTilemapLayer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\components\\index.js"},{"name":"../../gameobjects/components/TransformMatrix","loc":{"line":13,"column":30},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\staticlayer\\StaticTilemapLayer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\components\\TransformMatrix.js"},{"name":"../../renderer/webgl/Utils","loc":{"line":14,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\staticlayer\\StaticTilemapLayer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\webgl\\Utils.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar CONST = require('../../const');\r\nvar GameObject = require('../../gameobjects/GameObject');\r\nvar StaticTilemapLayerRender = require('./StaticTilemapLayerRender');\r\nvar TilemapComponents = require('../components');\r\nvar TransformMatrix = require('../../gameobjects/components/TransformMatrix');\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * @classdesc\r\n * A Static Tilemap Layer is a Game Object that renders LayerData from a Tilemap when used in combination\r\n * with one, or more, Tilesets.\r\n *\r\n * A Static Tilemap Layer is optimized for rendering speed over flexibility. You cannot apply per-tile\r\n * effects like tint or alpha, or change the tiles or tilesets the layer uses.\r\n * \r\n * Use a Static Tilemap Layer instead of a Dynamic Tilemap Layer when you don't need tile manipulation features.\r\n *\r\n * @class StaticTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\r\nvar StaticTilemapLayer = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        StaticTilemapLayerRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function StaticTilemapLayer (scene, tilemap, layerIndex, tileset, x, y)\r\n    {\r\n        GameObject.call(this, scene, 'StaticTilemapLayer');\r\n\r\n        /**\r\n         * Used internally by physics system to perform fast type checks.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#isTilemap\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.isTilemap = true;\r\n\r\n        /**\r\n         * The Tilemap that this layer is a part of.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#tilemap\r\n         * @type {Phaser.Tilemaps.Tilemap}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = tilemap;\r\n\r\n        /**\r\n         * The index of the LayerData associated with this layer.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#layerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.layerIndex = layerIndex;\r\n\r\n        /**\r\n         * The LayerData associated with this layer. LayerData can only be associated with one\r\n         * tilemap layer.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#layer\r\n         * @type {Phaser.Tilemaps.LayerData}\r\n         * @since 3.0.0\r\n         */\r\n        this.layer = tilemap.layers[layerIndex];\r\n\r\n        // Link the LayerData with this static tilemap layer\r\n        this.layer.tilemapLayer = this;\r\n\r\n        /**\r\n         * The Tileset/s associated with this layer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array of Tileset objects, previously it was a single reference.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#tileset\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileset = [];\r\n\r\n        /**\r\n         * Used internally by the Canvas renderer.\r\n         * This holds the tiles that are visible within the camera in the last frame.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#culledTiles\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.culledTiles = [];\r\n\r\n        /**\r\n         * Canvas only.\r\n         * \r\n         * You can control if the Cameras should cull tiles before rendering them or not.\r\n         * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n         *\r\n         * However, there are some instances when you may wish to disable this, and toggling this flag allows\r\n         * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#skipCull\r\n         * @type {boolean}\r\n         * @since 3.12.0\r\n         */\r\n        this.skipCull = false;\r\n\r\n        /**\r\n         * Canvas only.\r\n         * \r\n         * The total number of tiles drawn by the renderer in the last frame.\r\n         * \r\n         * This only works when rending with Canvas.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#tilesDrawn\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.12.0\r\n         */\r\n        this.tilesDrawn = 0;\r\n\r\n        /**\r\n         * Canvas only.\r\n         * \r\n         * The total number of tiles in this layer. Updated every frame.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#tilesTotal\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.12.0\r\n         */\r\n        this.tilesTotal = this.layer.width * this.layer.height;\r\n\r\n        /**\r\n         * Canvas only.\r\n         * \r\n         * The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#cullPaddingX\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.12.0\r\n         */\r\n        this.cullPaddingX = 1;\r\n\r\n        /**\r\n         * Canvas only.\r\n         * \r\n         * The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#cullPaddingY\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.12.0\r\n         */\r\n        this.cullPaddingY = 1;\r\n\r\n        /**\r\n         * Canvas only.\r\n         * \r\n         * The callback that is invoked when the tiles are culled.\r\n         *\r\n         * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\r\n         *\r\n         * It will be sent 3 arguments:\r\n         *\r\n         * 1. The Phaser.Tilemaps.LayerData object for this Layer\r\n         * 2. The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\r\n         * 3. A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\r\n         *\r\n         * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#cullCallback\r\n         * @type {function}\r\n         * @since 3.12.0\r\n         */\r\n        this.cullCallback = TilemapComponents.CullTiles;\r\n\r\n        /**\r\n         * A reference to the renderer.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#renderer\r\n         * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.renderer = scene.sys.game.renderer;\r\n\r\n        /**\r\n         * An array of vertex buffer objects, used by the WebGL renderer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single instance.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexBuffer\r\n         * @type {WebGLBuffer[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexBuffer = [];\r\n\r\n        /**\r\n         * An array of ArrayBuffer objects, used by the WebGL renderer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single instance.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#bufferData\r\n         * @type {ArrayBuffer[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.bufferData = [];\r\n\r\n        /**\r\n         * An array of Float32 Array objects, used by the WebGL renderer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single instance.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexViewF32\r\n         * @type {Float32Array[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexViewF32 = [];\r\n\r\n        /**\r\n         * An array of Uint32 Array objects, used by the WebGL renderer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single instance.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexViewU32\r\n         * @type {Uint32Array[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexViewU32 = [];\r\n\r\n        /**\r\n         * An array of booleans, used by the WebGL renderer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single boolean.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#dirty\r\n         * @type {boolean[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.dirty = [];\r\n\r\n        /**\r\n         * An array of integers, used by the WebGL renderer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array, where each element maps to a Tileset instance. Previously it was a single integer.\r\n         * \r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexCount\r\n         * @type {integer[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexCount = [];\r\n\r\n        /**\r\n         * The rendering (draw) order of the tiles in this layer.\r\n         * \r\n         * The default is 0 which is 'right-down', meaning it will draw the tiles starting from the top-left,\r\n         * drawing to the right and then moving down to the next row.\r\n         * \r\n         * The draw orders are:\r\n         * \r\n         * 0 = right-down\r\n         * 1 = left-down\r\n         * 2 = right-up\r\n         * 3 = left-up\r\n         * \r\n         * This can be changed via the `setRenderOrder` method.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#_renderOrder\r\n         * @type {integer}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._renderOrder = 0;\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#_tempMatrix\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.14.0\r\n         */\r\n        this._tempMatrix = new TransformMatrix();\r\n\r\n        /**\r\n         * An array holding the mapping between the tile indexes and the tileset they belong to.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#gidMap\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.14.0\r\n         */\r\n        this.gidMap = [];\r\n\r\n        this.setTilesets(tileset);\r\n        this.setAlpha(this.layer.alpha);\r\n        this.setPosition(x, y);\r\n        this.setOrigin();\r\n        this.setSize(tilemap.tileWidth * this.layer.width, tilemap.tileHeight * this.layer.height);\r\n\r\n        this.updateVBOData();\r\n\r\n        this.initPipeline('TextureTintPipeline');\r\n\r\n        if (scene.sys.game.config.renderType === CONST.WEBGL)\r\n        {\r\n            scene.sys.game.renderer.onContextRestored(function ()\r\n            {\r\n                this.updateVBOData();\r\n            }, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Populates the internal `tileset` array with the Tileset references this Layer requires for rendering.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setTilesets\r\n     * @private\r\n     * @since 3.14.0\r\n     * \r\n     * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n     */\r\n    setTilesets: function (tilesets)\r\n    {\r\n        var gidMap = [];\r\n        var setList = [];\r\n        var map = this.tilemap;\r\n\r\n        if (!Array.isArray(tilesets))\r\n        {\r\n            tilesets = [ tilesets ];\r\n        }\r\n\r\n        for (var i = 0; i < tilesets.length; i++)\r\n        {\r\n            var tileset = tilesets[i];\r\n\r\n            if (typeof tileset === 'string')\r\n            {\r\n                tileset = map.getTileset(tileset);\r\n            }\r\n\r\n            if (tileset)\r\n            {\r\n                setList.push(tileset);\r\n\r\n                var s = tileset.firstgid;\r\n\r\n                for (var t = 0; t < tileset.total; t++)\r\n                {\r\n                    gidMap[s + t] = tileset;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.gidMap = gidMap;\r\n        this.tileset = setList;\r\n    },\r\n\r\n    /**\r\n     * Prepares the VBO data arrays for population by the `upload` method.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#updateVBOData\r\n     * @private\r\n     * @since 3.14.0\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    updateVBOData: function ()\r\n    {\r\n        for (var i = 0; i < this.tileset.length; i++)\r\n        {\r\n            this.dirty[i] = true;\r\n            this.vertexCount[i] = 0;\r\n            this.vertexBuffer[i] = null;\r\n            this.bufferData[i] = null;\r\n            this.vertexViewF32[i] = null;\r\n            this.vertexViewU32[i] = null;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Upload the tile data to a VBO.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#upload\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera to render to.\r\n     * @param {integer} tilesetIndex - The tileset index.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    upload: function (camera, tilesetIndex)\r\n    {\r\n        var renderer = this.renderer;\r\n        var gl = renderer.gl;\r\n\r\n        var pipeline = renderer.pipelines.TextureTintPipeline;\r\n\r\n        if (this.dirty[tilesetIndex])\r\n        {\r\n            var tileset = this.tileset[tilesetIndex];\r\n            var mapWidth = this.layer.width;\r\n            var mapHeight = this.layer.height;\r\n            var width = tileset.image.source[0].width;\r\n            var height = tileset.image.source[0].height;\r\n            var mapData = this.layer.data;\r\n            var tile;\r\n            var row;\r\n            var col;\r\n            var renderOrder = this._renderOrder;\r\n            var minTileIndex = tileset.firstgid;\r\n            var maxTileIndex = tileset.firstgid + tileset.total;\r\n    \r\n            var vertexBuffer = this.vertexBuffer[tilesetIndex];\r\n            var bufferData = this.bufferData[tilesetIndex];\r\n            var vOffset = -1;\r\n            var bufferSize = (mapWidth * mapHeight) * pipeline.vertexSize * 6;\r\n\r\n            this.vertexCount[tilesetIndex] = 0;\r\n    \r\n            if (bufferData === null)\r\n            {\r\n                bufferData = new ArrayBuffer(bufferSize);\r\n\r\n                this.bufferData[tilesetIndex] = bufferData;\r\n\r\n                this.vertexViewF32[tilesetIndex] = new Float32Array(bufferData);\r\n                this.vertexViewU32[tilesetIndex] = new Uint32Array(bufferData);\r\n            }\r\n    \r\n            if (renderOrder === 0)\r\n            {\r\n                //  right-down\r\n        \r\n                for (row = 0; row < mapHeight; row++)\r\n                {\r\n                    for (col = 0; col < mapWidth; col++)\r\n                    {\r\n                        tile = mapData[row][col];\r\n        \r\n                        if (!tile || tile.index < minTileIndex || tile.index > maxTileIndex || !tile.visible)\r\n                        {\r\n                            continue;\r\n                        }\r\n    \r\n                        vOffset = this.batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex);\r\n                    }\r\n                }\r\n            }\r\n            else if (renderOrder === 1)\r\n            {\r\n                //  left-down\r\n        \r\n                for (row = 0; row < mapHeight; row++)\r\n                {\r\n                    for (col = mapWidth - 1; col >= 0; col--)\r\n                    {\r\n                        tile = mapData[row][col];\r\n        \r\n                        if (!tile || tile.index < minTileIndex || tile.index > maxTileIndex || !tile.visible)\r\n                        {\r\n                            continue;\r\n                        }\r\n    \r\n                        vOffset = this.batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex);\r\n                    }\r\n                }\r\n            }\r\n            else if (renderOrder === 2)\r\n            {\r\n                //  right-up\r\n        \r\n                for (row = mapHeight - 1; row >= 0; row--)\r\n                {\r\n                    for (col = 0; col < mapWidth; col++)\r\n                    {\r\n                        tile = mapData[row][col];\r\n        \r\n                        if (!tile || tile.index < minTileIndex || tile.index > maxTileIndex || !tile.visible)\r\n                        {\r\n                            continue;\r\n                        }\r\n    \r\n                        vOffset = this.batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex);\r\n                    }\r\n                }\r\n            }\r\n            else if (renderOrder === 3)\r\n            {\r\n                //  left-up\r\n        \r\n                for (row = mapHeight - 1; row >= 0; row--)\r\n                {\r\n                    for (col = mapWidth - 1; col >= 0; col--)\r\n                    {\r\n                        tile = mapData[row][col];\r\n        \r\n                        if (!tile || tile.index < minTileIndex || tile.index > maxTileIndex || !tile.visible)\r\n                        {\r\n                            continue;\r\n                        }\r\n    \r\n                        vOffset = this.batchTile(vOffset, tile, tileset, width, height, camera, tilesetIndex);\r\n                    }\r\n                }\r\n            }\r\n        \r\n            this.dirty[tilesetIndex] = false;\r\n    \r\n            if (vertexBuffer === null)\r\n            {\r\n                vertexBuffer = renderer.createVertexBuffer(bufferData, gl.STATIC_DRAW);\r\n    \r\n                this.vertexBuffer[tilesetIndex] = vertexBuffer;\r\n            }\r\n            else\r\n            {\r\n                renderer.setVertexBuffer(vertexBuffer);\r\n    \r\n                gl.bufferSubData(gl.ARRAY_BUFFER, 0, bufferData);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add a single tile into the batch.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#batchTile\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {integer} vOffset - The vertex offset.\r\n     * @param {any} tile - The tile being rendered.\r\n     * @param {any} tileset - The tileset being used for rendering.\r\n     * @param {integer} width - The width of the tileset image in pixels.\r\n     * @param {integer} height - The height of the tileset image in pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera the layer is being rendered with.\r\n     * @param {integer} tilesetIndex - The tileset index.\r\n     *\r\n     * @return {integer} The new vOffset value.\r\n     */\r\n    batchTile: function (vOffset, tile, tileset, width, height, camera, tilesetIndex)\r\n    {\r\n        var texCoords = tileset.getTileTextureCoordinates(tile.index);\r\n\r\n        if (!texCoords)\r\n        {\r\n            return vOffset;\r\n        }\r\n\r\n        var tileWidth = tileset.tileWidth;\r\n        var tileHeight = tileset.tileHeight;\r\n\r\n        var halfTileWidth = tileWidth / 2;\r\n        var halfTileHeight = tileHeight / 2;\r\n\r\n        var u0 = texCoords.x / width;\r\n        var v0 = texCoords.y / height;\r\n        var u1 = (texCoords.x + tileWidth) / width;\r\n        var v1 = (texCoords.y + tileHeight) / height;\r\n\r\n        var matrix = this._tempMatrix;\r\n\r\n        var x = -halfTileWidth;\r\n        var y = -halfTileHeight;\r\n\r\n        if (tile.flipX)\r\n        {\r\n            tileWidth *= -1;\r\n            x += tileset.tileWidth;\r\n        }\r\n\r\n        if (tile.flipY)\r\n        {\r\n            tileHeight *= -1;\r\n            y += tileset.tileHeight;\r\n        }\r\n\r\n        var xw = x + tileWidth;\r\n        var yh = y + tileHeight;\r\n\r\n        matrix.applyITRS(halfTileWidth + tile.pixelX, halfTileHeight + tile.pixelY, tile.rotation, 1, 1);\r\n\r\n        var tint = Utils.getTintAppendFloatAlpha(0xffffff, camera.alpha * this.alpha * tile.alpha);\r\n\r\n        var tx0 = matrix.getX(x, y);\r\n        var ty0 = matrix.getY(x, y);\r\n\r\n        var tx1 = matrix.getX(x, yh);\r\n        var ty1 = matrix.getY(x, yh);\r\n\r\n        var tx2 = matrix.getX(xw, yh);\r\n        var ty2 = matrix.getY(xw, yh);\r\n\r\n        var tx3 = matrix.getX(xw, y);\r\n        var ty3 = matrix.getY(xw, y);\r\n\r\n        if (camera.roundPixels)\r\n        {\r\n            tx0 = Math.round(tx0);\r\n            ty0 = Math.round(ty0);\r\n\r\n            tx1 = Math.round(tx1);\r\n            ty1 = Math.round(ty1);\r\n\r\n            tx2 = Math.round(tx2);\r\n            ty2 = Math.round(ty2);\r\n\r\n            tx3 = Math.round(tx3);\r\n            ty3 = Math.round(ty3);\r\n        }\r\n\r\n        var vertexViewF32 = this.vertexViewF32[tilesetIndex];\r\n        var vertexViewU32 = this.vertexViewU32[tilesetIndex];\r\n\r\n        vertexViewF32[++vOffset] = tx0;\r\n        vertexViewF32[++vOffset] = ty0;\r\n        vertexViewF32[++vOffset] = u0;\r\n        vertexViewF32[++vOffset] = v0;\r\n        vertexViewF32[++vOffset] = 0;\r\n        vertexViewU32[++vOffset] = tint;\r\n\r\n        vertexViewF32[++vOffset] = tx1;\r\n        vertexViewF32[++vOffset] = ty1;\r\n        vertexViewF32[++vOffset] = u0;\r\n        vertexViewF32[++vOffset] = v1;\r\n        vertexViewF32[++vOffset] = 0;\r\n        vertexViewU32[++vOffset] = tint;\r\n\r\n        vertexViewF32[++vOffset] = tx2;\r\n        vertexViewF32[++vOffset] = ty2;\r\n        vertexViewF32[++vOffset] = u1;\r\n        vertexViewF32[++vOffset] = v1;\r\n        vertexViewF32[++vOffset] = 0;\r\n        vertexViewU32[++vOffset] = tint;\r\n\r\n        vertexViewF32[++vOffset] = tx0;\r\n        vertexViewF32[++vOffset] = ty0;\r\n        vertexViewF32[++vOffset] = u0;\r\n        vertexViewF32[++vOffset] = v0;\r\n        vertexViewF32[++vOffset] = 0;\r\n        vertexViewU32[++vOffset] = tint;\r\n\r\n        vertexViewF32[++vOffset] = tx2;\r\n        vertexViewF32[++vOffset] = ty2;\r\n        vertexViewF32[++vOffset] = u1;\r\n        vertexViewF32[++vOffset] = v1;\r\n        vertexViewF32[++vOffset] = 0;\r\n        vertexViewU32[++vOffset] = tint;\r\n\r\n        vertexViewF32[++vOffset] = tx3;\r\n        vertexViewF32[++vOffset] = ty3;\r\n        vertexViewF32[++vOffset] = u1;\r\n        vertexViewF32[++vOffset] = v0;\r\n        vertexViewF32[++vOffset] = 0;\r\n        vertexViewU32[++vOffset] = tint;\r\n\r\n        this.vertexCount[tilesetIndex] += 6;\r\n\r\n        return vOffset;\r\n    },\r\n\r\n    /**\r\n     * Sets the rendering (draw) order of the tiles in this layer.\r\n     * \r\n     * The default is 'right-down', meaning it will order the tiles starting from the top-left,\r\n     * drawing to the right and then moving down to the next row.\r\n     * \r\n     * The draw orders are:\r\n     * \r\n     * 0 = right-down\r\n     * 1 = left-down\r\n     * 2 = right-up\r\n     * 3 = left-up\r\n     * \r\n     * Setting the render order does not change the tiles or how they are stored in the layer,\r\n     * it purely impacts the order in which they are rendered.\r\n     * \r\n     * You can provide either an integer (0 to 3), or the string version of the order.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setRenderOrder\r\n     * @since 3.12.0\r\n     *\r\n     * @param {(integer|string)} renderOrder - The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setRenderOrder: function (renderOrder)\r\n    {\r\n        var orders = [ 'right-down', 'left-down', 'right-up', 'left-up' ];\r\n\r\n        if (typeof renderOrder === 'string')\r\n        {\r\n            renderOrder = orders.indexOf(renderOrder);\r\n        }\r\n\r\n        if (renderOrder >= 0 && renderOrder < 4)\r\n        {\r\n            this._renderOrder = renderOrder;\r\n\r\n            for (var i = 0; i < this.tileset.length; i++)\r\n            {\r\n                this.dirty[i] = true;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate.\r\n     * @param {integer} tileY - The y coordinate.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY)\r\n    {\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {Phaser.Types.GameObjects.Sprite.SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera)\r\n    {\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Returns the tiles in the given layer that are within the cameras viewport.\r\n     * This is used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        return this.cullCallback(this.layer, camera, this.culledTiles);\r\n    },\r\n\r\n    /**\r\n     * Canvas only.\r\n     * \r\n     * You can control if the Cameras should cull tiles before rendering them or not.\r\n     * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n     *\r\n     * However, there are some instances when you may wish to disable this.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setSkipCull\r\n     * @since 3.12.0\r\n     *\r\n     * @param {boolean} [value=true] - Set to `true` to stop culling tiles. Set to `false` to enable culling again.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setSkipCull: function (value)\r\n    {\r\n        if (value === undefined) { value = true; }\r\n\r\n        this.skipCull = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Canvas only.\r\n     * \r\n     * When a Camera culls the tiles in this layer it does so using its view into the world, building up a\r\n     * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\r\n     * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\r\n     * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\r\n     * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCullPadding\r\n     * @since 3.12.0\r\n     *\r\n     * @param {integer} [paddingX=1] - The amount of extra horizontal tiles to add to the cull check padding.\r\n     * @param {integer} [paddingY=1] - The amount of extra vertical tiles to add to the cull check padding.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setCullPadding: function (paddingX, paddingY)\r\n    {\r\n        if (paddingX === undefined) { paddingX = 1; }\r\n        if (paddingY === undefined) { paddingY = 1; }\r\n\r\n        this.cullPaddingX = paddingX;\r\n        this.cullPaddingY = paddingY;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n     * bottom-right. Otherwise it scans from the top-left.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse)\r\n    {\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [tileY=0] - The topmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile}\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The leftmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [tileY=0] - The topmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The leftmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [tileY=0] - The topmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull)\r\n    {\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n     * were invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera)\r\n    {\r\n        return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The leftmost tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The topmost tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The leftmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {number} worldY - The topmost tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {number} width - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {number} height - How many tiles high from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from in tile coordinates.\r\n     * @param {integer} tileY - Y position to get the tile from in tile coordinates.\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    hasTileAt: function (tileX, tileY)\r\n    {\r\n        return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The X coordinate of the world position.\r\n     * @param {number} worldY - The Y coordinate of the world position.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera)\r\n    {\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {Phaser.Types.Tilemaps.StyleConfig} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    renderDebug: function (graphics, styleConfig)\r\n    {\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should\r\n     * be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes to have a\r\n     * collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The leftmost tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} tileY - The topmost tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} width - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} height - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} [callbackContext] - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The X coordinate, in tile coordinates.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the world values from the tile index.\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldX: function (tileX, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - The Y coordinate, in tile coordinates.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the world values from the tile index.\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldY: function (tileY, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The X coordinate, in tile coordinates.\r\n     * @param {integer} tileY - The Y coordinate, in tile coordinates.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given, a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the world values from the tile index.\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The X coordinate, in world pixels.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.]\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - The Y coordinate, in world pixels.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The X coordinate, in world pixels.\r\n     * @param {number} worldY - The Y coordinate, in world pixels.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given, a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Destroys this StaticTilemapLayer and removes its link to the associated LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#destroy\r\n     * @since 3.0.0\r\n     * \r\n     * @param {boolean} [removeFromTilemap=true] - Remove this layer from the parent Tilemap?\r\n     */\r\n    destroy: function (removeFromTilemap)\r\n    {\r\n        if (removeFromTilemap === undefined) { removeFromTilemap = true; }\r\n\r\n        // Uninstall this layer only if it is still installed on the LayerData object\r\n        if (this.layer.tilemapLayer === this)\r\n        {\r\n            this.layer.tilemapLayer = undefined;\r\n        }\r\n\r\n        if (removeFromTilemap)\r\n        {\r\n            this.tilemap.removeLayer(this);\r\n        }\r\n\r\n        this.tilemap = undefined;\r\n        this.layer = undefined;\r\n        this.culledTiles.length = 0;\r\n        this.cullCallback = null;\r\n\r\n        for (var i = 0; i < this.tileset.length; i++)\r\n        {\r\n            this.dirty[i] = true;\r\n            this.vertexCount[i] = 0;\r\n            this.vertexBuffer[i] = null;\r\n            this.bufferData[i] = null;\r\n            this.vertexViewF32[i] = null;\r\n            this.vertexViewU32[i] = null;\r\n        }\r\n\r\n        this.gidMap = [];\r\n        this.tileset = [];\r\n\r\n        GameObject.prototype.destroy.call(this);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = StaticTilemapLayer;\r\n"},"sourceMaps":null,"error":null,"hash":"171b5759453d3b8e54c53272d7eb626b","cacheData":{"env":{}}}