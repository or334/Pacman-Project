{"id":"../../node_modules/phaser/src/physics/matter-js/lib/factory/Bodies.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../geometry/Vertices","loc":{"line":16,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\factory\\Bodies.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\geometry\\Vertices.js"},{"name":"../core/Common","loc":{"line":17,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\factory\\Bodies.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Common.js"},{"name":"../body/Body","loc":{"line":18,"column":19},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\factory\\Bodies.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\body\\Body.js"},{"name":"../geometry/Bounds","loc":{"line":19,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\factory\\Bodies.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\geometry\\Bounds.js"},{"name":"../geometry/Vector","loc":{"line":20,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\factory\\Bodies.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\geometry\\Vector.js"},{"name":"../../poly-decomp","loc":{"line":21,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\factory\\Bodies.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\poly-decomp\\index.js"}],"generated":{"js":"/**\r\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \r\n* with commonly used body configurations (such as rectangles, circles and other polygons).\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Bodies\r\n*/\r\n\r\n// TODO: true circle bodies\r\n\r\nvar Bodies = {};\r\n\r\nmodule.exports = Bodies;\r\n\r\nvar Vertices = require('../geometry/Vertices');\r\nvar Common = require('../core/Common');\r\nvar Body = require('../body/Body');\r\nvar Bounds = require('../geometry/Bounds');\r\nvar Vector = require('../geometry/Vector');\r\nvar decomp = require('../../poly-decomp');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new rigid body model with a rectangle hull. \r\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\r\n     * @method rectangle\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @param {object} [options]\r\n     * @return {body} A new rectangle body\r\n     */\r\n    Bodies.rectangle = function(x, y, width, height, options) {\r\n        options = options || {};\r\n\r\n        var rectangle = { \r\n            label: 'Rectangle Body',\r\n            position: { x: x, y: y },\r\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\r\n        };\r\n\r\n        if (options.chamfer) {\r\n            var chamfer = options.chamfer;\r\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \r\n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\r\n            delete options.chamfer;\r\n        }\r\n\r\n        return Body.create(Common.extend({}, rectangle, options));\r\n    };\r\n    \r\n    /**\r\n     * Creates a new rigid body model with a trapezoid hull. \r\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\r\n     * @method trapezoid\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @param {number} slope\r\n     * @param {object} [options]\r\n     * @return {body} A new trapezoid body\r\n     */\r\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\r\n        options = options || {};\r\n\r\n        slope *= 0.5;\r\n        var roof = (1 - (slope * 2)) * width;\r\n        \r\n        var x1 = width * slope,\r\n            x2 = x1 + roof,\r\n            x3 = x2 + x1,\r\n            verticesPath;\r\n\r\n        if (slope < 0.5) {\r\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\r\n        } else {\r\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\r\n        }\r\n\r\n        var trapezoid = { \r\n            label: 'Trapezoid Body',\r\n            position: { x: x, y: y },\r\n            vertices: Vertices.fromPath(verticesPath)\r\n        };\r\n\r\n        if (options.chamfer) {\r\n            var chamfer = options.chamfer;\r\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \r\n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\r\n            delete options.chamfer;\r\n        }\r\n\r\n        return Body.create(Common.extend({}, trapezoid, options));\r\n    };\r\n\r\n    /**\r\n     * Creates a new rigid body model with a circle hull. \r\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\r\n     * @method circle\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} radius\r\n     * @param {object} [options]\r\n     * @param {number} [maxSides]\r\n     * @return {body} A new circle body\r\n     */\r\n    Bodies.circle = function(x, y, radius, options, maxSides) {\r\n        options = options || {};\r\n\r\n        var circle = {\r\n            label: 'Circle Body',\r\n            circleRadius: radius\r\n        };\r\n        \r\n        // approximate circles with polygons until true circles implemented in SAT\r\n        maxSides = maxSides || 25;\r\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\r\n\r\n        // optimisation: always use even number of sides (half the number of unique axes)\r\n        if (sides % 2 === 1)\r\n            sides += 1;\r\n\r\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\r\n    };\r\n\r\n    /**\r\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \r\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\r\n     * @method polygon\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} sides\r\n     * @param {number} radius\r\n     * @param {object} [options]\r\n     * @return {body} A new regular polygon body\r\n     */\r\n    Bodies.polygon = function(x, y, sides, radius, options) {\r\n        options = options || {};\r\n\r\n        if (sides < 3)\r\n            return Bodies.circle(x, y, radius, options);\r\n\r\n        var theta = 2 * Math.PI / sides,\r\n            path = '',\r\n            offset = theta * 0.5;\r\n\r\n        for (var i = 0; i < sides; i += 1) {\r\n            var angle = offset + (i * theta),\r\n                xx = Math.cos(angle) * radius,\r\n                yy = Math.sin(angle) * radius;\r\n\r\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\r\n        }\r\n\r\n        var polygon = { \r\n            label: 'Polygon Body',\r\n            position: { x: x, y: y },\r\n            vertices: Vertices.fromPath(path)\r\n        };\r\n\r\n        if (options.chamfer) {\r\n            var chamfer = options.chamfer;\r\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \r\n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\r\n            delete options.chamfer;\r\n        }\r\n\r\n        return Body.create(Common.extend({}, polygon, options));\r\n    };\r\n\r\n    /**\r\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\r\n     * If the vertices are convex, they will pass through as supplied.\r\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\r\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\r\n     * By default the decomposition will discard collinear edges (to improve performance).\r\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\r\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\r\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\r\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\r\n     * @method fromVertices\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param [[vector]] vertexSets\r\n     * @param {object} [options]\r\n     * @param {bool} [flagInternal=false]\r\n     * @param {number} [removeCollinear=0.01]\r\n     * @param {number} [minimumArea=10]\r\n     * @return {body}\r\n     */\r\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\r\n        var body,\r\n            parts,\r\n            isConvex,\r\n            vertices,\r\n            i,\r\n            j,\r\n            k,\r\n            v,\r\n            z;\r\n\r\n        options = options || {};\r\n        parts = [];\r\n\r\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\r\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\r\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\r\n\r\n        if (!decomp) {\r\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\r\n        }\r\n\r\n        // ensure vertexSets is an array of arrays\r\n        if (!Common.isArray(vertexSets[0])) {\r\n            vertexSets = [vertexSets];\r\n        }\r\n\r\n        for (v = 0; v < vertexSets.length; v += 1) {\r\n            vertices = vertexSets[v];\r\n            isConvex = Vertices.isConvex(vertices);\r\n\r\n            if (isConvex || !decomp) {\r\n                if (isConvex) {\r\n                    vertices = Vertices.clockwiseSort(vertices);\r\n                } else {\r\n                    // fallback to convex hull when decomposition is not possible\r\n                    vertices = Vertices.hull(vertices);\r\n                }\r\n\r\n                parts.push({\r\n                    position: { x: x, y: y },\r\n                    vertices: vertices\r\n                });\r\n            } else {\r\n                // initialise a decomposition\r\n                var concave = vertices.map(function(vertex) {\r\n                    return [vertex.x, vertex.y];\r\n                });\r\n\r\n                // vertices are concave and simple, we can decompose into parts\r\n                decomp.makeCCW(concave);\r\n                if (removeCollinear !== false)\r\n                    decomp.removeCollinearPoints(concave, removeCollinear);\r\n\r\n                // use the quick decomposition algorithm (Bayazit)\r\n                var decomposed = decomp.quickDecomp(concave);\r\n\r\n                // for each decomposed chunk\r\n                for (i = 0; i < decomposed.length; i++) {\r\n                    var chunk = decomposed[i];\r\n\r\n                    // convert vertices into the correct structure\r\n                    var chunkVertices = chunk.map(function(vertices) {\r\n                        return {\r\n                            x: vertices[0],\r\n                            y: vertices[1]\r\n                        };\r\n                    });\r\n\r\n                    // skip small chunks\r\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\r\n                        continue;\r\n\r\n                    // create a compound part\r\n                    parts.push({\r\n                        position: Vertices.centre(chunkVertices),\r\n                        vertices: chunkVertices\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // create body parts\r\n        for (i = 0; i < parts.length; i++) {\r\n            parts[i] = Body.create(Common.extend(parts[i], options));\r\n        }\r\n\r\n        // flag internal edges (coincident part edges)\r\n        if (flagInternal) {\r\n            var coincident_max_dist = 5;\r\n\r\n            for (i = 0; i < parts.length; i++) {\r\n                var partA = parts[i];\r\n\r\n                for (j = i + 1; j < parts.length; j++) {\r\n                    var partB = parts[j];\r\n\r\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\r\n                        var pav = partA.vertices,\r\n                            pbv = partB.vertices;\r\n\r\n                        // iterate vertices of both parts\r\n                        for (k = 0; k < partA.vertices.length; k++) {\r\n                            for (z = 0; z < partB.vertices.length; z++) {\r\n                                // find distances between the vertices\r\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\r\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\r\n\r\n                                // if both vertices are very close, consider the edge concident (internal)\r\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\r\n                                    pav[k].isInternal = true;\r\n                                    pbv[z].isInternal = true;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (parts.length > 1) {\r\n            // create the parent body to be returned, that contains generated compound parts\r\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\r\n            Body.setPosition(body, { x: x, y: y });\r\n\r\n            return body;\r\n        } else {\r\n            return parts[0];\r\n        }\r\n    };\r\n\r\n})();\r\n"},"sourceMaps":null,"error":null,"hash":"6605070989cf7f5e8202e6b547ad7789","cacheData":{"env":{}}}