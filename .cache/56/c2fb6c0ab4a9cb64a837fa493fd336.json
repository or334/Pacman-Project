{"id":"../../node_modules/phaser/src/animations/AnimationManager.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"./Animation","loc":{"line":7,"column":24},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\AnimationManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\Animation.js"},{"name":"../utils/Class","loc":{"line":8,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\AnimationManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../structs/Map","loc":{"line":9,"column":24},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\AnimationManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\structs\\Map.js"},{"name":"eventemitter3","loc":{"line":10,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\AnimationManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\eventemitter3\\index.js"},{"name":"./events","loc":{"line":11,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\AnimationManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\events\\index.js"},{"name":"../core/events","loc":{"line":12,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\AnimationManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\events\\index.js"},{"name":"../utils/object/GetValue","loc":{"line":13,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\AnimationManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetValue.js"},{"name":"../utils/string/Pad","loc":{"line":14,"column":18},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\AnimationManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\string\\Pad.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Animation = require('./Animation');\r\nvar Class = require('../utils/Class');\r\nvar CustomMap = require('../structs/Map');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar GameEvents = require('../core/events');\r\nvar GetValue = require('../utils/object/GetValue');\r\nvar Pad = require('../utils/string/Pad');\r\n\r\n/**\r\n * @classdesc\r\n * The Animation Manager.\r\n *\r\n * Animations are managed by the global Animation Manager. This is a singleton class that is\r\n * responsible for creating and delivering animations and their corresponding data to all Game Objects.\r\n * Unlike plugins it is owned by the Game instance, not the Scene.\r\n *\r\n * Sprites and other Game Objects get the data they need from the AnimationManager.\r\n *\r\n * @class AnimationManager\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Animations\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance.\r\n */\r\nvar AnimationManager = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function AnimationManager (game)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the Phaser.Game instance.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#game\r\n         * @type {Phaser.Game}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * A reference to the Texture Manager.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#textureManager\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.textureManager = null;\r\n\r\n        /**\r\n         * The global time scale of the Animation Manager.\r\n         *\r\n         * This scales the time delta between two frames, thus influencing the speed of time for the Animation Manager.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#globalTimeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.globalTimeScale = 1;\r\n\r\n        /**\r\n         * The Animations registered in the Animation Manager.\r\n         *\r\n         * This map should be modified with the {@link #add} and {@link #create} methods of the Animation Manager.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#anims\r\n         * @type {Phaser.Structs.Map.<string, Phaser.Animations.Animation>}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.anims = new CustomMap();\r\n\r\n        /**\r\n         * Whether the Animation Manager is paused along with all of its Animations.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#paused\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.paused = false;\r\n\r\n        /**\r\n         * The name of this Animation Manager.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#name\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.name = 'AnimationManager';\r\n\r\n        game.events.once(GameEvents.BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * Registers event listeners after the Game boots.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#boot\r\n     * @listens Phaser.Core.Events#DESTROY\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.textureManager = this.game.textures;\r\n\r\n        this.game.events.once(GameEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * Adds an existing Animation to the Animation Manager.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#add\r\n     * @fires Phaser.Animations.Events#ADD_ANIMATION\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key under which the Animation should be added. The Animation will be updated with it. Must be unique.\r\n     * @param {Phaser.Animations.Animation} animation - The Animation which should be added to the Animation Manager.\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    add: function (key, animation)\r\n    {\r\n        if (this.anims.has(key))\r\n        {\r\n            console.warn('Animation key exists: ' + key);\r\n\r\n            return;\r\n        }\r\n\r\n        animation.key = key;\r\n\r\n        this.anims.set(key, animation);\r\n\r\n        this.emit(Events.ADD_ANIMATION, key, animation);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the given key is already in use within the Animation Manager or not.\r\n     * \r\n     * Animations are global. Keys created in one scene can be used from any other Scene in your game. They are not Scene specific.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#exists\r\n     * @since 3.16.0\r\n     *\r\n     * @param {string} key - The key of the Animation to check.\r\n     *\r\n     * @return {boolean} `true` if the Animation already exists in the Animation Manager, or `false` if the key is available.\r\n     */\r\n    exists: function (key)\r\n    {\r\n        return this.anims.has(key);\r\n    },\r\n\r\n    /**\r\n     * Creates a new Animation and adds it to the Animation Manager.\r\n     * \r\n     * Animations are global. Once created, you can use them in any Scene in your game. They are not Scene specific.\r\n     * \r\n     * If an invalid key is given this method will return `false`.\r\n     * \r\n     * If you pass the key of an animation that already exists in the Animation Manager, that animation will be returned.\r\n     * \r\n     * A brand new animation is only created if the key is valid and not already in use.\r\n     * \r\n     * If you wish to re-use an existing key, call `AnimationManager.remove` first, then this method.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#create\r\n     * @fires Phaser.Animations.Events#ADD_ANIMATION\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Animations.Animation} config - The configuration settings for the Animation.\r\n     *\r\n     * @return {(Phaser.Animations.Animation|false)} The Animation that was created, or `false` is the key is already in use.\r\n     */\r\n    create: function (config)\r\n    {\r\n        var key = config.key;\r\n\r\n        var anim = false;\r\n\r\n        if (key)\r\n        {\r\n            anim = this.get(key);\r\n\r\n            if (!anim)\r\n            {\r\n                anim = new Animation(this, key, config);\r\n\r\n                this.anims.set(key, anim);\r\n        \r\n                this.emit(Events.ADD_ANIMATION, key, anim);\r\n            }\r\n        }\r\n\r\n        return anim;\r\n    },\r\n\r\n    /**\r\n     * Loads this Animation Manager's Animations and settings from a JSON object.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#fromJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Types.Animations.JSONAnimations|Phaser.Types.Animations.JSONAnimation)} data - The JSON object to parse.\r\n     * @param {boolean} [clearCurrentAnimations=false] - If set to `true`, the current animations will be removed (`anims.clear()`). If set to `false` (default), the animations in `data` will be added.\r\n     *\r\n     * @return {Phaser.Animations.Animation[]} An array containing all of the Animation objects that were created as a result of this call.\r\n     */\r\n    fromJSON: function (data, clearCurrentAnimations)\r\n    {\r\n        if (clearCurrentAnimations === undefined) { clearCurrentAnimations = false; }\r\n\r\n        if (clearCurrentAnimations)\r\n        {\r\n            this.anims.clear();\r\n        }\r\n\r\n        //  Do we have a String (i.e. from JSON, or an Object?)\r\n        if (typeof data === 'string')\r\n        {\r\n            data = JSON.parse(data);\r\n        }\r\n\r\n        var output = [];\r\n\r\n        //  Array of animations, or a single animation?\r\n        if (data.hasOwnProperty('anims') && Array.isArray(data.anims))\r\n        {\r\n            for (var i = 0; i < data.anims.length; i++)\r\n            {\r\n                output.push(this.create(data.anims[i]));\r\n            }\r\n\r\n            if (data.hasOwnProperty('globalTimeScale'))\r\n            {\r\n                this.globalTimeScale = data.globalTimeScale;\r\n            }\r\n        }\r\n        else if (data.hasOwnProperty('key') && data.type === 'frame')\r\n        {\r\n            output.push(this.create(data));\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#generateFrameNames\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key for the texture containing the animation frames.\r\n     * @param {Phaser.Types.Animations.GenerateFrameNames} [config] - The configuration object for the animation frame names.\r\n     *\r\n     * @return {Phaser.Types.Animations.AnimationFrame[]} The array of {@link Phaser.Types.Animations.AnimationFrame} objects.\r\n     */\r\n    generateFrameNames: function (key, config)\r\n    {\r\n        var prefix = GetValue(config, 'prefix', '');\r\n        var start = GetValue(config, 'start', 0);\r\n        var end = GetValue(config, 'end', 0);\r\n        var suffix = GetValue(config, 'suffix', '');\r\n        var zeroPad = GetValue(config, 'zeroPad', 0);\r\n        var out = GetValue(config, 'outputArray', []);\r\n        var frames = GetValue(config, 'frames', false);\r\n\r\n        var texture = this.textureManager.get(key);\r\n\r\n        if (!texture)\r\n        {\r\n            return out;\r\n        }\r\n\r\n        var diff = (start < end) ? 1 : -1;\r\n\r\n        //  Adjust because we use i !== end in the for loop\r\n        end += diff;\r\n\r\n        var i;\r\n        var frame;\r\n\r\n        if (!config)\r\n        {\r\n            //  Use every frame in the atlas?\r\n            frames = texture.getFrameNames();\r\n\r\n            for (i = 0; i < frames.length; i++)\r\n            {\r\n                out.push({ key: key, frame: frames[i] });\r\n            }\r\n        }\r\n        else if (Array.isArray(frames))\r\n        {\r\n            //  Have they provided their own custom frame sequence array?\r\n            for (i = 0; i < frames.length; i++)\r\n            {\r\n                frame = prefix + Pad(frames[i], zeroPad, '0', 1) + suffix;\r\n\r\n                if (texture.has(frame))\r\n                {\r\n                    out.push({ key: key, frame: frame });\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (i = start; i !== end; i += diff)\r\n            {\r\n                frame = prefix + Pad(i, zeroPad, '0', 1) + suffix;\r\n\r\n                if (texture.has(frame))\r\n                {\r\n                    out.push({ key: key, frame: frame });\r\n                }\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Generate an array of {@link Phaser.Types.Animations.AnimationFrame} objects from a texture key and configuration object.\r\n     *\r\n     * Generates objects with numbered frame names, as configured by the given {@link Phaser.Types.Animations.GenerateFrameNumbers}.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#generateFrameNumbers\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key for the texture containing the animation frames.\r\n     * @param {Phaser.Types.Animations.GenerateFrameNumbers} config - The configuration object for the animation frames.\r\n     *\r\n     * @return {Phaser.Types.Animations.AnimationFrame[]} The array of {@link Phaser.Types.Animations.AnimationFrame} objects.\r\n     */\r\n    generateFrameNumbers: function (key, config)\r\n    {\r\n        var startFrame = GetValue(config, 'start', 0);\r\n        var endFrame = GetValue(config, 'end', -1);\r\n        var firstFrame = GetValue(config, 'first', false);\r\n        var out = GetValue(config, 'outputArray', []);\r\n        var frames = GetValue(config, 'frames', false);\r\n\r\n        var texture = this.textureManager.get(key);\r\n\r\n        if (!texture)\r\n        {\r\n            return out;\r\n        }\r\n\r\n        if (firstFrame && texture.has(firstFrame))\r\n        {\r\n            out.push({ key: key, frame: firstFrame });\r\n        }\r\n\r\n        var i;\r\n\r\n        //  Have they provided their own custom frame sequence array?\r\n        if (Array.isArray(frames))\r\n        {\r\n            for (i = 0; i < frames.length; i++)\r\n            {\r\n                if (texture.has(frames[i]))\r\n                {\r\n                    out.push({ key: key, frame: frames[i] });\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  No endFrame then see if we can get it\r\n            if (endFrame === -1)\r\n            {\r\n                endFrame = texture.frameTotal;\r\n            }\r\n\r\n            var diff = (startFrame < endFrame) ? 1 : -1;\r\n\r\n            //  Adjust because we use i !== end in the for loop\r\n            endFrame += diff;\r\n\r\n            for (i = startFrame; i !== endFrame; i += diff)\r\n            {\r\n                if (texture.has(i))\r\n                {\r\n                    out.push({ key: key, frame: i });\r\n                }\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Get an Animation.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the Animation to retrieve.\r\n     *\r\n     * @return {Phaser.Animations.Animation} The Animation.\r\n     */\r\n    get: function (key)\r\n    {\r\n        return this.anims.get(key);\r\n    },\r\n\r\n    /**\r\n     * Load an Animation into a Game Object's Animation Component.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#load\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object to load the animation into.\r\n     * @param {string} key - The key of the animation to load.\r\n     * @param {(string|integer)} [startFrame] - The name of a start frame to set on the loaded animation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object with the animation loaded into it.\r\n     */\r\n    load: function (child, key, startFrame)\r\n    {\r\n        var anim = this.get(key);\r\n\r\n        if (anim)\r\n        {\r\n            anim.load(child, startFrame);\r\n        }\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * Pause all animations.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#pauseAll\r\n     * @fires Phaser.Animations.Events#PAUSE_ALL\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    pauseAll: function ()\r\n    {\r\n        if (!this.paused)\r\n        {\r\n            this.paused = true;\r\n\r\n            this.emit(Events.PAUSE_ALL);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Play an animation on the given Game Objects that have an Animation Component.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#play\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the animation to play on the Game Object.\r\n     * @param {Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]} child - The Game Objects to play the animation on.\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    play: function (key, child)\r\n    {\r\n        if (!Array.isArray(child))\r\n        {\r\n            child = [ child ];\r\n        }\r\n\r\n        var anim = this.get(key);\r\n\r\n        if (!anim)\r\n        {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < child.length; i++)\r\n        {\r\n            child[i].anims.play(key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Remove an animation.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#remove\r\n     * @fires Phaser.Animations.Events#REMOVE_ANIMATION\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the animation to remove.\r\n     *\r\n     * @return {Phaser.Animations.Animation} [description]\r\n     */\r\n    remove: function (key)\r\n    {\r\n        var anim = this.get(key);\r\n\r\n        if (anim)\r\n        {\r\n            this.emit(Events.REMOVE_ANIMATION, key, anim);\r\n\r\n            this.anims.delete(key);\r\n        }\r\n\r\n        return anim;\r\n    },\r\n\r\n    /**\r\n     * Resume all paused animations.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#resumeAll\r\n     * @fires Phaser.Animations.Events#RESUME_ALL\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    resumeAll: function ()\r\n    {\r\n        if (this.paused)\r\n        {\r\n            this.paused = false;\r\n\r\n            this.emit(Events.RESUME_ALL);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes an array of Game Objects that have an Animation Component and then\r\n     * starts the given animation playing on them, each one offset by the\r\n     * `stagger` amount given to this method.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#staggerPlay\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n     *\r\n     * @param {string} key - The key of the animation to play on the Game Objects.\r\n     * @param {Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]} children - An array of Game Objects to play the animation on. They must have an Animation Component.\r\n     * @param {number} [stagger=0] - The amount of time, in milliseconds, to offset each play time by.\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    staggerPlay: function (key, children, stagger)\r\n    {\r\n        if (stagger === undefined) { stagger = 0; }\r\n\r\n        if (!Array.isArray(children))\r\n        {\r\n            children = [ children ];\r\n        }\r\n\r\n        var anim = this.get(key);\r\n\r\n        if (!anim)\r\n        {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            children[i].anims.delayedPlay(stagger * i, key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Get the animation data as javascript object by giving key, or get the data of all animations as array of objects, if key wasn't provided.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - [description]\r\n     *\r\n     * @return {Phaser.Types.Animations.JSONAnimations} [description]\r\n     */\r\n    toJSON: function (key)\r\n    {\r\n        if (key !== undefined && key !== '')\r\n        {\r\n            return this.anims.get(key).toJSON();\r\n        }\r\n        else\r\n        {\r\n            var output = {\r\n                anims: [],\r\n                globalTimeScale: this.globalTimeScale\r\n            };\r\n\r\n            this.anims.each(function (animationKey, animation)\r\n            {\r\n                output.anims.push(animation.toJSON());\r\n            });\r\n\r\n            return output;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroy this Animation Manager and clean up animation definitions and references to other objects.\r\n     * This method should not be called directly. It will be called automatically as a response to a `destroy` event from the Phaser.Game instance.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.anims.clear();\r\n\r\n        this.textureManager = null;\r\n\r\n        this.game = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = AnimationManager;\r\n"},"sourceMaps":null,"error":null,"hash":"a07781a450daa100d61b8f7c6a2f22f2","cacheData":{"env":{}}}