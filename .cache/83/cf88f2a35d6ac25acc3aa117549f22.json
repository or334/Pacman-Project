{"id":"../../node_modules/phaser/src/display/color/RGBStringToColor.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"./Color","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\color\\RGBStringToColor.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\color\\Color.js"}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2019 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar Color = require('./Color');\n\n/**\n * Converts a CSS 'web' string into a Phaser Color object.\n * \n * The web string can be in the format `'rgb(r,g,b)'` or `'rgba(r,g,b,a)'` where r/g/b are in the range [0..255] and a is in the range [0..1].\n *\n * @function Phaser.Display.Color.RGBStringToColor\n * @since 3.0.0\n *\n * @param {string} rgb - The CSS format color string, using the `rgb` or `rgba` format.\n *\n * @return {Phaser.Display.Color} A Color object.\n */\nvar RGBStringToColor = function (rgb)\n{\n    var color = new Color();\n\n    var result = (/^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d+(?:\\.\\d+)?))?\\s*\\)$/).exec(rgb.toLowerCase());\n\n    if (result)\n    {\n        var r = parseInt(result[1], 10);\n        var g = parseInt(result[2], 10);\n        var b = parseInt(result[3], 10);\n        var a = (result[4] !== undefined) ? parseFloat(result[4]) : 1;\n\n        color.setTo(r, g, b, a * 255);\n    }\n\n    return color;\n};\n\nmodule.exports = RGBStringToColor;\n"},"sourceMaps":null,"error":null,"hash":"a50d9691bd2e8ad86aba30f740a865fb","cacheData":{"env":{}}}