{"id":"../../node_modules/phaser/src/tilemaps/parsers/tiled/ParseTilesets.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../Tileset","loc":{"line":7,"column":22},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\tiled\\ParseTilesets.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\Tileset.js"},{"name":"../../ImageCollection","loc":{"line":8,"column":30},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\tiled\\ParseTilesets.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\ImageCollection.js"},{"name":"./ParseObject","loc":{"line":9,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\tiled\\ParseTilesets.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\parsers\\tiled\\ParseObject.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Tileset = require('../../Tileset');\r\nvar ImageCollection = require('../../ImageCollection');\r\nvar ParseObject = require('./ParseObject');\r\n\r\n/**\r\n * Tilesets & Image Collections\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseTilesets\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - [description]\r\n *\r\n * @return {object} [description]\r\n */\r\nvar ParseTilesets = function (json)\r\n{\r\n    var tilesets = [];\r\n    var imageCollections = [];\r\n    var lastSet = null;\r\n    var stringID;\r\n\r\n    for (var i = 0; i < json.tilesets.length; i++)\r\n    {\r\n        //  name, firstgid, width, height, margin, spacing, properties\r\n        var set = json.tilesets[i];\r\n\r\n        if (set.source)\r\n        {\r\n            console.warn('Phaser can\\'t load external tilesets. Use the Embed Tileset button and then export the map again.');\r\n        }\r\n        else if (set.image)\r\n        {\r\n            var newSet = new Tileset(set.name, set.firstgid, set.tilewidth, set.tileheight, set.margin, set.spacing);\r\n\r\n            if (json.version > 1)\r\n            {\r\n                // Tiled 1.2+\r\n\r\n                if (Array.isArray(set.tiles))\r\n                {\r\n                    var tiles = {};\r\n                    var props = {};\r\n\r\n                    for (var t = 0; t < set.tiles.length; t++)\r\n                    {\r\n                        var tile = set.tiles[t];\r\n\r\n                        //  Convert tileproperties\r\n                        if (tile.properties)\r\n                        {\r\n                            var newPropData = {};\r\n\r\n                            tile.properties.forEach(function (propData)\r\n                            {\r\n                                newPropData[propData['name']] = propData['value'];\r\n                            });\r\n\r\n                            props[tile.id] = newPropData;\r\n                        }\r\n\r\n                        //  Convert objectgroup\r\n                        if (tile.objectgroup)\r\n                        {\r\n                            tiles[tile.id] = { objectgroup: tile.objectgroup };\r\n\r\n                            if (tile.objectgroup.objects)\r\n                            {\r\n                                var parsedObjects2 = tile.objectgroup.objects.map(\r\n                                    function (obj) { return ParseObject(obj); }\r\n                                );\r\n\r\n                                tiles[tile.id].objectgroup.objects = parsedObjects2;\r\n                            }\r\n                        }\r\n\r\n                        // Copy animation data\r\n                        if (tile.animation)\r\n                        {\r\n                            if (tiles.hasOwnProperty(tile.id))\r\n                            {\r\n                                tiles[tile.id].animation = tile.animation;\r\n                            }\r\n                            else\r\n                            {\r\n                                tiles[tile.id] = { animation: tile.animation };\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    newSet.tileData = tiles;\r\n                    newSet.tileProperties = props;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // Tiled 1\r\n\r\n                // Properties stored per-tile in object with string indexes starting at \"0\"\r\n                if (set.tileproperties)\r\n                {\r\n                    newSet.tileProperties = set.tileproperties;\r\n                }\r\n\r\n                // Object & terrain shapes stored per-tile in object with string indexes starting at \"0\"\r\n                if (set.tiles)\r\n                {\r\n                    newSet.tileData = set.tiles;\r\n\r\n                    // Parse the objects into Phaser format to match handling of other Tiled objects\r\n                    for (stringID in newSet.tileData)\r\n                    {\r\n                        var objectGroup = newSet.tileData[stringID].objectgroup;\r\n                        if (objectGroup && objectGroup.objects)\r\n                        {\r\n                            var parsedObjects1 = objectGroup.objects.map(\r\n                                function (obj) { return ParseObject(obj); }\r\n                            );\r\n                            newSet.tileData[stringID].objectgroup.objects = parsedObjects1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // For a normal sliced tileset the row/count/size information is computed when updated.\r\n            // This is done (again) after the image is set.\r\n            newSet.updateTileData(set.imagewidth, set.imageheight);\r\n\r\n            tilesets.push(newSet);\r\n        }\r\n        else\r\n        {\r\n            var newCollection = new ImageCollection(set.name, set.firstgid, set.tilewidth,\r\n                set.tileheight, set.margin, set.spacing, set.properties);\r\n\r\n            for (stringID in set.tiles)\r\n            {\r\n                var image = set.tiles[stringID].image;\r\n                var gid = set.firstgid + parseInt(stringID, 10);\r\n                newCollection.addImage(gid, image);\r\n            }\r\n\r\n            imageCollections.push(newCollection);\r\n        }\r\n\r\n        //  We've got a new Tileset, so set the lastgid into the previous one\r\n        if (lastSet)\r\n        {\r\n            lastSet.lastgid = set.firstgid - 1;\r\n        }\r\n\r\n        lastSet = set;\r\n    }\r\n\r\n    return { tilesets: tilesets, imageCollections: imageCollections };\r\n};\r\n\r\nmodule.exports = ParseTilesets;\r\n"},"sourceMaps":null,"error":null,"hash":"05841dcbbc7ed5937f5d71db4547708a","cacheData":{"env":{}}}