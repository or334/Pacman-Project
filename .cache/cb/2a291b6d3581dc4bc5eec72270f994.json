{"id":"../../node_modules/phaser/src/input/gamepad/GamepadPlugin.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\gamepad\\GamepadPlugin.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"eventemitter3","loc":{"line":8,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\gamepad\\GamepadPlugin.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\eventemitter3\\index.js"},{"name":"./events","loc":{"line":9,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\gamepad\\GamepadPlugin.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\gamepad\\events\\index.js"},{"name":"./Gamepad","loc":{"line":10,"column":22},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\gamepad\\GamepadPlugin.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\gamepad\\Gamepad.js"},{"name":"../../utils/object/GetValue","loc":{"line":11,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\gamepad\\GamepadPlugin.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetValue.js"},{"name":"../InputPluginCache","loc":{"line":12,"column":31},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\gamepad\\GamepadPlugin.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputPluginCache.js"},{"name":"../events","loc":{"line":13,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\gamepad\\GamepadPlugin.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\events\\index.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar Gamepad = require('./Gamepad');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar InputPluginCache = require('../InputPluginCache');\r\nvar InputEvents = require('../events');\r\n\r\n/**\r\n * @classdesc\r\n * The Gamepad Plugin is an input plugin that belongs to the Scene-owned Input system.\r\n *\r\n * Its role is to listen for native DOM Gamepad Events and then process them.\r\n *\r\n * You do not need to create this class directly, the Input system will create an instance of it automatically.\r\n *\r\n * You can access it from within a Scene using `this.input.gamepad`.\r\n *\r\n * To listen for a gamepad being connected:\r\n *\r\n * ```javascript\r\n * this.input.gamepad.once('connected', function (pad) {\r\n *     //   'pad' is a reference to the gamepad that was just connected\r\n * });\r\n * ```\r\n *\r\n * Note that the browser may require you to press a button on a gamepad before it will allow you to access it,\r\n * this is for security reasons. However, it may also trust the page already, in which case you won't get the\r\n * 'connected' event and instead should check `GamepadPlugin.total` to see if it thinks there are any gamepads\r\n * already connected.\r\n *\r\n * Once you have received the connected event, or polled the gamepads and found them enabled, you can access\r\n * them via the built-in properties `GamepadPlugin.pad1` to `pad4`, for up to 4 game pads. With a reference\r\n * to the gamepads you can poll its buttons and axis sticks. See the properties and methods available on\r\n * the `Gamepad` class for more details.\r\n *\r\n * For more information about Gamepad support in browsers see the following resources:\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\r\n * https://www.smashingmagazine.com/2015/11/gamepad-api-in-web-games/\r\n * http://html5gamepad.com/\r\n *\r\n * @class GamepadPlugin\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Input.Gamepad\r\n * @constructor\r\n * @since 3.10.0\r\n *\r\n * @param {Phaser.Input.InputPlugin} sceneInputPlugin - A reference to the Scene Input Plugin that the KeyboardPlugin belongs to.\r\n */\r\nvar GamepadPlugin = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function GamepadPlugin (sceneInputPlugin)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the Scene that this Input Plugin is responsible for.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.10.0\r\n         */\r\n        this.scene = sceneInputPlugin.scene;\r\n\r\n        /**\r\n         * A reference to the Scene Systems Settings.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#settings\r\n         * @type {Phaser.Types.Scenes.SettingsObject}\r\n         * @since 3.10.0\r\n         */\r\n        this.settings = this.scene.sys.settings;\r\n\r\n        /**\r\n         * A reference to the Scene Input Plugin that created this Keyboard Plugin.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#sceneInputPlugin\r\n         * @type {Phaser.Input.InputPlugin}\r\n         * @since 3.10.0\r\n         */\r\n        this.sceneInputPlugin = sceneInputPlugin;\r\n\r\n        /**\r\n         * A boolean that controls if the Gamepad Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.10.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * The Gamepad Event target, as defined in the Game Config.\r\n         * Typically the browser window, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#target\r\n         * @type {any}\r\n         * @since 3.10.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * An array of the connected Gamepads.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#gamepads\r\n         * @type {Phaser.Input.Gamepad.Gamepad[]}\r\n         * @default []\r\n         * @since 3.10.0\r\n         */\r\n        this.gamepads = [];\r\n\r\n        /**\r\n         * An internal event queue.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#queue\r\n         * @type {GamepadEvent[]}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this.queue = [];\r\n\r\n        /**\r\n         * Internal event handler.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#onGamepadHandler\r\n         * @type {function}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this.onGamepadHandler;\r\n\r\n        /**\r\n         * Internal Gamepad reference.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#_pad1\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this._pad1;\r\n\r\n        /**\r\n         * Internal Gamepad reference.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#_pad2\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this._pad2;\r\n\r\n        /**\r\n         * Internal Gamepad reference.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#_pad3\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this._pad3;\r\n\r\n        /**\r\n         * Internal Gamepad reference.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#_pad4\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this._pad4;\r\n\r\n        sceneInputPlugin.pluginEvents.once(InputEvents.BOOT, this.boot, this);\r\n        sceneInputPlugin.pluginEvents.on(InputEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#boot\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var game = this.scene.sys.game;\r\n        var settings = this.settings.input;\r\n        var config = game.config;\r\n\r\n        this.enabled = GetValue(settings, 'gamepad', config.inputGamepad) && game.device.input.gamepads;\r\n        this.target = GetValue(settings, 'gamepad.target', config.inputGamepadEventTarget);\r\n\r\n        this.sceneInputPlugin.pluginEvents.once(InputEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#start\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (this.enabled)\r\n        {\r\n            this.startListeners();\r\n        }\r\n\r\n        this.sceneInputPlugin.pluginEvents.once(InputEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if both this plugin and the Scene to which it belongs is active.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#isActive\r\n     * @since 3.10.0\r\n     *\r\n     * @return {boolean} `true` if the plugin and the Scene it belongs to is active.\r\n     */\r\n    isActive: function ()\r\n    {\r\n        return (this.enabled && this.scene.sys.isActive());\r\n    },\r\n\r\n    /**\r\n     * Starts the Gamepad Event listeners running.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#startListeners\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var _this = this;\r\n        var target = this.target;\r\n\r\n        var handler = function (event)\r\n        {\r\n            // console.log(event);\r\n\r\n            if (event.defaultPrevented || !_this.isActive())\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n\r\n            _this.refreshPads();\r\n\r\n            _this.queue.push(event);\r\n        };\r\n\r\n        this.onGamepadHandler = handler;\r\n\r\n        target.addEventListener('gamepadconnected', handler, false);\r\n        target.addEventListener('gamepaddisconnected', handler, false);\r\n\r\n        //  FF also supports gamepadbuttondown, gamepadbuttonup and gamepadaxismove but\r\n        //  nothing else does, and we can get those values via the gamepads anyway, so we will\r\n        //  until more browsers support this\r\n\r\n        //  Finally, listen for an update event from the Input Plugin\r\n        this.sceneInputPlugin.pluginEvents.on(InputEvents.UPDATE, this.update, this);\r\n    },\r\n\r\n    /**\r\n     * Stops the Gamepad Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#stopListeners\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        this.target.removeEventListener('gamepadconnected', this.onGamepadHandler);\r\n        this.target.removeEventListener('gamepaddisconnected', this.onGamepadHandler);\r\n\r\n        this.sceneInputPlugin.pluginEvents.off(InputEvents.UPDATE, this.update);\r\n    },\r\n\r\n    /**\r\n     * Disconnects all current Gamepads.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#disconnectAll\r\n     * @since 3.10.0\r\n     */\r\n    disconnectAll: function ()\r\n    {\r\n        for (var i = 0; i < this.gamepads.length; i++)\r\n        {\r\n            this.gamepads.connected = false;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Refreshes the list of connected Gamepads.\r\n     *\r\n     * This is called automatically when a gamepad is connected or disconnected,\r\n     * and during the update loop.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#refreshPads\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    refreshPads: function ()\r\n    {\r\n        var connectedPads = navigator.getGamepads();\r\n\r\n        if (!connectedPads)\r\n        {\r\n            this.disconnectAll();\r\n        }\r\n        else\r\n        {\r\n            var currentPads = this.gamepads;\r\n\r\n            for (var i = 0; i < connectedPads.length; i++)\r\n            {\r\n                var livePad = connectedPads[i];\r\n\r\n                //  Because sometimes they're null (yes, really)\r\n                if (!livePad)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                var id = livePad.id;\r\n                var index = livePad.index;\r\n                var currentPad = currentPads[index];\r\n\r\n                if (!currentPad)\r\n                {\r\n                    //  A new Gamepad, not currently stored locally\r\n                    var newPad = new Gamepad(this, livePad);\r\n\r\n                    currentPads[index] = newPad;\r\n\r\n                    if (!this._pad1)\r\n                    {\r\n                        this._pad1 = newPad;\r\n                    }\r\n                    else if (!this._pad2)\r\n                    {\r\n                        this._pad2 = newPad;\r\n                    }\r\n                    else if (!this._pad3)\r\n                    {\r\n                        this._pad3 = newPad;\r\n                    }\r\n                    else if (!this._pad4)\r\n                    {\r\n                        this._pad4 = newPad;\r\n                    }\r\n                }\r\n                else if (currentPad.id !== id)\r\n                {\r\n                    //  A new Gamepad with a different vendor string, but it has got the same index as an old one\r\n                    currentPad.destroy();\r\n\r\n                    currentPads[index] = new Gamepad(this, livePad);\r\n                }\r\n                else\r\n                {\r\n                    //  If neither of these, it's a pad we've already got, so update it\r\n                    currentPad.update(livePad);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns an array of all currently connected Gamepads.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#getAll\r\n     * @since 3.10.0\r\n     *\r\n     * @return {Phaser.Input.Gamepad.Gamepad[]} An array of all currently connected Gamepads.\r\n     */\r\n    getAll: function ()\r\n    {\r\n        var out = [];\r\n        var pads = this.gamepads;\r\n\r\n        for (var i = 0; i < pads.length; i++)\r\n        {\r\n            if (pads[i])\r\n            {\r\n                out.push(pads[i]);\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Looks-up a single Gamepad based on the given index value.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#getPad\r\n     * @since 3.10.0\r\n     *\r\n     * @param {number} index - The index of the Gamepad to get.\r\n     *\r\n     * @return {Phaser.Input.Gamepad.Gamepad} The Gamepad matching the given index, or undefined if none were found.\r\n     */\r\n    getPad: function (index)\r\n    {\r\n        var pads = this.gamepads;\r\n\r\n        for (var i = 0; i < pads.length; i++)\r\n        {\r\n            if (pads[i] && pads[i].index === index)\r\n            {\r\n                return pads[i];\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The internal update loop. Refreshes all connected gamepads and processes their events.\r\n     *\r\n     * Called automatically by the Input Manager, invoked from the Game step.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#update\r\n     * @private\r\n     * @fires Phaser.Input.Gamepad.Events#CONNECTED\r\n     * @fires Phaser.Input.Gamepad.Events#DISCONNECTED\r\n     * @since 3.10.0\r\n     */\r\n    update: function ()\r\n    {\r\n        if (!this.enabled)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.refreshPads();\r\n\r\n        var len = this.queue.length;\r\n\r\n        if (len === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var queue = this.queue.splice(0, len);\r\n\r\n        //  Process the event queue, dispatching all of the events that have stored up\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            var event = queue[i];\r\n            var pad = this.getPad(event.gamepad.index);\r\n\r\n            if (event.type === 'gamepadconnected')\r\n            {\r\n                this.emit(Events.CONNECTED, pad, event);\r\n            }\r\n            else if (event.type === 'gamepaddisconnected')\r\n            {\r\n                this.emit(Events.DISCONNECTED, pad, event);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Shuts the Gamepad Plugin down.\r\n     * All this does is remove any listeners bound to it.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#shutdown\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.disconnectAll();\r\n\r\n        this.removeAllListeners();\r\n    },\r\n\r\n    /**\r\n     * Destroys this Gamepad Plugin, disconnecting all Gamepads and releasing internal references.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#destroy\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        for (var i = 0; i < this.gamepads.length; i++)\r\n        {\r\n            if (this.gamepads[i])\r\n            {\r\n                this.gamepads[i].destroy();\r\n            }\r\n        }\r\n\r\n        this.gamepads = [];\r\n\r\n        this.scene = null;\r\n        this.settings = null;\r\n        this.sceneInputPlugin = null;\r\n        this.target = null;\r\n    },\r\n\r\n    /**\r\n     * The total number of connected game pads.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#total\r\n     * @type {integer}\r\n     * @since 3.10.0\r\n     */\r\n    total: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.gamepads.length;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * A reference to the first connected Gamepad.\r\n     *\r\n     * This will be undefined if either no pads are connected, or the browser\r\n     * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n     * is plugged in, but hasn't yet had any buttons pressed on it.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#pad1\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.10.0\r\n     */\r\n    pad1: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._pad1;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * A reference to the second connected Gamepad.\r\n     *\r\n     * This will be undefined if either no pads are connected, or the browser\r\n     * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n     * is plugged in, but hasn't yet had any buttons pressed on it.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#pad2\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.10.0\r\n     */\r\n    pad2: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._pad2;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * A reference to the third connected Gamepad.\r\n     *\r\n     * This will be undefined if either no pads are connected, or the browser\r\n     * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n     * is plugged in, but hasn't yet had any buttons pressed on it.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#pad3\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.10.0\r\n     */\r\n    pad3: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._pad3;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * A reference to the fourth connected Gamepad.\r\n     *\r\n     * This will be undefined if either no pads are connected, or the browser\r\n     * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n     * is plugged in, but hasn't yet had any buttons pressed on it.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#pad4\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.10.0\r\n     */\r\n    pad4: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._pad4;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * An instance of the Gamepad Plugin class, if enabled via the `input.gamepad` Scene or Game Config property.\r\n * Use this to create access Gamepads connected to the browser and respond to gamepad buttons.\r\n *\r\n * @name Phaser.Input.InputPlugin#gamepad\r\n * @type {?Phaser.Input.Gamepad.GamepadPlugin}\r\n * @since 3.10.0\r\n */\r\nInputPluginCache.register('GamepadPlugin', GamepadPlugin, 'gamepad', 'gamepad', 'inputGamepad');\r\n\r\nmodule.exports = GamepadPlugin;\r\n"},"sourceMaps":null,"error":null,"hash":"d45cf413078315c6524bda80a5061309","cacheData":{"env":{}}}