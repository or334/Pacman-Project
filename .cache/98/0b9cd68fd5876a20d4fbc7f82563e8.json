{"id":"../../node_modules/phaser/src/gameobjects/mesh/Mesh.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\mesh\\Mesh.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../components","loc":{"line":8,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\mesh\\Mesh.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\components\\index.js"},{"name":"../GameObject","loc":{"line":9,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\mesh\\Mesh.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\GameObject.js"},{"name":"./MeshRender","loc":{"line":10,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\mesh\\Mesh.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\mesh\\MeshRender.js"},{"name":"../../utils/NOOP","loc":{"line":11,"column":19},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\mesh\\Mesh.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\NOOP.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar GameObject = require('../GameObject');\r\nvar MeshRender = require('./MeshRender');\r\nvar NOOP = require('../../utils/NOOP');\r\n\r\n/**\r\n * @classdesc\r\n * A Mesh Game Object.\r\n *\r\n * @class Mesh\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @webglOnly\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number[]} vertices - An array containing the vertices data for this Mesh.\r\n * @param {number[]} uv - An array containing the uv data for this Mesh.\r\n * @param {number[]} colors - An array containing the color data for this Mesh.\r\n * @param {number[]} alphas - An array containing the alpha data for this Mesh.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\r\nvar Mesh = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.BlendMode,\r\n        Components.Depth,\r\n        Components.GetBounds,\r\n        Components.Mask,\r\n        Components.Pipeline,\r\n        Components.Size,\r\n        Components.Texture,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        MeshRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Mesh (scene, x, y, vertices, uv, colors, alphas, texture, frame)\r\n    {\r\n        GameObject.call(this, scene, 'Mesh');\r\n\r\n        if (vertices.length !== uv.length)\r\n        {\r\n            throw new Error('Mesh Vertex count must match UV count');\r\n        }\r\n\r\n        var verticesUB = (vertices.length / 2) | 0;\r\n\r\n        if (colors.length > 0 && colors.length < verticesUB)\r\n        {\r\n            throw new Error('Mesh Color count must match Vertex count');\r\n        }\r\n\r\n        if (alphas.length > 0 && alphas.length < verticesUB)\r\n        {\r\n            throw new Error('Mesh Alpha count must match Vertex count');\r\n        }\r\n\r\n        var i;\r\n\r\n        if (colors.length === 0)\r\n        {\r\n            for (i = 0; i < verticesUB; ++i)\r\n            {\r\n                colors[i] = 0xFFFFFF;\r\n            }\r\n        }\r\n\r\n        if (alphas.length === 0)\r\n        {\r\n            for (i = 0; i < verticesUB; ++i)\r\n            {\r\n                alphas[i] = 1.0;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * An array containing the vertices data for this Mesh.\r\n         *\r\n         * @name Phaser.GameObjects.Mesh#vertices\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertices = new Float32Array(vertices);\r\n\r\n        /**\r\n         * An array containing the uv data for this Mesh.\r\n         *\r\n         * @name Phaser.GameObjects.Mesh#uv\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.uv = new Float32Array(uv);\r\n\r\n        /**\r\n         * An array containing the color data for this Mesh.\r\n         *\r\n         * @name Phaser.GameObjects.Mesh#colors\r\n         * @type {Uint32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.colors = new Uint32Array(colors);\r\n\r\n        /**\r\n         * An array containing the alpha data for this Mesh.\r\n         *\r\n         * @name Phaser.GameObjects.Mesh#alphas\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.alphas = new Float32Array(alphas);\r\n\r\n        /**\r\n         * Fill or additive mode used when blending the color values?\r\n         * \r\n         * @name Phaser.GameObjects.Mesh#tintFill\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.11.0\r\n         */\r\n        this.tintFill = false;\r\n\r\n        this.setTexture(texture, frame);\r\n        this.setPosition(x, y);\r\n        this.setSizeToFrame();\r\n        this.initPipeline();\r\n    },\r\n\r\n    /**\r\n     * This method is left intentionally empty and does not do anything.\r\n     * It is retained to allow a Mesh or Quad to be added to a Container.\r\n     * \r\n     * @method Phaser.GameObjects.Mesh#setAlpha\r\n     * @since 3.17.0\r\n     */\r\n    setAlpha: NOOP\r\n\r\n});\r\n\r\nmodule.exports = Mesh;\r\n"},"sourceMaps":null,"error":null,"hash":"0472c148e2d5cdb9a80f42597f097053","cacheData":{"env":{}}}