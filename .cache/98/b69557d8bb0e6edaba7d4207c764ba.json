{"id":"../../node_modules/phaser/src/core/CreateRenderer.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../display/canvas/CanvasInterpolation","loc":{"line":7,"column":34},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\CreateRenderer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\canvas\\CanvasInterpolation.js"},{"name":"../display/canvas/CanvasPool","loc":{"line":8,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\CreateRenderer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\canvas\\CanvasPool.js"},{"name":"../const","loc":{"line":9,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\CreateRenderer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\const.js"},{"name":"../device/Features","loc":{"line":10,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\CreateRenderer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\device\\Features.js"},{"name":"../renderer/canvas/CanvasRenderer","loc":{"line":127,"column":33},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\CreateRenderer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\canvas\\CanvasRenderer.js"},{"name":"../renderer/webgl/WebGLRenderer","loc":{"line":117,"column":32},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\CreateRenderer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\webgl\\WebGLRenderer.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CanvasInterpolation = require('../display/canvas/CanvasInterpolation');\r\nvar CanvasPool = require('../display/canvas/CanvasPool');\r\nvar CONST = require('../const');\r\nvar Features = require('../device/Features');\r\n\r\n/**\r\n * Called automatically by Phaser.Game and responsible for creating the renderer it will use.\r\n *\r\n * Relies upon two webpack global flags to be defined: `WEBGL_RENDERER` and `CANVAS_RENDERER` during build time, but not at run-time.\r\n *\r\n * @function Phaser.Core.CreateRenderer\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - The Phaser.Game instance on which the renderer will be set.\r\n */\r\nvar CreateRenderer = function (game)\r\n{\r\n    var config = game.config;\r\n\r\n    if ((config.customEnvironment || config.canvas) && config.renderType === CONST.AUTO)\r\n    {\r\n        throw new Error('Must set explicit renderType in custom environment');\r\n    }\r\n\r\n    //  Not a custom environment, didn't provide their own canvas and not headless, so determine the renderer:\r\n    if (!config.customEnvironment && !config.canvas && config.renderType !== CONST.HEADLESS)\r\n    {\r\n        if (config.renderType === CONST.CANVAS || (config.renderType !== CONST.CANVAS && !Features.webGL))\r\n        {\r\n            if (Features.canvas)\r\n            {\r\n                //  They requested Canvas and their browser supports it\r\n                config.renderType = CONST.CANVAS;\r\n            }\r\n            else\r\n            {\r\n                throw new Error('Cannot create Canvas or WebGL context, aborting.');\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  Game requested WebGL and browser says it supports it\r\n            config.renderType = CONST.WEBGL;\r\n        }\r\n    }\r\n\r\n    //  Pixel Art mode?\r\n    if (!config.antialias)\r\n    {\r\n        CanvasPool.disableSmoothing();\r\n    }\r\n\r\n    var baseSize = game.scale.baseSize;\r\n\r\n    var width = baseSize.width;\r\n    var height = baseSize.height;\r\n\r\n    //  Does the game config provide its own canvas element to use?\r\n    if (config.canvas)\r\n    {\r\n        game.canvas = config.canvas;\r\n\r\n        game.canvas.width = width;\r\n        game.canvas.height = height;\r\n    }\r\n    else\r\n    {\r\n        game.canvas = CanvasPool.create(game, width, height, config.renderType);\r\n    }\r\n\r\n    //  Does the game config provide some canvas css styles to use?\r\n    if (config.canvasStyle)\r\n    {\r\n        game.canvas.style = config.canvasStyle;\r\n    }\r\n\r\n    //  Pixel Art mode?\r\n    if (!config.antialias)\r\n    {\r\n        CanvasInterpolation.setCrisp(game.canvas);\r\n    }\r\n\r\n    if (config.renderType === CONST.HEADLESS)\r\n    {\r\n        //  Nothing more to do here\r\n        return;\r\n    }\r\n\r\n    var CanvasRenderer;\r\n    var WebGLRenderer;\r\n\r\n    if (typeof WEBGL_RENDERER && typeof CANVAS_RENDERER)\r\n    {\r\n        CanvasRenderer = require('../renderer/canvas/CanvasRenderer');\r\n        WebGLRenderer = require('../renderer/webgl/WebGLRenderer');\r\n\r\n        //  Let the config pick the renderer type, as both are included\r\n        if (config.renderType === CONST.WEBGL)\r\n        {\r\n            game.renderer = new WebGLRenderer(game);\r\n        }\r\n        else\r\n        {\r\n            game.renderer = new CanvasRenderer(game);\r\n            game.context = game.renderer.gameContext;\r\n        }\r\n    }\r\n\r\n    if (typeof WEBGL_RENDERER && !typeof CANVAS_RENDERER)\r\n    {\r\n        WebGLRenderer = require('../renderer/webgl/WebGLRenderer');\r\n\r\n        //  Force the type to WebGL, regardless what was requested\r\n        config.renderType = CONST.WEBGL;\r\n\r\n        game.renderer = new WebGLRenderer(game);\r\n    }\r\n\r\n    if (!typeof WEBGL_RENDERER && typeof CANVAS_RENDERER)\r\n    {\r\n        CanvasRenderer = require('../renderer/canvas/CanvasRenderer');\r\n\r\n        //  Force the type to Canvas, regardless what was requested\r\n        config.renderType = CONST.CANVAS;\r\n\r\n        game.renderer = new CanvasRenderer(game);\r\n\r\n        game.context = game.renderer.gameContext;\r\n    }\r\n};\r\n\r\nmodule.exports = CreateRenderer;\r\n"},"sourceMaps":null,"error":null,"hash":"3cdabc40d6a43827cae7a7e555854e82","cacheData":{"env":{}}}