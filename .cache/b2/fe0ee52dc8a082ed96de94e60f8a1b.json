{"id":"../../node_modules/phaser/src/physics/arcade/World.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"./Body","loc":{"line":7,"column":19},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\Body.js"},{"name":"../../math/Clamp","loc":{"line":8,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Clamp.js"},{"name":"../../utils/Class","loc":{"line":9,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./Collider","loc":{"line":10,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\Collider.js"},{"name":"./const","loc":{"line":11,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\const.js"},{"name":"../../math/distance/DistanceBetween","loc":{"line":12,"column":30},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\distance\\DistanceBetween.js"},{"name":"eventemitter3","loc":{"line":13,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\eventemitter3\\index.js"},{"name":"./events","loc":{"line":14,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\events\\index.js"},{"name":"../../math/fuzzy/Equal","loc":{"line":15,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\fuzzy\\Equal.js"},{"name":"../../math/fuzzy/GreaterThan","loc":{"line":16,"column":31},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\fuzzy\\GreaterThan.js"},{"name":"../../math/fuzzy/LessThan","loc":{"line":17,"column":28},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\fuzzy\\LessThan.js"},{"name":"./GetOverlapX","loc":{"line":18,"column":26},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\GetOverlapX.js"},{"name":"./GetOverlapY","loc":{"line":19,"column":26},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\GetOverlapY.js"},{"name":"../../utils/object/GetValue","loc":{"line":20,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetValue.js"},{"name":"../../structs/ProcessQueue","loc":{"line":21,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\structs\\ProcessQueue.js"},{"name":"./tilemap/ProcessTileCallbacks","loc":{"line":22,"column":35},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\tilemap\\ProcessTileCallbacks.js"},{"name":"../../geom/rectangle/Rectangle","loc":{"line":23,"column":24},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\rectangle\\Rectangle.js"},{"name":"../../structs/RTree","loc":{"line":24,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\structs\\RTree.js"},{"name":"./tilemap/SeparateTile","loc":{"line":25,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\tilemap\\SeparateTile.js"},{"name":"./SeparateX","loc":{"line":26,"column":24},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\SeparateX.js"},{"name":"./SeparateY","loc":{"line":27,"column":24},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\SeparateY.js"},{"name":"../../structs/Set","loc":{"line":28,"column":18},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\structs\\Set.js"},{"name":"./StaticBody","loc":{"line":29,"column":25},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\StaticBody.js"},{"name":"./tilemap/TileIntersectsBody","loc":{"line":30,"column":33},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\tilemap\\TileIntersectsBody.js"},{"name":"../../gameobjects/components/TransformMatrix","loc":{"line":31,"column":30},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\components\\TransformMatrix.js"},{"name":"../../math/Vector2","loc":{"line":32,"column":22},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Vector2.js"},{"name":"../../math/Wrap","loc":{"line":33,"column":19},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\World.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Wrap.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Body = require('./Body');\r\nvar Clamp = require('../../math/Clamp');\r\nvar Class = require('../../utils/Class');\r\nvar Collider = require('./Collider');\r\nvar CONST = require('./const');\r\nvar DistanceBetween = require('../../math/distance/DistanceBetween');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar FuzzyEqual = require('../../math/fuzzy/Equal');\r\nvar FuzzyGreaterThan = require('../../math/fuzzy/GreaterThan');\r\nvar FuzzyLessThan = require('../../math/fuzzy/LessThan');\r\nvar GetOverlapX = require('./GetOverlapX');\r\nvar GetOverlapY = require('./GetOverlapY');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar ProcessQueue = require('../../structs/ProcessQueue');\r\nvar ProcessTileCallbacks = require('./tilemap/ProcessTileCallbacks');\r\nvar Rectangle = require('../../geom/rectangle/Rectangle');\r\nvar RTree = require('../../structs/RTree');\r\nvar SeparateTile = require('./tilemap/SeparateTile');\r\nvar SeparateX = require('./SeparateX');\r\nvar SeparateY = require('./SeparateY');\r\nvar Set = require('../../structs/Set');\r\nvar StaticBody = require('./StaticBody');\r\nvar TileIntersectsBody = require('./tilemap/TileIntersectsBody');\r\nvar TransformMatrix = require('../../gameobjects/components/TransformMatrix');\r\nvar Vector2 = require('../../math/Vector2');\r\nvar Wrap = require('../../math/Wrap');\r\n\r\n/**\r\n * @classdesc\r\n * The Arcade Physics World.\r\n *\r\n * The World is responsible for creating, managing, colliding and updating all of the bodies within it.\r\n *\r\n * An instance of the World belongs to a Phaser.Scene and is accessed via the property `physics.world`.\r\n *\r\n * @class World\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this World instance belongs.\r\n * @param {Phaser.Types.Physics.Arcade.ArcadeWorldConfig} config - An Arcade Physics Configuration object.\r\n */\r\nvar World = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function World (scene, config)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * The Scene this simulation belongs to.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * Dynamic Bodies in this simulation.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#bodies\r\n         * @type {Phaser.Structs.Set.<Phaser.Physics.Arcade.Body>}\r\n         * @since 3.0.0\r\n         */\r\n        this.bodies = new Set();\r\n\r\n        /**\r\n         * Static Bodies in this simulation.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#staticBodies\r\n         * @type {Phaser.Structs.Set.<Phaser.Physics.Arcade.StaticBody>}\r\n         * @since 3.0.0\r\n         */\r\n        this.staticBodies = new Set();\r\n\r\n        /**\r\n         * Static Bodies marked for deletion.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#pendingDestroy\r\n         * @type {Phaser.Structs.Set.<(Phaser.Physics.Arcade.Body|Phaser.Physics.Arcade.StaticBody)>}\r\n         * @since 3.1.0\r\n         */\r\n        this.pendingDestroy = new Set();\r\n\r\n        /**\r\n         * This simulation's collision processors.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#colliders\r\n         * @type {Phaser.Structs.ProcessQueue.<Phaser.Physics.Arcade.Collider>}\r\n         * @since 3.0.0\r\n         */\r\n        this.colliders = new ProcessQueue();\r\n\r\n        /**\r\n         * Acceleration of Bodies due to gravity, in pixels per second.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#gravity\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.gravity = new Vector2(GetValue(config, 'gravity.x', 0), GetValue(config, 'gravity.y', 0));\r\n\r\n        /**\r\n         * A boundary constraining Bodies.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#bounds\r\n         * @type {Phaser.Geom.Rectangle}\r\n         * @since 3.0.0\r\n         */\r\n        this.bounds = new Rectangle(\r\n            GetValue(config, 'x', 0),\r\n            GetValue(config, 'y', 0),\r\n            GetValue(config, 'width', scene.sys.scale.width),\r\n            GetValue(config, 'height', scene.sys.scale.height)\r\n        );\r\n\r\n        /**\r\n         * The boundary edges that Bodies can collide with.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#checkCollision\r\n         * @type {Phaser.Types.Physics.Arcade.CheckCollisionObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.checkCollision = {\r\n            up: GetValue(config, 'checkCollision.up', true),\r\n            down: GetValue(config, 'checkCollision.down', true),\r\n            left: GetValue(config, 'checkCollision.left', true),\r\n            right: GetValue(config, 'checkCollision.right', true)\r\n        };\r\n\r\n        /**\r\n         * The number of physics steps to be taken per second.\r\n         *\r\n         * This property is read-only. Use the `setFPS` method to modify it at run-time.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#fps\r\n         * @readonly\r\n         * @type {number}\r\n         * @default 60\r\n         * @since 3.10.0\r\n         */\r\n        this.fps = GetValue(config, 'fps', 60);\r\n\r\n        /**\r\n         * The amount of elapsed ms since the last frame.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#_elapsed\r\n         * @private\r\n         * @type {number}\r\n         * @since 3.10.0\r\n         */\r\n        this._elapsed = 0;\r\n\r\n        /**\r\n         * Internal frame time value.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#_frameTime\r\n         * @private\r\n         * @type {number}\r\n         * @since 3.10.0\r\n         */\r\n        this._frameTime = 1 / this.fps;\r\n\r\n        /**\r\n         * Internal frame time ms value.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#_frameTimeMS\r\n         * @private\r\n         * @type {number}\r\n         * @since 3.10.0\r\n         */\r\n        this._frameTimeMS = 1000 * this._frameTime;\r\n\r\n        /**\r\n         * The number of steps that took place in the last frame.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#stepsLastFrame\r\n         * @readonly\r\n         * @type {number}\r\n         * @since 3.10.0\r\n         */\r\n        this.stepsLastFrame = 0;\r\n\r\n        /**\r\n         * Scaling factor applied to the frame rate.\r\n         *\r\n         * - 1.0 = normal speed\r\n         * - 2.0 = half speed\r\n         * - 0.5 = double speed\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#timeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.10.0\r\n         */\r\n        this.timeScale = GetValue(config, 'timeScale', 1);\r\n\r\n        /**\r\n         * The maximum absolute difference of a Body's per-step velocity and its overlap with another Body that will result in separation on *each axis*.\r\n         * Larger values favor separation.\r\n         * Smaller values favor no separation.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#OVERLAP_BIAS\r\n         * @type {number}\r\n         * @default 4\r\n         * @since 3.0.0\r\n         */\r\n        this.OVERLAP_BIAS = GetValue(config, 'overlapBias', 4);\r\n\r\n        /**\r\n         * The maximum absolute value of a Body's overlap with a tile that will result in separation on *each axis*.\r\n         * Larger values favor separation.\r\n         * Smaller values favor no separation.\r\n         * The optimum value may be similar to the tile size.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#TILE_BIAS\r\n         * @type {number}\r\n         * @default 16\r\n         * @since 3.0.0\r\n         */\r\n        this.TILE_BIAS = GetValue(config, 'tileBias', 16);\r\n\r\n        /**\r\n         * Always separate overlapping Bodies horizontally before vertically.\r\n         * False (the default) means Bodies are first separated on the axis of greater gravity, or the vertical axis if neither is greater.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#forceX\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.forceX = GetValue(config, 'forceX', false);\r\n\r\n        /**\r\n         * Whether the simulation advances with the game loop.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#isPaused\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.isPaused = GetValue(config, 'isPaused', false);\r\n\r\n        /**\r\n         * Temporary total of colliding Bodies.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#_total\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._total = 0;\r\n\r\n        /**\r\n         * Enables the debug display.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#drawDebug\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.drawDebug = GetValue(config, 'debug', false);\r\n\r\n        /**\r\n         * The graphics object drawing the debug display.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#debugGraphic\r\n         * @type {Phaser.GameObjects.Graphics}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugGraphic;\r\n\r\n        /**\r\n         * Default debug display settings for new Bodies.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#defaults\r\n         * @type {Phaser.Types.Physics.Arcade.ArcadeWorldDefaults}\r\n         * @since 3.0.0\r\n         */\r\n        this.defaults = {\r\n            debugShowBody: GetValue(config, 'debugShowBody', true),\r\n            debugShowStaticBody: GetValue(config, 'debugShowStaticBody', true),\r\n            debugShowVelocity: GetValue(config, 'debugShowVelocity', true),\r\n            bodyDebugColor: GetValue(config, 'debugBodyColor', 0xff00ff),\r\n            staticBodyDebugColor: GetValue(config, 'debugStaticBodyColor', 0x0000ff),\r\n            velocityDebugColor: GetValue(config, 'debugVelocityColor', 0x00ff00)\r\n        };\r\n\r\n        /**\r\n         * The maximum number of items per node on the RTree.\r\n         *\r\n         * This is ignored if `useTree` is `false`. If you have a large number of bodies in\r\n         * your world then you may find search performance improves by increasing this value,\r\n         * to allow more items per node and less node division.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#maxEntries\r\n         * @type {integer}\r\n         * @default 16\r\n         * @since 3.0.0\r\n         */\r\n        this.maxEntries = GetValue(config, 'maxEntries', 16);\r\n\r\n        /**\r\n         * Should this Arcade Physics World use an RTree for Dynamic and Static Physics bodies?\r\n         *\r\n         * An RTree is a fast way of spatially sorting of all the bodies in the world.\r\n         * However, at certain limits, the cost of clearing and inserting the bodies into the\r\n         * tree every frame becomes more expensive than the search speed gains it provides.\r\n         *\r\n         * If you have a large number of dynamic bodies in your world then it may be best to\r\n         * disable the use of the RTree by setting this property to `false` in the physics config.\r\n         * \r\n         * The number it can cope with depends on browser and device, but a conservative estimate\r\n         * of around 5,000 bodies should be considered the max before disabling it.\r\n         *\r\n         * This only applies to dynamic bodies. Static bodies are always kept in an RTree,\r\n         * because they don't have to be cleared every frame, so you benefit from the\r\n         * massive search speeds all the time.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#useTree\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.10.0\r\n         */\r\n        this.useTree = GetValue(config, 'useTree', true);\r\n\r\n        /**\r\n         * The spatial index of Dynamic Bodies.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#tree\r\n         * @type {Phaser.Structs.RTree}\r\n         * @since 3.0.0\r\n         */\r\n        this.tree = new RTree(this.maxEntries);\r\n\r\n        /**\r\n         * The spatial index of Static Bodies.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#staticTree\r\n         * @type {Phaser.Structs.RTree}\r\n         * @since 3.0.0\r\n         */\r\n        this.staticTree = new RTree(this.maxEntries);\r\n\r\n        /**\r\n         * Recycled input for tree searches.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#treeMinMax\r\n         * @type {Phaser.Types.Physics.Arcade.ArcadeWorldTreeMinMax}\r\n         * @since 3.0.0\r\n         */\r\n        this.treeMinMax = { minX: 0, minY: 0, maxX: 0, maxY: 0 };\r\n\r\n        /**\r\n         * A temporary Transform Matrix used by bodies for calculations without them needing their own local copy.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#_tempMatrix\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._tempMatrix = new TransformMatrix();\r\n\r\n        /**\r\n         * A temporary Transform Matrix used by bodies for calculations without them needing their own local copy.\r\n         *\r\n         * @name Phaser.Physics.Arcade.World#_tempMatrix2\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._tempMatrix2 = new TransformMatrix();\r\n\r\n        if (this.drawDebug)\r\n        {\r\n            this.createDebugGraphic();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds an Arcade Physics Body to a Game Object, an array of Game Objects, or the children of a Group.\r\n     *\r\n     * The difference between this and the `enableBody` method is that you can pass arrays or Groups\r\n     * to this method.\r\n     *\r\n     * You can specify if the bodies are to be Dynamic or Static. A dynamic body can move via velocity and\r\n     * acceleration. A static body remains fixed in place and as such is able to use an optimized search\r\n     * tree, making it ideal for static elements such as level objects. You can still collide and overlap\r\n     * with static bodies.\r\n     *\r\n     * Normally, rather than calling this method directly, you'd use the helper methods available in the\r\n     * Arcade Physics Factory, such as:\r\n     *\r\n     * ```javascript\r\n     * this.physics.add.image(x, y, textureKey);\r\n     * this.physics.add.sprite(x, y, textureKey);\r\n     * ```\r\n     *\r\n     * Calling factory methods encapsulates the creation of a Game Object and the creation of its\r\n     * body at the same time. If you are creating custom classes then you can pass them to this\r\n     * method to have their bodies created.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#enable\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object - The object, or objects, on which to create the bodies.\r\n     * @param {integer} [bodyType] - The type of Body to create. Either `DYNAMIC_BODY` or `STATIC_BODY`.\r\n     */\r\n    enable: function (object, bodyType)\r\n    {\r\n        if (bodyType === undefined) { bodyType = CONST.DYNAMIC_BODY; }\r\n\r\n        if (!Array.isArray(object))\r\n        {\r\n            object = [ object ];\r\n        }\r\n\r\n        for (var i = 0; i < object.length; i++)\r\n        {\r\n            var entry = object[i];\r\n\r\n            if (entry.isParent)\r\n            {\r\n                var children = entry.getChildren();\r\n\r\n                for (var c = 0; c < children.length; c++)\r\n                {\r\n                    var child = children[c];\r\n\r\n                    if (child.isParent)\r\n                    {\r\n                        //  Handle Groups nested inside of Groups\r\n                        this.enable(child, bodyType);\r\n                    }\r\n                    else\r\n                    {\r\n                        this.enableBody(child, bodyType);\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.enableBody(entry, bodyType);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Creates an Arcade Physics Body on a single Game Object.\r\n     *\r\n     * If the Game Object already has a body, this method will simply add it back into the simulation.\r\n     *\r\n     * You can specify if the body is Dynamic or Static. A dynamic body can move via velocity and\r\n     * acceleration. A static body remains fixed in place and as such is able to use an optimized search\r\n     * tree, making it ideal for static elements such as level objects. You can still collide and overlap\r\n     * with static bodies.\r\n     *\r\n     * Normally, rather than calling this method directly, you'd use the helper methods available in the\r\n     * Arcade Physics Factory, such as:\r\n     *\r\n     * ```javascript\r\n     * this.physics.add.image(x, y, textureKey);\r\n     * this.physics.add.sprite(x, y, textureKey);\r\n     * ```\r\n     *\r\n     * Calling factory methods encapsulates the creation of a Game Object and the creation of its\r\n     * body at the same time. If you are creating custom classes then you can pass them to this\r\n     * method to have their bodies created.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#enableBody\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} object - The Game Object on which to create the body.\r\n     * @param {integer} [bodyType] - The type of Body to create. Either `DYNAMIC_BODY` or `STATIC_BODY`.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object on which the body was created.\r\n     */\r\n    enableBody: function (object, bodyType)\r\n    {\r\n        if (bodyType === undefined) { bodyType = CONST.DYNAMIC_BODY; }\r\n\r\n        if (!object.body)\r\n        {\r\n            if (bodyType === CONST.DYNAMIC_BODY)\r\n            {\r\n                object.body = new Body(this, object);\r\n            }\r\n            else if (bodyType === CONST.STATIC_BODY)\r\n            {\r\n                object.body = new StaticBody(this, object);\r\n            }\r\n        }\r\n\r\n        this.add(object.body);\r\n\r\n        return object;\r\n    },\r\n\r\n    /**\r\n     * Adds an existing Arcade Physics Body or StaticBody to the simulation.\r\n     *\r\n     * The body is enabled and added to the local search trees.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#add\r\n     * @since 3.10.0\r\n     *\r\n     * @param {(Phaser.Physics.Arcade.Body|Phaser.Physics.Arcade.StaticBody)} body - The Body to be added to the simulation.\r\n     *\r\n     * @return {(Phaser.Physics.Arcade.Body|Phaser.Physics.Arcade.StaticBody)} The Body that was added to the simulation.\r\n     */\r\n    add: function (body)\r\n    {\r\n        if (body.physicsType === CONST.DYNAMIC_BODY)\r\n        {\r\n            this.bodies.set(body);\r\n        }\r\n        else if (body.physicsType === CONST.STATIC_BODY)\r\n        {\r\n            this.staticBodies.set(body);\r\n\r\n            this.staticTree.insert(body);\r\n        }\r\n\r\n        body.enable = true;\r\n\r\n        return body;\r\n    },\r\n\r\n    /**\r\n     * Disables the Arcade Physics Body of a Game Object, an array of Game Objects, or the children of a Group.\r\n     *\r\n     * The difference between this and the `disableBody` method is that you can pass arrays or Groups\r\n     * to this method.\r\n     *\r\n     * The body itself is not deleted, it just has its `enable` property set to false, which\r\n     * means you can re-enable it again at any point by passing it to enable `World.enable` or `World.add`.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#disable\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object - The object, or objects, on which to disable the bodies.\r\n     */\r\n    disable: function (object)\r\n    {\r\n        if (!Array.isArray(object))\r\n        {\r\n            object = [ object ];\r\n        }\r\n\r\n        for (var i = 0; i < object.length; i++)\r\n        {\r\n            var entry = object[i];\r\n\r\n            if (entry.isParent)\r\n            {\r\n                var children = entry.getChildren();\r\n\r\n                for (var c = 0; c < children.length; c++)\r\n                {\r\n                    var child = children[c];\r\n\r\n                    if (child.isParent)\r\n                    {\r\n                        //  Handle Groups nested inside of Groups\r\n                        this.disable(child);\r\n                    }\r\n                    else\r\n                    {\r\n                        this.disableBody(child.body);\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.disableBody(entry.body);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Disables an existing Arcade Physics Body or StaticBody and removes it from the simulation.\r\n     *\r\n     * The body is disabled and removed from the local search trees.\r\n     *\r\n     * The body itself is not deleted, it just has its `enable` property set to false, which\r\n     * means you can re-enable it again at any point by passing it to enable `World.enable` or `World.add`.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#disableBody\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Physics.Arcade.Body|Phaser.Physics.Arcade.StaticBody)} body - The Body to be disabled.\r\n     */\r\n    disableBody: function (body)\r\n    {\r\n        this.remove(body);\r\n\r\n        body.enable = false;\r\n    },\r\n\r\n    /**\r\n     * Removes an existing Arcade Physics Body or StaticBody from the simulation.\r\n     *\r\n     * The body is disabled and removed from the local search trees.\r\n     *\r\n     * The body itself is not deleted, it just has its `enabled` property set to false, which\r\n     * means you can re-enable it again at any point by passing it to enable `enable` or `add`.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Physics.Arcade.Body|Phaser.Physics.Arcade.StaticBody)} body - The body to be removed from the simulation.\r\n     */\r\n    remove: function (body)\r\n    {\r\n        if (body.physicsType === CONST.DYNAMIC_BODY)\r\n        {\r\n            this.tree.remove(body);\r\n            this.bodies.delete(body);\r\n        }\r\n        else if (body.physicsType === CONST.STATIC_BODY)\r\n        {\r\n            this.staticBodies.delete(body);\r\n            this.staticTree.remove(body);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Creates a Graphics Game Object that the world will use to render the debug display to.\r\n     *\r\n     * This is called automatically when the World is instantiated if the `debug` config property\r\n     * was set to `true`. However, you can call it at any point should you need to display the\r\n     * debug Graphic from a fixed point.\r\n     *\r\n     * You can control which objects are drawn to the Graphics object, and the colors they use,\r\n     * by setting the debug properties in the physics config.\r\n     *\r\n     * You should not typically use this in a production game. Use it to aid during debugging.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#createDebugGraphic\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} The Graphics object that was created for use by the World.\r\n     */\r\n    createDebugGraphic: function ()\r\n    {\r\n        var graphic = this.scene.sys.add.graphics({ x: 0, y: 0 });\r\n\r\n        graphic.setDepth(Number.MAX_VALUE);\r\n\r\n        this.debugGraphic = graphic;\r\n\r\n        this.drawDebug = true;\r\n\r\n        return graphic;\r\n    },\r\n\r\n    /**\r\n     * Sets the position, size and properties of the World boundary.\r\n     *\r\n     * The World boundary is an invisible rectangle that defines the edges of the World.\r\n     * If a Body is set to collide with the world bounds then it will automatically stop\r\n     * when it reaches any of the edges. You can optionally set which edges of the boundary\r\n     * should be checked against.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#setBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The top-left x coordinate of the boundary.\r\n     * @param {number} y - The top-left y coordinate of the boundary.\r\n     * @param {number} width - The width of the boundary.\r\n     * @param {number} height - The height of the boundary.\r\n     * @param {boolean} [checkLeft] - Should bodies check against the left edge of the boundary?\r\n     * @param {boolean} [checkRight] - Should bodies check against the right edge of the boundary?\r\n     * @param {boolean} [checkUp] - Should bodies check against the top edge of the boundary?\r\n     * @param {boolean} [checkDown] - Should bodies check against the bottom edge of the boundary?\r\n     *\r\n     * @return {Phaser.Physics.Arcade.World} This World object.\r\n     */\r\n    setBounds: function (x, y, width, height, checkLeft, checkRight, checkUp, checkDown)\r\n    {\r\n        this.bounds.setTo(x, y, width, height);\r\n\r\n        if (checkLeft !== undefined)\r\n        {\r\n            this.setBoundsCollision(checkLeft, checkRight, checkUp, checkDown);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Enables or disables collisions on each edge of the World boundary.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#setBoundsCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [left=true] - Should bodies check against the left edge of the boundary?\r\n     * @param {boolean} [right=true] - Should bodies check against the right edge of the boundary?\r\n     * @param {boolean} [up=true] - Should bodies check against the top edge of the boundary?\r\n     * @param {boolean} [down=true] - Should bodies check against the bottom edge of the boundary?\r\n     *\r\n     * @return {Phaser.Physics.Arcade.World} This World object.\r\n     */\r\n    setBoundsCollision: function (left, right, up, down)\r\n    {\r\n        if (left === undefined) { left = true; }\r\n        if (right === undefined) { right = true; }\r\n        if (up === undefined) { up = true; }\r\n        if (down === undefined) { down = true; }\r\n\r\n        this.checkCollision.left = left;\r\n        this.checkCollision.right = right;\r\n        this.checkCollision.up = up;\r\n        this.checkCollision.down = down;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Pauses the simulation.\r\n     *\r\n     * A paused simulation does not update any existing bodies, or run any Colliders.\r\n     *\r\n     * However, you can still enable and disable bodies within it, or manually run collide or overlap\r\n     * checks.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#pause\r\n     * @fires Phaser.Physics.Arcade.Events#PAUSE\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Arcade.World} This World object.\r\n     */\r\n    pause: function ()\r\n    {\r\n        this.isPaused = true;\r\n\r\n        this.emit(Events.PAUSE);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resumes the simulation, if paused.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#resume\r\n     * @fires Phaser.Physics.Arcade.Events#RESUME\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Arcade.World} This World object.\r\n     */\r\n    resume: function ()\r\n    {\r\n        this.isPaused = false;\r\n\r\n        this.emit(Events.RESUME);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Collider object and adds it to the simulation.\r\n     *\r\n     * A Collider is a way to automatically perform collision checks between two objects,\r\n     * calling the collide and process callbacks if they occur.\r\n     *\r\n     * Colliders are run as part of the World update, after all of the Bodies have updated.\r\n     *\r\n     * By creating a Collider you don't need then call `World.collide` in your `update` loop,\r\n     * as it will be handled for you automatically.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#addCollider\r\n     * @since 3.0.0\r\n     * @see Phaser.Physics.Arcade.World#collide\r\n     *\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object1 - The first object to check for collision.\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object2 - The second object to check for collision.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - The callback to invoke when the two objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - The callback to invoke when the two objects collide. Must return a boolean.\r\n     * @param {*} [callbackContext] - The scope in which to call the callbacks.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Collider} The Collider that was created.\r\n     */\r\n    addCollider: function (object1, object2, collideCallback, processCallback, callbackContext)\r\n    {\r\n        if (collideCallback === undefined) { collideCallback = null; }\r\n        if (processCallback === undefined) { processCallback = null; }\r\n        if (callbackContext === undefined) { callbackContext = collideCallback; }\r\n\r\n        var collider = new Collider(this, false, object1, object2, collideCallback, processCallback, callbackContext);\r\n\r\n        this.colliders.add(collider);\r\n\r\n        return collider;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Overlap Collider object and adds it to the simulation.\r\n     *\r\n     * A Collider is a way to automatically perform overlap checks between two objects,\r\n     * calling the collide and process callbacks if they occur.\r\n     *\r\n     * Colliders are run as part of the World update, after all of the Bodies have updated.\r\n     *\r\n     * By creating a Collider you don't need then call `World.overlap` in your `update` loop,\r\n     * as it will be handled for you automatically.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#addOverlap\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object1 - The first object to check for overlap.\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object2 - The second object to check for overlap.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - The callback to invoke when the two objects overlap.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - The callback to invoke when the two objects overlap. Must return a boolean.\r\n     * @param {*} [callbackContext] - The scope in which to call the callbacks.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Collider} The Collider that was created.\r\n     */\r\n    addOverlap: function (object1, object2, collideCallback, processCallback, callbackContext)\r\n    {\r\n        if (collideCallback === undefined) { collideCallback = null; }\r\n        if (processCallback === undefined) { processCallback = null; }\r\n        if (callbackContext === undefined) { callbackContext = collideCallback; }\r\n\r\n        var collider = new Collider(this, true, object1, object2, collideCallback, processCallback, callbackContext);\r\n\r\n        this.colliders.add(collider);\r\n\r\n        return collider;\r\n    },\r\n\r\n    /**\r\n     * Removes a Collider from the simulation so it is no longer processed.\r\n     *\r\n     * This method does not destroy the Collider. If you wish to add it back at a later stage you can call\r\n     * `World.colliders.add(Collider)`.\r\n     *\r\n     * If you no longer need the Collider you can call the `Collider.destroy` method instead, which will\r\n     * automatically clear all of its references and then remove it from the World. If you call destroy on\r\n     * a Collider you _don't_ need to pass it to this method too.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#removeCollider\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Arcade.Collider} collider - The Collider to remove from the simulation.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.World} This World object.\r\n     */\r\n    removeCollider: function (collider)\r\n    {\r\n        this.colliders.remove(collider);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the frame rate to run the simulation at.\r\n     *\r\n     * The frame rate value is used to simulate a fixed update time step. This fixed\r\n     * time step allows for a straightforward implementation of a deterministic game state.\r\n     *\r\n     * This frame rate is independent of the frequency at which the game is rendering. The\r\n     * higher you set the fps, the more physics simulation steps will occur per game step.\r\n     * Conversely, the lower you set it, the less will take place.\r\n     *\r\n     * You can optionally advance the simulation directly yourself by calling the `step` method.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#setFPS\r\n     * @since 3.10.0\r\n     *\r\n     * @param {integer} framerate - The frame rate to advance the simulation at.\r\n     *\r\n     * @return {this} This World object.\r\n     */\r\n    setFPS: function (framerate)\r\n    {\r\n        this.fps = framerate;\r\n        this._frameTime = 1 / this.fps;\r\n        this._frameTimeMS = 1000 * this._frameTime;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Advances the simulation based on the elapsed time and fps rate.\r\n     *\r\n     * This is called automatically by your Scene and does not need to be invoked directly.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#update\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (this.isPaused || this.bodies.size === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        //  Update all active bodies\r\n        var body;\r\n        var bodies = this.bodies.entries;\r\n\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            body = bodies[i];\r\n\r\n            if (body.enable)\r\n            {\r\n                body.preUpdate();\r\n            }\r\n        }\r\n\r\n        var stepsThisFrame = 1;\r\n        var fixedDelta = this._frameTime;\r\n        var msPerFrame = this._frameTimeMS * this.timeScale;\r\n\r\n        this._elapsed += delta - msPerFrame;\r\n\r\n        //  Always step once, no matter what\r\n        this.step(fixedDelta);\r\n\r\n        while (this._elapsed >= msPerFrame)\r\n        {\r\n            this._elapsed -= msPerFrame;\r\n\r\n            stepsThisFrame++;\r\n\r\n            this.step(fixedDelta);\r\n        }\r\n\r\n        this.stepsLastFrame = stepsThisFrame;\r\n    },\r\n\r\n    /**\r\n     * Advances the simulation by a time increment.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#step\r\n     * @since 3.10.0\r\n     *\r\n     * @param {number} delta - The delta time amount, in seconds, by which to advance the simulation.\r\n     */\r\n    step: function (delta)\r\n    {\r\n        //  Update all active bodies\r\n        var i;\r\n        var body;\r\n        var bodies = this.bodies.entries;\r\n        var len = bodies.length;\r\n\r\n        for (i = 0; i < len; i++)\r\n        {\r\n            body = bodies[i];\r\n\r\n            if (body.enable)\r\n            {\r\n                body.update(delta);\r\n            }\r\n        }\r\n\r\n        //  Optionally populate our dynamic collision tree\r\n        if (this.useTree)\r\n        {\r\n            this.tree.clear();\r\n            this.tree.load(bodies);\r\n        }\r\n\r\n        //  Process any colliders\r\n        var colliders = this.colliders.update();\r\n\r\n        for (i = 0; i < colliders.length; i++)\r\n        {\r\n            var collider = colliders[i];\r\n\r\n            if (collider.active)\r\n            {\r\n                collider.update();\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Updates bodies, draws the debug display, and handles pending queue operations.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#postUpdate\r\n     * @since 3.0.0\r\n     */\r\n    postUpdate: function ()\r\n    {\r\n        var i;\r\n        var body;\r\n        var bodies = this.bodies.entries;\r\n        var len = bodies.length;\r\n\r\n        var dynamic = this.bodies;\r\n        var staticBodies = this.staticBodies;\r\n\r\n        for (i = 0; i < len; i++)\r\n        {\r\n            body = bodies[i];\r\n\r\n            if (body.enable)\r\n            {\r\n                body.postUpdate();\r\n            }\r\n        }\r\n\r\n        if (this.drawDebug)\r\n        {\r\n            var graphics = this.debugGraphic;\r\n\r\n            graphics.clear();\r\n\r\n            for (i = 0; i < len; i++)\r\n            {\r\n                body = bodies[i];\r\n\r\n                if (body.willDrawDebug())\r\n                {\r\n                    body.drawDebug(graphics);\r\n                }\r\n            }\r\n\r\n            bodies = staticBodies.entries;\r\n            len = bodies.length;\r\n\r\n            for (i = 0; i < len; i++)\r\n            {\r\n                body = bodies[i];\r\n\r\n                if (body.willDrawDebug())\r\n                {\r\n                    body.drawDebug(graphics);\r\n                }\r\n            }\r\n        }\r\n\r\n        var pending = this.pendingDestroy;\r\n\r\n        if (pending.size > 0)\r\n        {\r\n            var dynamicTree = this.tree;\r\n            var staticTree = this.staticTree;\r\n\r\n            bodies = pending.entries;\r\n            len = bodies.length;\r\n\r\n            for (i = 0; i < len; i++)\r\n            {\r\n                body = bodies[i];\r\n\r\n                if (body.physicsType === CONST.DYNAMIC_BODY)\r\n                {\r\n                    dynamicTree.remove(body);\r\n                    dynamic.delete(body);\r\n                }\r\n                else if (body.physicsType === CONST.STATIC_BODY)\r\n                {\r\n                    staticTree.remove(body);\r\n                    staticBodies.delete(body);\r\n                }\r\n\r\n                body.world = undefined;\r\n                body.gameObject = undefined;\r\n            }\r\n\r\n            pending.clear();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Calculates a Body's velocity and updates its position.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#updateMotion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Arcade.Body} body - The Body to be updated.\r\n     * @param {number} delta - The delta value to be used in the motion calculations, in seconds.\r\n     */\r\n    updateMotion: function (body, delta)\r\n    {\r\n        if (body.allowRotation)\r\n        {\r\n            this.computeAngularVelocity(body, delta);\r\n        }\r\n\r\n        this.computeVelocity(body, delta);\r\n    },\r\n\r\n    /**\r\n     * Calculates a Body's angular velocity.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#computeAngularVelocity\r\n     * @since 3.10.0\r\n     *\r\n     * @param {Phaser.Physics.Arcade.Body} body - The Body to compute the velocity for.\r\n     * @param {number} delta - The delta value to be used in the calculation, in seconds.\r\n     */\r\n    computeAngularVelocity: function (body, delta)\r\n    {\r\n        var velocity = body.angularVelocity;\r\n        var acceleration = body.angularAcceleration;\r\n        var drag = body.angularDrag;\r\n        var max = body.maxAngular;\r\n\r\n        if (acceleration)\r\n        {\r\n            velocity += acceleration * delta;\r\n        }\r\n        else if (body.allowDrag && drag)\r\n        {\r\n            drag *= delta;\r\n\r\n            if (FuzzyGreaterThan(velocity - drag, 0, 0.1))\r\n            {\r\n                velocity -= drag;\r\n            }\r\n            else if (FuzzyLessThan(velocity + drag, 0, 0.1))\r\n            {\r\n                velocity += drag;\r\n            }\r\n            else\r\n            {\r\n                velocity = 0;\r\n            }\r\n        }\r\n\r\n        velocity = Clamp(velocity, -max, max);\r\n\r\n        var velocityDelta = velocity - body.angularVelocity;\r\n\r\n        body.angularVelocity += velocityDelta;\r\n        body.rotation += (body.angularVelocity * delta);\r\n    },\r\n\r\n    /**\r\n     * Calculates a Body's per-axis velocity.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#computeVelocity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Arcade.Body} body - The Body to compute the velocity for.\r\n     * @param {number} delta - The delta value to be used in the calculation, in seconds.\r\n     */\r\n    computeVelocity: function (body, delta)\r\n    {\r\n        var velocityX = body.velocity.x;\r\n        var accelerationX = body.acceleration.x;\r\n        var dragX = body.drag.x;\r\n        var maxX = body.maxVelocity.x;\r\n\r\n        var velocityY = body.velocity.y;\r\n        var accelerationY = body.acceleration.y;\r\n        var dragY = body.drag.y;\r\n        var maxY = body.maxVelocity.y;\r\n\r\n        var speed = body.speed;\r\n        var maxSpeed = body.maxSpeed;\r\n        var allowDrag = body.allowDrag;\r\n        var useDamping = body.useDamping;\r\n\r\n        if (body.allowGravity)\r\n        {\r\n            velocityX += (this.gravity.x + body.gravity.x) * delta;\r\n            velocityY += (this.gravity.y + body.gravity.y) * delta;\r\n        }\r\n\r\n        if (accelerationX)\r\n        {\r\n            velocityX += accelerationX * delta;\r\n        }\r\n        else if (allowDrag && dragX)\r\n        {\r\n            if (useDamping)\r\n            {\r\n                //  Damping based deceleration\r\n\r\n                velocityX *= dragX;\r\n\r\n                speed = Math.sqrt(velocityX * velocityX + velocityY * velocityY);\r\n\r\n                if (FuzzyEqual(speed, 0, 0.001))\r\n                {\r\n                    velocityX = 0;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                //  Linear deceleration\r\n                dragX *= delta;\r\n\r\n                if (FuzzyGreaterThan(velocityX - dragX, 0, 0.01))\r\n                {\r\n                    velocityX -= dragX;\r\n                }\r\n                else if (FuzzyLessThan(velocityX + dragX, 0, 0.01))\r\n                {\r\n                    velocityX += dragX;\r\n                }\r\n                else\r\n                {\r\n                    velocityX = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (accelerationY)\r\n        {\r\n            velocityY += accelerationY * delta;\r\n        }\r\n        else if (allowDrag && dragY)\r\n        {\r\n            if (useDamping)\r\n            {\r\n                //  Damping based deceleration\r\n                velocityY *= dragY;\r\n\r\n                speed = Math.sqrt(velocityX * velocityX + velocityY * velocityY);\r\n\r\n                if (FuzzyEqual(speed, 0, 0.001))\r\n                {\r\n                    velocityY = 0;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                //  Linear deceleration\r\n                dragY *= delta;\r\n\r\n                if (FuzzyGreaterThan(velocityY - dragY, 0, 0.01))\r\n                {\r\n                    velocityY -= dragY;\r\n                }\r\n                else if (FuzzyLessThan(velocityY + dragY, 0, 0.01))\r\n                {\r\n                    velocityY += dragY;\r\n                }\r\n                else\r\n                {\r\n                    velocityY = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        velocityX = Clamp(velocityX, -maxX, maxX);\r\n        velocityY = Clamp(velocityY, -maxY, maxY);\r\n\r\n        body.velocity.set(velocityX, velocityY);\r\n\r\n        if (maxSpeed > -1 && speed > maxSpeed)\r\n        {\r\n            body.velocity.normalize().scale(maxSpeed);\r\n            speed = maxSpeed;\r\n        }\r\n\r\n        body.speed = speed;\r\n    },\r\n\r\n    /**\r\n     * Separates two Bodies.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#separate\r\n     * @fires Phaser.Physics.Arcade.Events#COLLIDE\r\n     * @fires Phaser.Physics.Arcade.Events#OVERLAP\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Arcade.Body} body1 - The first Body to be separated.\r\n     * @param {Phaser.Physics.Arcade.Body} body2 - The second Body to be separated.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - The process callback.\r\n     * @param {*} [callbackContext] - The context in which to invoke the callback.\r\n     * @param {boolean} [overlapOnly] - If this a collide or overlap check?\r\n     *\r\n     * @return {boolean} True if separation occurred, otherwise false.\r\n     */\r\n    separate: function (body1, body2, processCallback, callbackContext, overlapOnly)\r\n    {\r\n        if (\r\n            !body1.enable ||\r\n            !body2.enable ||\r\n            body1.checkCollision.none ||\r\n            body2.checkCollision.none ||\r\n            !this.intersects(body1, body2))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  They overlap. Is there a custom process callback? If it returns true then we can carry on, otherwise we should abort.\r\n        if (processCallback && processCallback.call(callbackContext, body1.gameObject, body2.gameObject) === false)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  Circle vs. Circle quick bail out\r\n        if (body1.isCircle && body2.isCircle)\r\n        {\r\n            return this.separateCircle(body1, body2, overlapOnly);\r\n        }\r\n\r\n        // We define the behavior of bodies in a collision circle and rectangle\r\n        // If a collision occurs in the corner points of the rectangle, the body behave like circles\r\n\r\n        //  Either body1 or body2 is a circle\r\n        if (body1.isCircle !== body2.isCircle)\r\n        {\r\n            var bodyRect = (body1.isCircle) ? body2 : body1;\r\n            var bodyCircle = (body1.isCircle) ? body1 : body2;\r\n\r\n            var rect = {\r\n                x: bodyRect.x,\r\n                y: bodyRect.y,\r\n                right: bodyRect.right,\r\n                bottom: bodyRect.bottom\r\n            };\r\n\r\n            var circle = bodyCircle.center;\r\n\r\n            if (circle.y < rect.y || circle.y > rect.bottom)\r\n            {\r\n                if (circle.x < rect.x || circle.x > rect.right)\r\n                {\r\n                    return this.separateCircle(body1, body2, overlapOnly);\r\n                }\r\n            }\r\n        }\r\n\r\n        var resultX = false;\r\n        var resultY = false;\r\n\r\n        //  Do we separate on x or y first?\r\n        if (this.forceX || Math.abs(this.gravity.y + body1.gravity.y) < Math.abs(this.gravity.x + body1.gravity.x))\r\n        {\r\n            resultX = SeparateX(body1, body2, overlapOnly, this.OVERLAP_BIAS);\r\n\r\n            //  Are they still intersecting? Let's do the other axis then\r\n            if (this.intersects(body1, body2))\r\n            {\r\n                resultY = SeparateY(body1, body2, overlapOnly, this.OVERLAP_BIAS);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            resultY = SeparateY(body1, body2, overlapOnly, this.OVERLAP_BIAS);\r\n\r\n            //  Are they still intersecting? Let's do the other axis then\r\n            if (this.intersects(body1, body2))\r\n            {\r\n                resultX = SeparateX(body1, body2, overlapOnly, this.OVERLAP_BIAS);\r\n            }\r\n        }\r\n\r\n        var result = (resultX || resultY);\r\n\r\n        if (result)\r\n        {\r\n            if (overlapOnly)\r\n            {\r\n                if (body1.onOverlap || body2.onOverlap)\r\n                {\r\n                    this.emit(Events.OVERLAP, body1.gameObject, body2.gameObject, body1, body2);\r\n                }\r\n            }\r\n            else if (body1.onCollide || body2.onCollide)\r\n            {\r\n                this.emit(Events.COLLIDE, body1.gameObject, body2.gameObject, body1, body2);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Separates two Bodies, when both are circular.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#separateCircle\r\n     * @fires Phaser.Physics.Arcade.Events#COLLIDE\r\n     * @fires Phaser.Physics.Arcade.Events#OVERLAP\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Arcade.Body} body1 - The first Body to be separated.\r\n     * @param {Phaser.Physics.Arcade.Body} body2 - The second Body to be separated.\r\n     * @param {boolean} [overlapOnly] - If this a collide or overlap check?\r\n     * @param {number} [bias] - A small value added to the calculations.\r\n     *\r\n     * @return {boolean} True if separation occurred, otherwise false.\r\n     */\r\n    separateCircle: function (body1, body2, overlapOnly, bias)\r\n    {\r\n        //  Set the bounding box overlap values into the bodies themselves (hence we don't use the return values here)\r\n        GetOverlapX(body1, body2, false, bias);\r\n        GetOverlapY(body1, body2, false, bias);\r\n\r\n        var overlap = 0;\r\n\r\n        if (body1.isCircle !== body2.isCircle)\r\n        {\r\n            var rect = {\r\n                x: (body2.isCircle) ? body1.position.x : body2.position.x,\r\n                y: (body2.isCircle) ? body1.position.y : body2.position.y,\r\n                right: (body2.isCircle) ? body1.right : body2.right,\r\n                bottom: (body2.isCircle) ? body1.bottom : body2.bottom\r\n            };\r\n\r\n            var circle = {\r\n                x: (body1.isCircle) ? body1.center.x : body2.center.x,\r\n                y: (body1.isCircle) ? body1.center.y : body2.center.y,\r\n                radius: (body1.isCircle) ? body1.halfWidth : body2.halfWidth\r\n            };\r\n\r\n            if (circle.y < rect.y)\r\n            {\r\n                if (circle.x < rect.x)\r\n                {\r\n                    overlap = DistanceBetween(circle.x, circle.y, rect.x, rect.y) - circle.radius;\r\n                }\r\n                else if (circle.x > rect.right)\r\n                {\r\n                    overlap = DistanceBetween(circle.x, circle.y, rect.right, rect.y) - circle.radius;\r\n                }\r\n            }\r\n            else if (circle.y > rect.bottom)\r\n            {\r\n                if (circle.x < rect.x)\r\n                {\r\n                    overlap = DistanceBetween(circle.x, circle.y, rect.x, rect.bottom) - circle.radius;\r\n                }\r\n                else if (circle.x > rect.right)\r\n                {\r\n                    overlap = DistanceBetween(circle.x, circle.y, rect.right, rect.bottom) - circle.radius;\r\n                }\r\n            }\r\n\r\n            overlap *= -1;\r\n        }\r\n        else\r\n        {\r\n            overlap = (body1.halfWidth + body2.halfWidth) - DistanceBetween(body1.center.x, body1.center.y, body2.center.x, body2.center.y);\r\n        }\r\n\r\n        //  Can't separate two immovable bodies, or a body with its own custom separation logic\r\n        if (overlapOnly || overlap === 0 || (body1.immovable && body2.immovable) || body1.customSeparateX || body2.customSeparateX)\r\n        {\r\n            if (overlap !== 0 && (body1.onOverlap || body2.onOverlap))\r\n            {\r\n                this.emit(Events.OVERLAP, body1.gameObject, body2.gameObject, body1, body2);\r\n            }\r\n\r\n            //  return true if there was some overlap, otherwise false\r\n            return (overlap !== 0);\r\n        }\r\n\r\n        var dx = body1.position.x - body2.position.x;\r\n        var dy = body1.position.y - body2.position.y;\r\n        var d = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\r\n        var nx = (body2.position.x - body1.position.x) / d;\r\n        var ny = (body2.position.y - body1.position.y) / d;\r\n        var p = 2 * (body1.velocity.x * nx + body1.velocity.y * ny - body2.velocity.x * nx - body2.velocity.y * ny) / (body1.mass + body2.mass);\r\n\r\n        if (!body1.immovable)\r\n        {\r\n            body1.velocity.x = (body1.velocity.x - p * body1.mass * nx) * body1.bounce.x;\r\n            body1.velocity.y = (body1.velocity.y - p * body1.mass * ny) * body1.bounce.y;\r\n        }\r\n\r\n        if (!body2.immovable)\r\n        {\r\n            body2.velocity.x = (body2.velocity.x + p * body2.mass * nx) * body2.bounce.x;\r\n            body2.velocity.y = (body2.velocity.y + p * body2.mass * ny) * body2.bounce.y;\r\n        }\r\n\r\n        var dvx = body2.velocity.x - body1.velocity.x;\r\n        var dvy = body2.velocity.y - body1.velocity.y;\r\n        var angleCollision = Math.atan2(dvy, dvx);\r\n\r\n        var delta = this._frameTime;\r\n\r\n        if (!body1.immovable)\r\n        {\r\n            body1.x += (body1.velocity.x * delta) - overlap * Math.cos(angleCollision);\r\n            body1.y += (body1.velocity.y * delta) - overlap * Math.sin(angleCollision);\r\n        }\r\n\r\n        if (!body2.immovable)\r\n        {\r\n            body2.x += (body2.velocity.x * delta) + overlap * Math.cos(angleCollision);\r\n            body2.y += (body2.velocity.y * delta) + overlap * Math.sin(angleCollision);\r\n        }\r\n\r\n        if (body1.onCollide || body2.onCollide)\r\n        {\r\n            this.emit(Events.COLLIDE, body1.gameObject, body2.gameObject, body1, body2);\r\n        }\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if two Bodies intersect at all.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#intersects\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Arcade.Body} body1 - The first body to check.\r\n     * @param {Phaser.Physics.Arcade.Body} body2 - The second body to check.\r\n     *\r\n     * @return {boolean} True if the two bodies intersect, otherwise false.\r\n     */\r\n    intersects: function (body1, body2)\r\n    {\r\n        if (body1 === body2)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (!body1.isCircle && !body2.isCircle)\r\n        {\r\n            //  Rect vs. Rect\r\n            return !(\r\n                body1.right <= body2.position.x ||\r\n                body1.bottom <= body2.position.y ||\r\n                body1.position.x >= body2.right ||\r\n                body1.position.y >= body2.bottom\r\n            );\r\n        }\r\n        else if (body1.isCircle)\r\n        {\r\n            if (body2.isCircle)\r\n            {\r\n                //  Circle vs. Circle\r\n                return DistanceBetween(body1.center.x, body1.center.y, body2.center.x, body2.center.y) <= (body1.halfWidth + body2.halfWidth);\r\n            }\r\n            else\r\n            {\r\n                //  Circle vs. Rect\r\n                return this.circleBodyIntersects(body1, body2);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  Rect vs. Circle\r\n            return this.circleBodyIntersects(body2, body1);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Tests if a circular Body intersects with another Body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#circleBodyIntersects\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Arcade.Body} circle - The circular body to test.\r\n     * @param {Phaser.Physics.Arcade.Body} body - The rectangular body to test.\r\n     *\r\n     * @return {boolean} True if the two bodies intersect, otherwise false.\r\n     */\r\n    circleBodyIntersects: function (circle, body)\r\n    {\r\n        var x = Clamp(circle.center.x, body.left, body.right);\r\n        var y = Clamp(circle.center.y, body.top, body.bottom);\r\n\r\n        var dx = (circle.center.x - x) * (circle.center.x - x);\r\n        var dy = (circle.center.y - y) * (circle.center.y - y);\r\n\r\n        return (dx + dy) <= (circle.halfWidth * circle.halfWidth);\r\n    },\r\n\r\n    /**\r\n     * Tests if Game Objects overlap.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#overlap\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object1 - The first object or array of objects to check.\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} [object2] - The second object or array of objects to check, or `undefined`.\r\n     * @param {ArcadePhysicsCallback} [overlapCallback] - An optional callback function that is called if the objects overlap.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they overlap. If this is set then `overlapCallback` will only be called if this callback returns `true`.\r\n     * @param {*} [callbackContext] - The context in which to run the callbacks.\r\n     *\r\n     * @return {boolean} True if at least one Game Object overlaps another.\r\n     */\r\n    overlap: function (object1, object2, overlapCallback, processCallback, callbackContext)\r\n    {\r\n        if (overlapCallback === undefined) { overlapCallback = null; }\r\n        if (processCallback === undefined) { processCallback = null; }\r\n        if (callbackContext === undefined) { callbackContext = overlapCallback; }\r\n\r\n        return this.collideObjects(object1, object2, overlapCallback, processCallback, callbackContext, true);\r\n    },\r\n\r\n    /**\r\n     * Performs a collision check and separation between the two physics enabled objects given, which can be single\r\n     * Game Objects, arrays of Game Objects, Physics Groups, arrays of Physics Groups or normal Groups.\r\n     *\r\n     * If you don't require separation then use {@link #overlap} instead.\r\n     *\r\n     * If two Groups or arrays are passed, each member of one will be tested against each member of the other.\r\n     *\r\n     * If **only** one Group is passed (as `object1`), each member of the Group will be collided against the other members.\r\n     * \r\n     * If **only** one Array is passed, the array is iterated and every element in it is tested against the others.\r\n     *\r\n     * Two callbacks can be provided. The `collideCallback` is invoked if a collision occurs and the two colliding\r\n     * objects are passed to it.\r\n     *\r\n     * Arcade Physics uses the Projection Method of collision resolution and separation. While it's fast and suitable\r\n     * for 'arcade' style games it lacks stability when multiple objects are in close proximity or resting upon each other.\r\n     * The separation that stops two objects penetrating may create a new penetration against a different object. If you\r\n     * require a high level of stability please consider using an alternative physics system, such as Matter.js.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#collide\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object1 - The first object or array of objects to check.\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} [object2] - The second object or array of objects to check, or `undefined`.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} [callbackContext] - The context in which to run the callbacks.\r\n     *\r\n     * @return {boolean} `true` if any overlapping Game Objects were separated, otherwise `false`.\r\n     */\r\n    collide: function (object1, object2, collideCallback, processCallback, callbackContext)\r\n    {\r\n        if (collideCallback === undefined) { collideCallback = null; }\r\n        if (processCallback === undefined) { processCallback = null; }\r\n        if (callbackContext === undefined) { callbackContext = collideCallback; }\r\n\r\n        return this.collideObjects(object1, object2, collideCallback, processCallback, callbackContext, false);\r\n    },\r\n\r\n    /**\r\n     * Internal helper function. Please use Phaser.Physics.Arcade.World#collide instead.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#collideObjects\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object1 - The first object to check for collision.\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} [object2] - The second object to check for collision.\r\n     * @param {ArcadePhysicsCallback} collideCallback - The callback to invoke when the two objects collide.\r\n     * @param {ArcadePhysicsCallback} processCallback - The callback to invoke when the two objects collide. Must return a boolean.\r\n     * @param {any} callbackContext - The scope in which to call the callbacks.\r\n     * @param {boolean} overlapOnly - Whether this is a collision or overlap check.\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    collideObjects: function (object1, object2, collideCallback, processCallback, callbackContext, overlapOnly)\r\n    {\r\n        var i;\r\n        var j;\r\n\r\n        if (object1.isParent && object1.physicsType === undefined)\r\n        {\r\n            object1 = object1.children.entries;\r\n        }\r\n\r\n        if (object2 && object2.isParent && object2.physicsType === undefined)\r\n        {\r\n            object2 = object2.children.entries;\r\n        }\r\n\r\n        var object1isArray = Array.isArray(object1);\r\n        var object2isArray = Array.isArray(object2);\r\n\r\n        this._total = 0;\r\n\r\n        if (!object1isArray && !object2isArray)\r\n        {\r\n            //  Neither of them are arrays - do this first as it's the most common use-case\r\n            this.collideHandler(object1, object2, collideCallback, processCallback, callbackContext, overlapOnly);\r\n        }\r\n        else if (!object1isArray && object2isArray)\r\n        {\r\n            //  Object 2 is an Array\r\n            for (i = 0; i < object2.length; i++)\r\n            {\r\n                this.collideHandler(object1, object2[i], collideCallback, processCallback, callbackContext, overlapOnly);\r\n            }\r\n        }\r\n        else if (object1isArray && !object2isArray)\r\n        {\r\n            //  Object 1 is an Array\r\n            if (!object2)\r\n            {\r\n                //  Special case for array vs. self\r\n                for (i = 0; i < object1.length; i++)\r\n                {\r\n                    var child = object1[i];\r\n\r\n                    for (j = i + 1; j < object1.length; j++)\r\n                    {\r\n                        if (i === j)\r\n                        {\r\n                            continue;\r\n                        }\r\n\r\n                        this.collideHandler(child, object1[j], collideCallback, processCallback, callbackContext, overlapOnly);\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                for (i = 0; i < object1.length; i++)\r\n                {\r\n                    this.collideHandler(object1[i], object2, collideCallback, processCallback, callbackContext, overlapOnly);\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  They're both arrays\r\n            for (i = 0; i < object1.length; i++)\r\n            {\r\n                for (j = 0; j < object2.length; j++)\r\n                {\r\n                    this.collideHandler(object1[i], object2[j], collideCallback, processCallback, callbackContext, overlapOnly);\r\n                }\r\n            }\r\n        }\r\n\r\n        return (this._total > 0);\r\n    },\r\n\r\n    /**\r\n     * Internal helper function. Please use Phaser.Physics.Arcade.World#collide and Phaser.Physics.Arcade.World#overlap instead.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#collideHandler\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object1 - The first object or array of objects to check.\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object2 - The second object or array of objects to check, or `undefined`.\r\n     * @param {ArcadePhysicsCallback} collideCallback - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} processCallback - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} callbackContext - The context in which to run the callbacks.\r\n     * @param {boolean} overlapOnly - Whether this is a collision or overlap check.\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    collideHandler: function (object1, object2, collideCallback, processCallback, callbackContext, overlapOnly)\r\n    {\r\n        //  Collide Group with Self\r\n        //  Only collide valid objects\r\n        if (object2 === undefined && object1.isParent)\r\n        {\r\n            return this.collideGroupVsGroup(object1, object1, collideCallback, processCallback, callbackContext, overlapOnly);\r\n        }\r\n\r\n        //  If neither of the objects are set then bail out\r\n        if (!object1 || !object2)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  A Body\r\n        if (object1.body)\r\n        {\r\n            if (object2.body)\r\n            {\r\n                return this.collideSpriteVsSprite(object1, object2, collideCallback, processCallback, callbackContext, overlapOnly);\r\n            }\r\n            else if (object2.isParent)\r\n            {\r\n                return this.collideSpriteVsGroup(object1, object2, collideCallback, processCallback, callbackContext, overlapOnly);\r\n            }\r\n            else if (object2.isTilemap)\r\n            {\r\n                return this.collideSpriteVsTilemapLayer(object1, object2, collideCallback, processCallback, callbackContext, overlapOnly);\r\n            }\r\n        }\r\n\r\n        //  GROUPS\r\n        else if (object1.isParent)\r\n        {\r\n            if (object2.body)\r\n            {\r\n                return this.collideSpriteVsGroup(object2, object1, collideCallback, processCallback, callbackContext, overlapOnly);\r\n            }\r\n            else if (object2.isParent)\r\n            {\r\n                return this.collideGroupVsGroup(object1, object2, collideCallback, processCallback, callbackContext, overlapOnly);\r\n            }\r\n            else if (object2.isTilemap)\r\n            {\r\n                return this.collideGroupVsTilemapLayer(object1, object2, collideCallback, processCallback, callbackContext, overlapOnly);\r\n            }\r\n        }\r\n\r\n        //  TILEMAP LAYERS\r\n        else if (object1.isTilemap)\r\n        {\r\n            if (object2.body)\r\n            {\r\n                return this.collideSpriteVsTilemapLayer(object2, object1, collideCallback, processCallback, callbackContext, overlapOnly);\r\n            }\r\n            else if (object2.isParent)\r\n            {\r\n                return this.collideGroupVsTilemapLayer(object2, object1, collideCallback, processCallback, callbackContext, overlapOnly);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal handler for Sprite vs. Sprite collisions.\r\n     * Please use Phaser.Physics.Arcade.World#collide instead.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#collideSpriteVsSprite\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} sprite1 - The first object to check for collision.\r\n     * @param {Phaser.GameObjects.GameObject} sprite2 - The second object to check for collision.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} [callbackContext] - The context in which to run the callbacks.\r\n     * @param {boolean} overlapOnly - Whether this is a collision or overlap check.\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    collideSpriteVsSprite: function (sprite1, sprite2, collideCallback, processCallback, callbackContext, overlapOnly)\r\n    {\r\n        if (!sprite1.body || !sprite2.body)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (this.separate(sprite1.body, sprite2.body, processCallback, callbackContext, overlapOnly))\r\n        {\r\n            if (collideCallback)\r\n            {\r\n                collideCallback.call(callbackContext, sprite1, sprite2);\r\n            }\r\n\r\n            this._total++;\r\n        }\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Internal handler for Sprite vs. Group collisions.\r\n     * Please use Phaser.Physics.Arcade.World#collide instead.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#collideSpriteVsGroup\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} sprite - The first object to check for collision.\r\n     * @param {Phaser.GameObjects.Group} group - The second object to check for collision.\r\n     * @param {ArcadePhysicsCallback} collideCallback - The callback to invoke when the two objects collide.\r\n     * @param {ArcadePhysicsCallback} processCallback - The callback to invoke when the two objects collide. Must return a boolean.\r\n     * @param {any} callbackContext - The scope in which to call the callbacks.\r\n     * @param {boolean} overlapOnly - Whether this is a collision or overlap check.\r\n     *\r\n     * @return {boolean} `true` if the Sprite collided with the given Group, otherwise `false`.\r\n     */\r\n    collideSpriteVsGroup: function (sprite, group, collideCallback, processCallback, callbackContext, overlapOnly)\r\n    {\r\n        var bodyA = sprite.body;\r\n\r\n        if (group.length === 0 || !bodyA || !bodyA.enable)\r\n        {\r\n            return;\r\n        }\r\n\r\n        //  Does sprite collide with anything?\r\n\r\n        var i;\r\n        var len;\r\n        var bodyB;\r\n\r\n        if (this.useTree)\r\n        {\r\n            var minMax = this.treeMinMax;\r\n\r\n            minMax.minX = bodyA.left;\r\n            minMax.minY = bodyA.top;\r\n            minMax.maxX = bodyA.right;\r\n            minMax.maxY = bodyA.bottom;\r\n\r\n            var results = (group.physicsType === CONST.DYNAMIC_BODY) ? this.tree.search(minMax) : this.staticTree.search(minMax);\r\n\r\n            len = results.length;\r\n\r\n            for (i = 0; i < len; i++)\r\n            {\r\n                bodyB = results[i];\r\n\r\n                if (bodyA === bodyB || !group.contains(bodyB.gameObject))\r\n                {\r\n                    //  Skip if comparing against itself, or if bodyB isn't actually part of the Group\r\n                    continue;\r\n                }\r\n\r\n                if (this.separate(bodyA, bodyB, processCallback, callbackContext, overlapOnly))\r\n                {\r\n                    if (collideCallback)\r\n                    {\r\n                        collideCallback.call(callbackContext, bodyA.gameObject, bodyB.gameObject);\r\n                    }\r\n\r\n                    this._total++;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            var children = group.getChildren();\r\n            var skipIndex = group.children.entries.indexOf(sprite);\r\n\r\n            len = children.length;\r\n\r\n            for (i = 0; i < len; i++)\r\n            {\r\n                bodyB = children[i].body;\r\n\r\n                if (!bodyB || i === skipIndex || !bodyB.enable)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                if (this.separate(bodyA, bodyB, processCallback, callbackContext, overlapOnly))\r\n                {\r\n                    if (collideCallback)\r\n                    {\r\n                        collideCallback.call(callbackContext, bodyA.gameObject, bodyB.gameObject);\r\n                    }\r\n\r\n                    this._total++;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal handler for Group vs. Tilemap collisions.\r\n     * Please use Phaser.Physics.Arcade.World#collide instead.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#collideGroupVsTilemapLayer\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Group} group - The first object to check for collision.\r\n     * @param {(Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} tilemapLayer - The second object to check for collision.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} [callbackContext] - The context in which to run the callbacks.\r\n     * @param {boolean} overlapOnly - Whether this is a collision or overlap check.\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    collideGroupVsTilemapLayer: function (group, tilemapLayer, collideCallback, processCallback, callbackContext, overlapOnly)\r\n    {\r\n        var children = group.getChildren();\r\n\r\n        if (children.length === 0)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var didCollide = false;\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            if (children[i].body)\r\n            {\r\n                if (this.collideSpriteVsTilemapLayer(children[i], tilemapLayer, collideCallback, processCallback, callbackContext, overlapOnly))\r\n                {\r\n                    didCollide = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return didCollide;\r\n    },\r\n\r\n    /**\r\n     * This advanced method is specifically for testing for collision between a single Sprite and an array of Tile objects.\r\n     * \r\n     * You should generally use the `collide` method instead, with a Sprite vs. a Tilemap Layer, as that will perform\r\n     * tile filtering and culling for you, as well as handle the interesting face collision automatically.\r\n     * \r\n     * This method is offered for those who would like to check for collision with specific Tiles in a layer, without\r\n     * having to set any collision attributes on the tiles in question. This allows you to perform quick dynamic collisions\r\n     * on small sets of Tiles. As such, no culling or checks are made to the array of Tiles given to this method,\r\n     * you should filter them before passing them to this method.\r\n     * \r\n     * Important: Use of this method skips the `interesting faces` system that Tilemap Layers use. This means if you have\r\n     * say a row or column of tiles, and you jump into, or walk over them, it's possible to get stuck on the edges of the\r\n     * tiles as the interesting face calculations are skipped. However, for quick-fire small collision set tests on\r\n     * dynamic maps, this method can prove very useful.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#collideTiles\r\n     * @fires Phaser.Physics.Arcade.Events#TILE_COLLIDE\r\n     * @since 3.17.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} sprite - The first object to check for collision.\r\n     * @param {Phaser.Tilemaps.Tile[]} tiles - An array of Tiles to check for collision against.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} [callbackContext] - The context in which to run the callbacks.\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    collideTiles: function (sprite, tiles, collideCallback, processCallback, callbackContext)\r\n    {\r\n        if (!sprite.body.enable || tiles.length === 0)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return this.collideSpriteVsTilesHandler(sprite, tiles, collideCallback, processCallback, callbackContext, false, false);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * This advanced method is specifically for testing for overlaps between a single Sprite and an array of Tile objects.\r\n     * \r\n     * You should generally use the `overlap` method instead, with a Sprite vs. a Tilemap Layer, as that will perform\r\n     * tile filtering and culling for you, as well as handle the interesting face collision automatically.\r\n     * \r\n     * This method is offered for those who would like to check for overlaps with specific Tiles in a layer, without\r\n     * having to set any collision attributes on the tiles in question. This allows you to perform quick dynamic overlap\r\n     * tests on small sets of Tiles. As such, no culling or checks are made to the array of Tiles given to this method,\r\n     * you should filter them before passing them to this method.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#overlapTiles\r\n     * @fires Phaser.Physics.Arcade.Events#TILE_OVERLAP\r\n     * @since 3.17.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} sprite - The first object to check for collision.\r\n     * @param {Phaser.Tilemaps.Tile[]} tiles - An array of Tiles to check for collision against.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects overlap.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} [callbackContext] - The context in which to run the callbacks.\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    overlapTiles: function (sprite, tiles, collideCallback, processCallback, callbackContext)\r\n    {\r\n        if (!sprite.body.enable || tiles.length === 0)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return this.collideSpriteVsTilesHandler(sprite, tiles, collideCallback, processCallback, callbackContext, true, false);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal handler for Sprite vs. Tilemap collisions.\r\n     * Please use Phaser.Physics.Arcade.World#collide instead.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#collideSpriteVsTilemapLayer\r\n     * @fires Phaser.Physics.Arcade.Events#TILE_COLLIDE\r\n     * @fires Phaser.Physics.Arcade.Events#TILE_OVERLAP\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} sprite - The first object to check for collision.\r\n     * @param {(Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} tilemapLayer - The second object to check for collision.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} [callbackContext] - The context in which to run the callbacks.\r\n     * @param {boolean} [overlapOnly] - Whether this is a collision or overlap check.\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    collideSpriteVsTilemapLayer: function (sprite, tilemapLayer, collideCallback, processCallback, callbackContext, overlapOnly)\r\n    {\r\n        var body = sprite.body;\r\n\r\n        if (!body.enable)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var x = body.position.x;\r\n        var y = body.position.y;\r\n        var w = body.width;\r\n        var h = body.height;\r\n\r\n        // TODO: this logic should be encapsulated within the Tilemap API at some point.\r\n        // If the maps base tile size differs from the layer's tile size, we need to adjust the\r\n        // selection area by the difference between the two.\r\n        var layerData = tilemapLayer.layer;\r\n\r\n        if (layerData.tileWidth > layerData.baseTileWidth)\r\n        {\r\n            // The x origin of a tile is the left side, so x and width need to be adjusted.\r\n            var xDiff = (layerData.tileWidth - layerData.baseTileWidth) * tilemapLayer.scaleX;\r\n            x -= xDiff;\r\n            w += xDiff;\r\n        }\r\n\r\n        if (layerData.tileHeight > layerData.baseTileHeight)\r\n        {\r\n            // The y origin of a tile is the bottom side, so just the height needs to be adjusted.\r\n            var yDiff = (layerData.tileHeight - layerData.baseTileHeight) * tilemapLayer.scaleY;\r\n            h += yDiff;\r\n        }\r\n\r\n        var mapData = tilemapLayer.getTilesWithinWorldXY(x, y, w, h);\r\n\r\n        if (mapData.length === 0)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return this.collideSpriteVsTilesHandler(sprite, mapData, collideCallback, processCallback, callbackContext, overlapOnly, true);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal handler for Sprite vs. Tilemap collisions.\r\n     * Please use Phaser.Physics.Arcade.World#collide instead.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#collideSpriteVsTilesHandler\r\n     * @fires Phaser.Physics.Arcade.Events#TILE_COLLIDE\r\n     * @fires Phaser.Physics.Arcade.Events#TILE_OVERLAP\r\n     * @private\r\n     * @since 3.17.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} sprite - The first object to check for collision.\r\n     * @param {(Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} tilemapLayer - The second object to check for collision.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} [callbackContext] - The context in which to run the callbacks.\r\n     * @param {boolean} [overlapOnly] - Whether this is a collision or overlap check.\r\n     * @param {boolean} [isLayer] - Is this check coming from a TilemapLayer or an array of tiles?\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    collideSpriteVsTilesHandler: function (sprite, tiles, collideCallback, processCallback, callbackContext, overlapOnly, isLayer)\r\n    {\r\n        var body = sprite.body;\r\n\r\n        var tile;\r\n        var tileWorldRect = { left: 0, right: 0, top: 0, bottom: 0 };\r\n        var tilemapLayer;\r\n        var collision = false;\r\n\r\n        for (var i = 0; i < tiles.length; i++)\r\n        {\r\n            tile = tiles[i];\r\n\r\n            tilemapLayer = tile.tilemapLayer;\r\n\r\n            tileWorldRect.left = tilemapLayer.tileToWorldX(tile.x);\r\n            tileWorldRect.top = tilemapLayer.tileToWorldY(tile.y);\r\n\r\n            // If the map's base tile size differs from the layer's tile size, only the top of the rect\r\n            // needs to be adjusted since its origin is (0, 1).\r\n            if (tile.baseHeight !== tile.height)\r\n            {\r\n                tileWorldRect.top -= (tile.height - tile.baseHeight) * tilemapLayer.scaleY;\r\n            }\r\n\r\n            tileWorldRect.right = tileWorldRect.left + tile.width * tilemapLayer.scaleX;\r\n            tileWorldRect.bottom = tileWorldRect.top + tile.height * tilemapLayer.scaleY;\r\n\r\n            if (TileIntersectsBody(tileWorldRect, body)\r\n                && (!processCallback || processCallback.call(callbackContext, sprite, tile))\r\n                && ProcessTileCallbacks(tile, sprite)\r\n                && (overlapOnly || SeparateTile(i, body, tile, tileWorldRect, tilemapLayer, this.TILE_BIAS, isLayer)))\r\n            {\r\n                this._total++;\r\n\r\n                collision = true;\r\n\r\n                if (collideCallback)\r\n                {\r\n                    collideCallback.call(callbackContext, sprite, tile);\r\n                }\r\n\r\n                if (overlapOnly && body.onOverlap)\r\n                {\r\n                    this.emit(Events.TILE_OVERLAP, sprite, tile, body);\r\n                }\r\n                else if (body.onCollide)\r\n                {\r\n                    this.emit(Events.TILE_COLLIDE, sprite, tile, body);\r\n                }\r\n            }\r\n        }\r\n\r\n        return collision;\r\n    },\r\n\r\n    /**\r\n     * Internal helper for Group vs. Group collisions.\r\n     * Please use Phaser.Physics.Arcade.World#collide instead.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#collideGroupVsGroup\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Group} group1 - The first object to check for collision.\r\n     * @param {Phaser.GameObjects.Group} group2 - The second object to check for collision.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - An optional callback function that is called if the objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two objects if they collide. If this is set then `collideCallback` will only be called if this callback returns `true`.\r\n     * @param {any} [callbackContext] - The context in which to run the callbacks.\r\n     * @param {boolean} overlapOnly - Whether this is a collision or overlap check.\r\n     *\r\n     * @return {boolean} True if any objects overlap (with `overlapOnly`); or true if any overlapping objects were separated.\r\n     */\r\n    collideGroupVsGroup: function (group1, group2, collideCallback, processCallback, callbackContext, overlapOnly)\r\n    {\r\n        if (group1.length === 0 || group2.length === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var children = group1.getChildren();\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            this.collideSpriteVsGroup(children[i], group2, collideCallback, processCallback, callbackContext, overlapOnly);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Wrap an object's coordinates (or several objects' coordinates) within {@link Phaser.Physics.Arcade.World#bounds}.\r\n     *\r\n     * If the object is outside any boundary edge (left, top, right, bottom), it will be moved to the same offset from the opposite edge (the interior).\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#wrap\r\n     * @since 3.3.0\r\n     *\r\n     * @param {*} object - A Game Object, a Group, an object with `x` and `y` coordinates, or an array of such objects.\r\n     * @param {number} [padding=0] - An amount added to each boundary edge during the operation.\r\n     */\r\n    wrap: function (object, padding)\r\n    {\r\n        if (object.body)\r\n        {\r\n            this.wrapObject(object, padding);\r\n        }\r\n        else if (object.getChildren)\r\n        {\r\n            this.wrapArray(object.getChildren(), padding);\r\n        }\r\n        else if (Array.isArray(object))\r\n        {\r\n            this.wrapArray(object, padding);\r\n        }\r\n        else\r\n        {\r\n            this.wrapObject(object, padding);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Wrap each object's coordinates within {@link Phaser.Physics.Arcade.World#bounds}.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#wrapArray\r\n     * @since 3.3.0\r\n     *\r\n     * @param {Array.<*>} objects - An array of objects to be wrapped.\r\n     * @param {number} [padding=0] - An amount added to the boundary.\r\n     */\r\n    wrapArray: function (objects, padding)\r\n    {\r\n        for (var i = 0; i < objects.length; i++)\r\n        {\r\n            this.wrapObject(objects[i], padding);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Wrap an object's coordinates within {@link Phaser.Physics.Arcade.World#bounds}.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#wrapObject\r\n     * @since 3.3.0\r\n     *\r\n     * @param {*} object - A Game Object, a Physics Body, or any object with `x` and `y` coordinates\r\n     * @param {number} [padding=0] - An amount added to the boundary.\r\n     */\r\n    wrapObject: function (object, padding)\r\n    {\r\n        if (padding === undefined) { padding = 0; }\r\n\r\n        object.x = Wrap(object.x, this.bounds.left - padding, this.bounds.right + padding);\r\n        object.y = Wrap(object.y, this.bounds.top - padding, this.bounds.bottom + padding);\r\n    },\r\n\r\n    /**\r\n     * Shuts down the simulation, clearing physics data and removing listeners.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.tree.clear();\r\n        this.staticTree.clear();\r\n        this.bodies.clear();\r\n        this.staticBodies.clear();\r\n        this.colliders.destroy();\r\n\r\n        this.removeAllListeners();\r\n    },\r\n\r\n    /**\r\n     * Shuts down the simulation and disconnects it from the current scene.\r\n     *\r\n     * @method Phaser.Physics.Arcade.World#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = World;\r\n"},"sourceMaps":null,"error":null,"hash":"ea52dba077a4bf3d46fa21e0ec333aa2","cacheData":{"env":{}}}