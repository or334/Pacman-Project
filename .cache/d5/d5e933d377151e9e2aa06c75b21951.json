{"id":"../../node_modules/phaser/src/textures/TextureSource.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../display/canvas/CanvasPool","loc":{"line":7,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\textures\\TextureSource.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\canvas\\CanvasPool.js"},{"name":"../utils/Class","loc":{"line":8,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\textures\\TextureSource.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../math/pow2/IsSizePowerOfTwo","loc":{"line":9,"column":31},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\textures\\TextureSource.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\pow2\\IsSizePowerOfTwo.js"},{"name":"../renderer/ScaleModes","loc":{"line":10,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\textures\\TextureSource.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\ScaleModes.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CanvasPool = require('../display/canvas/CanvasPool');\r\nvar Class = require('../utils/Class');\r\nvar IsSizePowerOfTwo = require('../math/pow2/IsSizePowerOfTwo');\r\nvar ScaleModes = require('../renderer/ScaleModes');\r\n\r\n/**\r\n * @classdesc\r\n * A Texture Source is the encapsulation of the actual source data for a Texture.\r\n * This is typically an Image Element, loaded from the file system or network, or a Canvas Element.\r\n *\r\n * A Texture can contain multiple Texture Sources, which only happens when a multi-atlas is loaded.\r\n *\r\n * @class TextureSource\r\n * @memberof Phaser.Textures\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture this TextureSource belongs to.\r\n * @param {(HTMLImageElement|HTMLCanvasElement)} source - The source image data.\r\n * @param {integer} [width] - Optional width of the source image. If not given it's derived from the source itself.\r\n * @param {integer} [height] - Optional height of the source image. If not given it's derived from the source itself.\r\n */\r\nvar TextureSource = new Class({\r\n\r\n    initialize:\r\n\r\n    function TextureSource (texture, source, width, height)\r\n    {\r\n        var game = texture.manager.game;\r\n\r\n        /**\r\n         * The Texture this TextureSource belongs to.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#renderer\r\n         * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n         * @since 3.7.0\r\n         */\r\n        this.renderer = game.renderer;\r\n\r\n        /**\r\n         * The Texture this TextureSource belongs to.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#texture\r\n         * @type {Phaser.Textures.Texture}\r\n         * @since 3.0.0\r\n         */\r\n        this.texture = texture;\r\n\r\n        /**\r\n         * The source of the image data.\r\n         * This is either an Image Element, a Canvas Element or a RenderTexture.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#source\r\n         * @type {(HTMLImageElement|HTMLCanvasElement|Phaser.GameObjects.RenderTexture)}\r\n         * @since 3.12.0\r\n         */\r\n        this.source = source;\r\n\r\n        /**\r\n         * The image data.\r\n         * This is either an Image element or a Canvas element.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#image\r\n         * @type {(HTMLImageElement|HTMLCanvasElement)}\r\n         * @since 3.0.0\r\n         */\r\n        this.image = source;\r\n\r\n        /**\r\n         * Currently un-used.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#compressionAlgorithm\r\n         * @type {integer}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.compressionAlgorithm = null;\r\n\r\n        /**\r\n         * The resolution of the source image.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#resolution\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.resolution = 1;\r\n\r\n        /**\r\n         * The width of the source image. If not specified in the constructor it will check\r\n         * the `naturalWidth` and then `width` properties of the source image.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#width\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = width || source.naturalWidth || source.width || 0;\r\n\r\n        /**\r\n         * The height of the source image. If not specified in the constructor it will check\r\n         * the `naturalHeight` and then `height` properties of the source image.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#height\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = height || source.naturalHeight || source.height || 0;\r\n\r\n        /**\r\n         * The Scale Mode the image will use when rendering.\r\n         * Either Linear or Nearest.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#scaleMode\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.scaleMode = ScaleModes.DEFAULT;\r\n\r\n        /**\r\n         * Is the source image a Canvas Element?\r\n         *\r\n         * @name Phaser.Textures.TextureSource#isCanvas\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.isCanvas = (source instanceof HTMLCanvasElement);\r\n\r\n        /**\r\n         * Is the source image a Render Texture?\r\n         *\r\n         * @name Phaser.Textures.TextureSource#isRenderTexture\r\n         * @type {boolean}\r\n         * @since 3.12.0\r\n         */\r\n        this.isRenderTexture = (source.type === 'RenderTexture');\r\n\r\n        /**\r\n         * Are the source image dimensions a power of two?\r\n         *\r\n         * @name Phaser.Textures.TextureSource#isPowerOf2\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.isPowerOf2 = IsSizePowerOfTwo(this.width, this.height);\r\n\r\n        /**\r\n         * The WebGL Texture of the source image.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#glTexture\r\n         * @type {?WebGLTexture}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.glTexture = null;\r\n\r\n        this.init(game);\r\n    },\r\n\r\n    /**\r\n     * Creates a WebGL Texture, if required, and sets the Texture filter mode.\r\n     *\r\n     * @method Phaser.Textures.TextureSource#init\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Game} game - A reference to the Phaser Game instance.\r\n     */\r\n    init: function (game)\r\n    {\r\n        if (this.renderer)\r\n        {\r\n            if (this.renderer.gl)\r\n            {\r\n                if (this.isCanvas)\r\n                {\r\n                    this.glTexture = this.renderer.canvasToTexture(this.image);\r\n                }\r\n                else if (this.isRenderTexture)\r\n                {\r\n                    this.image = this.source.canvas;\r\n                 \r\n                    this.glTexture = this.renderer.createTextureFromSource(null, this.width, this.height, this.scaleMode);\r\n                }\r\n                else\r\n                {\r\n                    this.glTexture = this.renderer.createTextureFromSource(this.image, this.width, this.height, this.scaleMode);\r\n                }\r\n            }\r\n            else if (this.isRenderTexture)\r\n            {\r\n                this.image = this.source.canvas;\r\n            }\r\n        }\r\n\r\n        if (!game.config.antialias)\r\n        {\r\n            this.setFilter(1);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the Filter Mode for this Texture.\r\n     *\r\n     * The mode can be either Linear, the default, or Nearest.\r\n     *\r\n     * For pixel-art you should use Nearest.\r\n     *\r\n     * @method Phaser.Textures.TextureSource#setFilter\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Textures.FilterMode} filterMode - The Filter Mode.\r\n     */\r\n    setFilter: function (filterMode)\r\n    {\r\n        if (this.renderer.gl)\r\n        {\r\n            this.renderer.setTextureFilter(this.glTexture, filterMode);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If this TextureSource is backed by a Canvas and is running under WebGL,\r\n     * it updates the WebGLTexture using the canvas data.\r\n     *\r\n     * @method Phaser.Textures.TextureSource#update\r\n     * @since 3.7.0\r\n     */\r\n    update: function ()\r\n    {\r\n        if (this.renderer.gl && this.isCanvas)\r\n        {\r\n            this.glTexture = this.renderer.canvasToTexture(this.image, this.glTexture);\r\n\r\n            //  Update all the Frames using this TextureSource\r\n\r\n            /*\r\n            var index = this.texture.getTextureSourceIndex(this);\r\n            \r\n            var frames = this.texture.getFramesFromTextureSource(index, true);\r\n\r\n            for (var i = 0; i < frames.length; i++)\r\n            {\r\n                frames[i].glTexture = this.glTexture;\r\n            }\r\n            */\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Texture Source and nulls the references.\r\n     *\r\n     * @method Phaser.Textures.TextureSource#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        if (this.glTexture)\r\n        {\r\n            this.renderer.deleteTexture(this.glTexture);\r\n        }\r\n\r\n        if (this.isCanvas)\r\n        {\r\n            CanvasPool.remove(this.image);\r\n        }\r\n\r\n        this.renderer = null;\r\n        this.texture = null;\r\n        this.source = null;\r\n        this.image = null;\r\n        this.glTexture = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TextureSource;\r\n"},"sourceMaps":null,"error":null,"hash":"c09f9f75e777d386b8d907f29d2ea153","cacheData":{"env":{}}}