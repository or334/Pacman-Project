{"id":"../../node_modules/phaser/src/curves/QuadraticBezierCurve.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\curves\\QuadraticBezierCurve.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./Curve","loc":{"line":8,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\curves\\QuadraticBezierCurve.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\curves\\Curve.js"},{"name":"../math/interpolation/QuadraticBezierInterpolation","loc":{"line":9,"column":43},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\curves\\QuadraticBezierCurve.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\interpolation\\QuadraticBezierInterpolation.js"},{"name":"../math/Vector2","loc":{"line":10,"column":22},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\curves\\QuadraticBezierCurve.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Vector2.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Curve = require('./Curve');\r\nvar QuadraticBezierInterpolation = require('../math/interpolation/QuadraticBezierInterpolation');\r\nvar Vector2 = require('../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class QuadraticBezier\r\n * @extends Phaser.Curves.Curve\r\n * @memberof Phaser.Curves\r\n * @constructor\r\n * @since 3.2.0\r\n *\r\n * @param {(Phaser.Math.Vector2|number[])} p0 - Start point, or an array of point pairs.\r\n * @param {Phaser.Math.Vector2} p1 - Control Point 1.\r\n * @param {Phaser.Math.Vector2} p2 - Control Point 2.\r\n */\r\nvar QuadraticBezier = new Class({\r\n\r\n    Extends: Curve,\r\n\r\n    initialize:\r\n\r\n    function QuadraticBezier (p0, p1, p2)\r\n    {\r\n        Curve.call(this, 'QuadraticBezier');\r\n\r\n        if (Array.isArray(p0))\r\n        {\r\n            p2 = new Vector2(p0[4], p0[5]);\r\n            p1 = new Vector2(p0[2], p0[3]);\r\n            p0 = new Vector2(p0[0], p0[1]);\r\n        }\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.QuadraticBezier#p0\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.2.0\r\n         */\r\n        this.p0 = p0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.QuadraticBezier#p1\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.2.0\r\n         */\r\n        this.p1 = p1;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.QuadraticBezier#p2\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.2.0\r\n         */\r\n        this.p2 = p2;\r\n    },\r\n\r\n    /**\r\n     * Gets the starting point on the curve.\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#getStartPoint\r\n     * @since 3.2.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getStartPoint: function (out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        return out.copy(this.p0);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#getResolution\r\n     * @since 3.2.0\r\n     *\r\n     * @param {number} divisions - [description]\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getResolution: function (divisions)\r\n    {\r\n        return divisions;\r\n    },\r\n\r\n    /**\r\n     * Get point at relative position in curve according to length.\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#getPoint\r\n     * @since 3.2.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getPoint: function (t, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        var p0 = this.p0;\r\n        var p1 = this.p1;\r\n        var p2 = this.p2;\r\n\r\n        return out.set(\r\n            QuadraticBezierInterpolation(t, p0.x, p1.x, p2.x),\r\n            QuadraticBezierInterpolation(t, p0.y, p1.y, p2.y)\r\n        );\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#draw\r\n     * @since 3.2.0\r\n     *\r\n     * @generic {Phaser.GameObjects.Graphics} G - [graphics,$return]\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - `Graphics` object to draw onto.\r\n     * @param {integer} [pointsTotal=32] - Number of points to be used for drawing the curve. Higher numbers result in smoother curve but require more processing.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} `Graphics` object that was drawn to.\r\n     */\r\n    draw: function (graphics, pointsTotal)\r\n    {\r\n        if (pointsTotal === undefined) { pointsTotal = 32; }\r\n\r\n        var points = this.getPoints(pointsTotal);\r\n\r\n        graphics.beginPath();\r\n        graphics.moveTo(this.p0.x, this.p0.y);\r\n\r\n        for (var i = 1; i < points.length; i++)\r\n        {\r\n            graphics.lineTo(points[i].x, points[i].y);\r\n        }\r\n\r\n        graphics.strokePath();\r\n\r\n        //  So you can chain graphics calls\r\n        return graphics;\r\n    },\r\n\r\n    /**\r\n     * Converts the curve into a JSON compatible object.\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#toJSON\r\n     * @since 3.2.0\r\n     *\r\n     * @return {Phaser.Types.Curves.JSONCurve} The JSON object containing this curve data.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        return {\r\n            type: this.type,\r\n            points: [\r\n                this.p0.x, this.p0.y,\r\n                this.p1.x, this.p1.y,\r\n                this.p2.x, this.p2.y\r\n            ]\r\n        };\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Creates a curve from a JSON object, e. g. created by `toJSON`.\r\n *\r\n * @function Phaser.Curves.QuadraticBezier.fromJSON\r\n * @since 3.2.0\r\n *\r\n * @param {Phaser.Types.Curves.JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.QuadraticBezier} The created curve instance.\r\n */\r\nQuadraticBezier.fromJSON = function (data)\r\n{\r\n    var points = data.points;\r\n\r\n    var p0 = new Vector2(points[0], points[1]);\r\n    var p1 = new Vector2(points[2], points[3]);\r\n    var p2 = new Vector2(points[4], points[5]);\r\n\r\n    return new QuadraticBezier(p0, p1, p2);\r\n};\r\n\r\nmodule.exports = QuadraticBezier;\r\n"},"sourceMaps":null,"error":null,"hash":"819146a0228b6c2dcf48e1e59eff2316","cacheData":{"env":{}}}