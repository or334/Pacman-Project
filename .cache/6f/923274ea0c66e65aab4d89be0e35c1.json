{"id":"../../node_modules/phaser/src/display/shader/BaseShader.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\shader\\BaseShader.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A BaseShader is a small resource class that contains the data required for a WebGL Shader to be created.\r\n * \r\n * It contains the raw source code to the fragment and vertex shader, as well as an object that defines\r\n * the uniforms the shader requires, if any.\r\n * \r\n * BaseShaders are stored in the Shader Cache, available in a Scene via `this.cache.shaders` and are referenced\r\n * by a unique key-based string. Retrieve them via `this.cache.shaders.get(key)`.\r\n * \r\n * BaseShaders are created automatically by the GLSL File Loader when loading an external shader resource.\r\n * They can also be created at runtime, allowing you to use dynamically generated shader source code.\r\n * \r\n * Default fragment and vertex source is used if not provided in the constructor, setting-up a basic shader,\r\n * suitable for debug rendering.\r\n *\r\n * @class BaseShader\r\n * @memberof Phaser.Display\r\n * @constructor\r\n * @since 3.17.0\r\n *\r\n * @param {string} key - The key of this shader. Must be unique within the shader cache.\r\n * @param {string} [fragmentSrc] - The fragment source for the shader.\r\n * @param {string} [vertexSrc] - The vertex source for the shader.\r\n * @param {any} [uniforms] - Optional object defining the uniforms the shader uses.\r\n */\r\nvar BaseShader = new Class({\r\n\r\n    initialize:\r\n\r\n    function BaseShader (key, fragmentSrc, vertexSrc, uniforms)\r\n    {\r\n        if (!fragmentSrc || fragmentSrc === '')\r\n        {\r\n            fragmentSrc = [\r\n                'precision mediump float;',\r\n\r\n                'uniform vec2 resolution;',\r\n\r\n                'varying vec2 fragCoord;',\r\n\r\n                'void main () {',\r\n                '    vec2 uv = fragCoord / resolution.xy;',\r\n                '    gl_FragColor = vec4(uv.xyx, 1.0);',\r\n                '}'\r\n            ].join('\\n');\r\n        }\r\n\r\n        if (!vertexSrc || vertexSrc === '')\r\n        {\r\n            vertexSrc = [\r\n                'precision mediump float;',\r\n\r\n                'uniform mat4 uProjectionMatrix;',\r\n                'uniform mat4 uViewMatrix;',\r\n\r\n                'attribute vec2 inPosition;',\r\n\r\n                'varying vec2 fragCoord;',\r\n\r\n                'void main () {',\r\n                'gl_Position = uProjectionMatrix * uViewMatrix * vec4(inPosition, 1.0, 1.0);',\r\n                'fragCoord = inPosition;',\r\n                '}'\r\n            ].join('\\n');\r\n        }\r\n\r\n        if (uniforms === undefined) { uniforms = null; }\r\n\r\n        /**\r\n         * The key of this shader, unique within the shader cache of this Phaser game instance.\r\n         *\r\n         * @name Phaser.Display.BaseShader#key\r\n         * @type {string}\r\n         * @since 3.17.0\r\n         */\r\n        this.key = key;\r\n\r\n        /**\r\n         * The source code, as a string, of the fragment shader being used.\r\n         *\r\n         * @name Phaser.Display.BaseShader#fragmentSrc\r\n         * @type {string}\r\n         * @since 3.17.0\r\n         */\r\n        this.fragmentSrc = fragmentSrc;\r\n\r\n        /**\r\n         * The source code, as a string, of the vertex shader being used.\r\n         *\r\n         * @name Phaser.Display.BaseShader#vertexSrc\r\n         * @type {string}\r\n         * @since 3.17.0\r\n         */\r\n        this.vertexSrc = vertexSrc;\r\n\r\n        /**\r\n         * The default uniforms for this shader.\r\n         *\r\n         * @name Phaser.Display.BaseShader#uniforms\r\n         * @type {?any}\r\n         * @since 3.17.0\r\n         */\r\n        this.uniforms = uniforms;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = BaseShader;\r\n"},"sourceMaps":null,"error":null,"hash":"22e75aa274bb137783d92d29f8674c04","cacheData":{"env":{}}}