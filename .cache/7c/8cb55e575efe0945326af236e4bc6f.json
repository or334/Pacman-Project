{"id":"../../node_modules/phaser/src/tweens/builders/TimelineBuilder.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../utils/object/Clone","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\TimelineBuilder.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\Clone.js"},{"name":"../tween/Defaults","loc":{"line":8,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\TimelineBuilder.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\tween\\Defaults.js"},{"name":"../../utils/object/GetAdvancedValue","loc":{"line":9,"column":31},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\TimelineBuilder.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetAdvancedValue.js"},{"name":"./GetBoolean","loc":{"line":10,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\TimelineBuilder.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\GetBoolean.js"},{"name":"./GetEaseFunction","loc":{"line":11,"column":30},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\TimelineBuilder.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\GetEaseFunction.js"},{"name":"./GetNewValue","loc":{"line":12,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\TimelineBuilder.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\GetNewValue.js"},{"name":"./GetTargets","loc":{"line":13,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\TimelineBuilder.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\GetTargets.js"},{"name":"./GetTweens","loc":{"line":14,"column":24},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\TimelineBuilder.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\GetTweens.js"},{"name":"../../utils/object/GetValue","loc":{"line":15,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\TimelineBuilder.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetValue.js"},{"name":"../Timeline","loc":{"line":16,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\TimelineBuilder.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\Timeline.js"},{"name":"./TweenBuilder","loc":{"line":17,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\TimelineBuilder.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\tweens\\builders\\TweenBuilder.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clone = require('../../utils/object/Clone');\r\nvar Defaults = require('../tween/Defaults');\r\nvar GetAdvancedValue = require('../../utils/object/GetAdvancedValue');\r\nvar GetBoolean = require('./GetBoolean');\r\nvar GetEaseFunction = require('./GetEaseFunction');\r\nvar GetNewValue = require('./GetNewValue');\r\nvar GetTargets = require('./GetTargets');\r\nvar GetTweens = require('./GetTweens');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar Timeline = require('../Timeline');\r\nvar TweenBuilder = require('./TweenBuilder');\r\n\r\n/**\r\n * Builds a Timeline of Tweens based on a configuration object.\r\n *\r\n * The configuration object (`config`) can have the following properties:\r\n *\r\n * `tweens` - an array of tween configuration objects to create and add into the new Timeline, as described by `TweenBuilder`. If this doesn't exist or is empty, the Timeline will start off paused and none of the other configuration settings will be read. If it's a function, it will be called and its return value will be used as the array.\r\n * `targets` - an array (or function which returns one) of default targets to which to apply the Timeline. Each individual Tween configuration can override this value.\r\n * `totalDuration` - if specified, each Tween in the Timeline will get an equal portion of this duration, usually in milliseconds, by default. Each individual Tween configuration can override the Tween's duration.\r\n * `duration` - if `totalDuration` is not specified, the default duration, usually in milliseconds, of each Tween which will be created. Each individual Tween configuration can override the Tween's duration.\r\n * `delay`, `easeParams`, `ease`, `hold`, `repeat`, `repeatDelay`, `yoyo`, `flipX`, `flipY` - the default settings for each Tween which will be created, as specified by `TweenBuilder`. Each individual Tween configuration can override any of these values.\r\n * `completeDelay` - if specified, the time to wait, usually in milliseconds, before the Timeline completes.\r\n * `loop` - how many times the Timeline should loop, or -1 to loop indefinitely.\r\n * `loopDelay` - the time, usually in milliseconds, between each loop\r\n * `paused` - if `true`, the Timeline will start paused\r\n * `useFrames` - if `true`, all duration in the Timeline will be in frames instead of milliseconds\r\n * `callbackScope` - the default scope (`this` value) to use for each callback registered by the Timeline Builder. If not specified, the Timeline itself will be used.\r\n * `onStart` - if specified, the `onStart` callback for the Timeline, called every time it starts playing\r\n * `onStartScope` - the scope (`this` value) to use for the `onStart` callback. If not specified, the `callbackScope` will be used.\r\n * `onStartParams` - additional arguments to pass to the `onStart` callback. The Timeline will always be the first argument.\r\n * `onUpdate` - if specified, the `onUpdate` callback for the Timeline, called every frame it's active, regardless of its Tweens\r\n * `onUpdateScope` - the scope (`this` value) to use for the `onUpdate` callback. If not specified, the `callbackScope` will be used.\r\n * `onUpdateParams` - additional arguments to pass to the `onUpdate` callback. The Timeline will always be the first argument.\r\n * `onLoop` - if specified, the `onLoop` callback for the Timeline, called every time it loops\r\n * `onLoopScope` - the scope (`this` value) to use for the `onLoop` callback. If not specified, the `callbackScope` will be used.\r\n * `onLoopParams` - additional arguments to pass to the `onLoop` callback. The Timeline will always be the first argument.\r\n * `onYoyo` - if specified, the `onYoyo` callback for the Timeline, called every time it yoyos\r\n * `onYoyoScope` - the scope (`this` value) to use for the `onYoyo` callback. If not specified, the `callbackScope` will be used.\r\n * `onYoyoParams` - additional arguments to pass to the `onYoyo` callback. The first argument will always be `null`, while the Timeline will always be the second argument.\r\n * `onComplete` - if specified, the `onComplete` callback for the Timeline, called after it completes\r\n * `onCompleteScope` - the scope (`this` value) to use for the `onComplete` callback. If not specified, the `callbackScope` will be used.\r\n * `onCompleteParams` - additional arguments to pass to the `onComplete` callback. The Timeline will always be the first argument.\r\n *\r\n * @function Phaser.Tweens.Builders.TimelineBuilder\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tweens.TweenManager} manager - The Tween Manager to which the Timeline will belong.\r\n * @param {object} config - The configuration object for the Timeline, as described above.\r\n *\r\n * @return {Phaser.Tweens.Timeline} The created Timeline.\r\n */\r\nvar TimelineBuilder = function (manager, config)\r\n{\r\n    var timeline = new Timeline(manager);\r\n\r\n    var tweens = GetTweens(config);\r\n\r\n    if (tweens.length === 0)\r\n    {\r\n        timeline.paused = true;\r\n\r\n        return timeline;\r\n    }\r\n\r\n    var defaults = Clone(Defaults);\r\n\r\n    defaults.targets = GetTargets(config);\r\n\r\n    //  totalDuration: If specified each tween in the Timeline is given an equal portion of the totalDuration\r\n\r\n    var totalDuration = GetAdvancedValue(config, 'totalDuration', 0);\r\n\r\n    if (totalDuration > 0)\r\n    {\r\n        defaults.duration = Math.floor(totalDuration / tweens.length);\r\n    }\r\n    else\r\n    {\r\n        defaults.duration = GetNewValue(config, 'duration', defaults.duration);\r\n    }\r\n\r\n    defaults.delay = GetNewValue(config, 'delay', defaults.delay);\r\n    defaults.easeParams = GetValue(config, 'easeParams', defaults.easeParams);\r\n    defaults.ease = GetEaseFunction(GetValue(config, 'ease', defaults.ease), defaults.easeParams);\r\n    defaults.hold = GetNewValue(config, 'hold', defaults.hold);\r\n    defaults.repeat = GetNewValue(config, 'repeat', defaults.repeat);\r\n    defaults.repeatDelay = GetNewValue(config, 'repeatDelay', defaults.repeatDelay);\r\n    defaults.yoyo = GetBoolean(config, 'yoyo', defaults.yoyo);\r\n    defaults.flipX = GetBoolean(config, 'flipX', defaults.flipX);\r\n    defaults.flipY = GetBoolean(config, 'flipY', defaults.flipY);\r\n\r\n    //  Create the Tweens\r\n    for (var i = 0; i < tweens.length; i++)\r\n    {\r\n        timeline.queue(TweenBuilder(timeline, tweens[i], defaults));\r\n    }\r\n\r\n    timeline.completeDelay = GetAdvancedValue(config, 'completeDelay', 0);\r\n    timeline.loop = Math.round(GetAdvancedValue(config, 'loop', 0));\r\n    timeline.loopDelay = Math.round(GetAdvancedValue(config, 'loopDelay', 0));\r\n    timeline.paused = GetBoolean(config, 'paused', false);\r\n    timeline.useFrames = GetBoolean(config, 'useFrames', false);\r\n\r\n    //  Callbacks\r\n\r\n    var scope = GetValue(config, 'callbackScope', timeline);\r\n\r\n    var timelineArray = [ timeline ];\r\n\r\n    var onStart = GetValue(config, 'onStart', false);\r\n\r\n    //  The Start of the Timeline\r\n    if (onStart)\r\n    {\r\n        var onStartScope = GetValue(config, 'onStartScope', scope);\r\n        var onStartParams = GetValue(config, 'onStartParams', []);\r\n\r\n        timeline.setCallback('onStart', onStart, timelineArray.concat(onStartParams), onStartScope);\r\n    }\r\n\r\n    var onUpdate = GetValue(config, 'onUpdate', false);\r\n\r\n    //  Every time the Timeline updates (regardless which Tweens are running)\r\n    if (onUpdate)\r\n    {\r\n        var onUpdateScope = GetValue(config, 'onUpdateScope', scope);\r\n        var onUpdateParams = GetValue(config, 'onUpdateParams', []);\r\n\r\n        timeline.setCallback('onUpdate', onUpdate, timelineArray.concat(onUpdateParams), onUpdateScope);\r\n    }\r\n\r\n    var onLoop = GetValue(config, 'onLoop', false);\r\n\r\n    //  Called when the whole Timeline loops\r\n    if (onLoop)\r\n    {\r\n        var onLoopScope = GetValue(config, 'onLoopScope', scope);\r\n        var onLoopParams = GetValue(config, 'onLoopParams', []);\r\n\r\n        timeline.setCallback('onLoop', onLoop, timelineArray.concat(onLoopParams), onLoopScope);\r\n    }\r\n\r\n    var onYoyo = GetValue(config, 'onYoyo', false);\r\n\r\n    //  Called when a Timeline yoyos\r\n    if (onYoyo)\r\n    {\r\n        var onYoyoScope = GetValue(config, 'onYoyoScope', scope);\r\n        var onYoyoParams = GetValue(config, 'onYoyoParams', []);\r\n\r\n        timeline.setCallback('onYoyo', onYoyo, timelineArray.concat(null, onYoyoParams), onYoyoScope);\r\n    }\r\n\r\n    var onComplete = GetValue(config, 'onComplete', false);\r\n\r\n    //  Called when the Timeline completes, after the completeDelay, etc.\r\n    if (onComplete)\r\n    {\r\n        var onCompleteScope = GetValue(config, 'onCompleteScope', scope);\r\n        var onCompleteParams = GetValue(config, 'onCompleteParams', []);\r\n\r\n        timeline.setCallback('onComplete', onComplete, timelineArray.concat(onCompleteParams), onCompleteScope);\r\n    }\r\n\r\n    return timeline;\r\n};\r\n\r\nmodule.exports = TimelineBuilder;\r\n"},"sourceMaps":null,"error":null,"hash":"066e3c42787105d94fa3d76d6c307eba","cacheData":{"env":{}}}