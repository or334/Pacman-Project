{"id":"../../node_modules/phaser/src/device/Fullscreen.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Determines the full screen support of the browser running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.fullscreen` from within any Scene.\r\n * \r\n * @typedef {object} Phaser.Device.Fullscreen\r\n * @since 3.0.0\r\n * \r\n * @property {boolean} available - Does the browser support the Full Screen API?\r\n * @property {boolean} keyboard - Does the browser support access to the Keyboard during Full Screen mode?\r\n * @property {string} cancel - If the browser supports the Full Screen API this holds the call you need to use to cancel it.\r\n * @property {string} request - If the browser supports the Full Screen API this holds the call you need to use to activate it.\r\n */\r\nvar Fullscreen = {\r\n\r\n    available: false,\r\n    cancel: '',\r\n    keyboard: false,\r\n    request: ''\r\n\r\n};\r\n\r\n/**\r\n* Checks for support of the Full Screen API.\r\n* \r\n* @ignore\r\n*/\r\nfunction init ()\r\n{\r\n    var i;\r\n\r\n    var suffix1 = 'Fullscreen';\r\n    var suffix2 = 'FullScreen';\r\n\r\n    var fs = [\r\n        'request' + suffix1,\r\n        'request' + suffix2,\r\n        'webkitRequest' + suffix1,\r\n        'webkitRequest' + suffix2,\r\n        'msRequest' + suffix1,\r\n        'msRequest' + suffix2,\r\n        'mozRequest' + suffix2,\r\n        'mozRequest' + suffix1\r\n    ];\r\n\r\n    for (i = 0; i < fs.length; i++)\r\n    {\r\n        if (document.documentElement[fs[i]])\r\n        {\r\n            Fullscreen.available = true;\r\n            Fullscreen.request = fs[i];\r\n            break;\r\n        }\r\n    }\r\n\r\n    var cfs = [\r\n        'cancel' + suffix2,\r\n        'exit' + suffix1,\r\n        'webkitCancel' + suffix2,\r\n        'webkitExit' + suffix1,\r\n        'msCancel' + suffix2,\r\n        'msExit' + suffix1,\r\n        'mozCancel' + suffix2,\r\n        'mozExit' + suffix1\r\n    ];\r\n\r\n    if (Fullscreen.available)\r\n    {\r\n        for (i = 0; i < cfs.length; i++)\r\n        {\r\n            if (document[cfs[i]])\r\n            {\r\n                Fullscreen.cancel = cfs[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    //  Keyboard Input?\r\n    //  Safari 5.1 says it supports fullscreen keyboard, but is lying.\r\n    if (window['Element'] && Element['ALLOW_KEYBOARD_INPUT'] && !(/ Version\\/5\\.1(?:\\.\\d+)? Safari\\//).test(navigator.userAgent))\r\n    {\r\n        Fullscreen.keyboard = true;\r\n    }\r\n\r\n    Object.defineProperty(Fullscreen, 'active', { get: function () { return !!(document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement); } });\r\n\r\n    return Fullscreen;\r\n}\r\n\r\nmodule.exports = init();\r\n"},"sourceMaps":null,"error":null,"hash":"ec6efea60c78f1d4f5492be8b57203b8","cacheData":{"env":{}}}