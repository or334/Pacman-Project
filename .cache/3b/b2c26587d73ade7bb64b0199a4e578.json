{"id":"../../node_modules/phaser/src/physics/matter-js/lib/core/Engine.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../body/World","loc":{"line":15,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Engine.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\body\\World.js"},{"name":"./Sleeping","loc":{"line":16,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Engine.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Sleeping.js"},{"name":"../collision/Resolver","loc":{"line":17,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Engine.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\collision\\Resolver.js"},{"name":"../collision/Pairs","loc":{"line":18,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Engine.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\collision\\Pairs.js"},{"name":"./Metrics","loc":{"line":19,"column":22},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Engine.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Metrics.js"},{"name":"../collision/Grid","loc":{"line":20,"column":19},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Engine.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\collision\\Grid.js"},{"name":"./Events","loc":{"line":21,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Engine.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Events.js"},{"name":"../body/Composite","loc":{"line":22,"column":24},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Engine.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\body\\Composite.js"},{"name":"../constraint/Constraint","loc":{"line":23,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Engine.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\constraint\\Constraint.js"},{"name":"./Common","loc":{"line":24,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Engine.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Common.js"},{"name":"../body/Body","loc":{"line":25,"column":19},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Engine.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\body\\Body.js"}],"generated":{"js":"/**\r\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\r\n* An engine is a controller that manages updating the simulation of the world.\r\n* See `Matter.Runner` for an optional game loop utility.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Engine\r\n*/\r\n\r\nvar Engine = {};\r\n\r\nmodule.exports = Engine;\r\n\r\nvar World = require('../body/World');\r\nvar Sleeping = require('./Sleeping');\r\nvar Resolver = require('../collision/Resolver');\r\nvar Pairs = require('../collision/Pairs');\r\nvar Metrics = require('./Metrics');\r\nvar Grid = require('../collision/Grid');\r\nvar Events = require('./Events');\r\nvar Composite = require('../body/Composite');\r\nvar Constraint = require('../constraint/Constraint');\r\nvar Common = require('./Common');\r\nvar Body = require('../body/Body');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\r\n     * See the properties section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @param {object} [options]\r\n     * @return {engine} engine\r\n     */\r\n    Engine.create = function(element, options) {\r\n        // options may be passed as the first (and only) argument\r\n        options = Common.isElement(element) ? options : element;\r\n        element = Common.isElement(element) ? element : null;\r\n        options = options || {};\r\n\r\n        if (element || options.render) {\r\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\r\n        }\r\n\r\n        var defaults = {\r\n            positionIterations: 6,\r\n            velocityIterations: 4,\r\n            constraintIterations: 2,\r\n            enableSleeping: false,\r\n            events: [],\r\n            plugin: {},\r\n            timing: {\r\n                timestamp: 0,\r\n                timeScale: 1\r\n            },\r\n            broadphase: {\r\n                controller: Grid\r\n            }\r\n        };\r\n\r\n        var engine = Common.extend(defaults, options);\r\n\r\n        // @deprecated\r\n        if (element || engine.render) {\r\n            var renderDefaults = {\r\n                element: element,\r\n                controller: Render\r\n            };\r\n            \r\n            engine.render = Common.extend(renderDefaults, engine.render);\r\n        }\r\n\r\n        // @deprecated\r\n        if (engine.render && engine.render.controller) {\r\n            engine.render = engine.render.controller.create(engine.render);\r\n        }\r\n\r\n        // @deprecated\r\n        if (engine.render) {\r\n            engine.render.engine = engine;\r\n        }\r\n\r\n        engine.world = options.world || World.create(engine.world);\r\n        engine.pairs = Pairs.create();\r\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\r\n        engine.metrics = engine.metrics || { extended: false };\r\n\r\n        // @if DEBUG\r\n        engine.metrics = Metrics.create(engine.metrics);\r\n        // @endif\r\n\r\n        return engine;\r\n    };\r\n\r\n    /**\r\n     * Moves the simulation forward in time by `delta` ms.\r\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\r\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\r\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\r\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\r\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\r\n     *\r\n     * Triggers `beforeUpdate` and `afterUpdate` events.\r\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\r\n     * @method update\r\n     * @param {engine} engine\r\n     * @param {number} [delta=16.666]\r\n     * @param {number} [correction=1]\r\n     */\r\n    Engine.update = function(engine, delta, correction) {\r\n        delta = delta || 1000 / 60;\r\n        correction = correction || 1;\r\n\r\n        var world = engine.world,\r\n            timing = engine.timing,\r\n            broadphase = engine.broadphase,\r\n            broadphasePairs = [],\r\n            i;\r\n\r\n        // increment timestamp\r\n        timing.timestamp += delta * timing.timeScale;\r\n\r\n        // create an event object\r\n        var event = {\r\n            timestamp: timing.timestamp\r\n        };\r\n\r\n        Events.trigger(engine, 'beforeUpdate', event);\r\n\r\n        // get lists of all bodies and constraints, no matter what composites they are in\r\n        var allBodies = Composite.allBodies(world),\r\n            allConstraints = Composite.allConstraints(world);\r\n\r\n        // @if DEBUG\r\n        // reset metrics logging\r\n        Metrics.reset(engine.metrics);\r\n        // @endif\r\n\r\n        // if sleeping enabled, call the sleeping controller\r\n        if (engine.enableSleeping)\r\n            Sleeping.update(allBodies, timing.timeScale);\r\n\r\n        // applies gravity to all bodies\r\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\r\n\r\n        // update all body position and rotation by integration\r\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\r\n\r\n        // update all constraints (first pass)\r\n        Constraint.preSolveAll(allBodies);\r\n        for (i = 0; i < engine.constraintIterations; i++) {\r\n            Constraint.solveAll(allConstraints, timing.timeScale);\r\n        }\r\n        Constraint.postSolveAll(allBodies);\r\n\r\n        // broadphase pass: find potential collision pairs\r\n        if (broadphase.controller) {\r\n            // if world is dirty, we must flush the whole grid\r\n            if (world.isModified)\r\n                broadphase.controller.clear(broadphase);\r\n\r\n            // update the grid buckets based on current bodies\r\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\r\n            broadphasePairs = broadphase.pairsList;\r\n        } else {\r\n            // if no broadphase set, we just pass all bodies\r\n            broadphasePairs = allBodies;\r\n        }\r\n\r\n        // clear all composite modified flags\r\n        if (world.isModified) {\r\n            Composite.setModified(world, false, false, true);\r\n        }\r\n\r\n        // narrowphase pass: find actual collisions, then create or update collision pairs\r\n        var collisions = broadphase.detector(broadphasePairs, engine);\r\n\r\n        // update collision pairs\r\n        var pairs = engine.pairs,\r\n            timestamp = timing.timestamp;\r\n        Pairs.update(pairs, collisions, timestamp);\r\n        Pairs.removeOld(pairs, timestamp);\r\n\r\n        // wake up bodies involved in collisions\r\n        if (engine.enableSleeping)\r\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\r\n\r\n        // trigger collision events\r\n        if (pairs.collisionStart.length > 0)\r\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\r\n\r\n        // iteratively resolve position between collisions\r\n        Resolver.preSolvePosition(pairs.list);\r\n        for (i = 0; i < engine.positionIterations; i++) {\r\n            Resolver.solvePosition(pairs.list, allBodies, timing.timeScale);\r\n        }\r\n        Resolver.postSolvePosition(allBodies);\r\n\r\n        // update all constraints (second pass)\r\n        Constraint.preSolveAll(allBodies);\r\n        for (i = 0; i < engine.constraintIterations; i++) {\r\n            Constraint.solveAll(allConstraints, timing.timeScale);\r\n        }\r\n        Constraint.postSolveAll(allBodies);\r\n\r\n        // iteratively resolve velocity between collisions\r\n        Resolver.preSolveVelocity(pairs.list);\r\n        for (i = 0; i < engine.velocityIterations; i++) {\r\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\r\n        }\r\n\r\n        // trigger collision events\r\n        if (pairs.collisionActive.length > 0)\r\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\r\n\r\n        if (pairs.collisionEnd.length > 0)\r\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\r\n\r\n        // @if DEBUG\r\n        // update metrics log\r\n        Metrics.update(engine.metrics, engine);\r\n        // @endif\r\n\r\n        // clear force buffers\r\n        Engine._bodiesClearForces(allBodies);\r\n\r\n        Events.trigger(engine, 'afterUpdate', event);\r\n\r\n        return engine;\r\n    };\r\n    \r\n    /**\r\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\r\n     * @method merge\r\n     * @param {engine} engineA\r\n     * @param {engine} engineB\r\n     */\r\n    Engine.merge = function(engineA, engineB) {\r\n        Common.extend(engineA, engineB);\r\n        \r\n        if (engineB.world) {\r\n            engineA.world = engineB.world;\r\n\r\n            Engine.clear(engineA);\r\n\r\n            var bodies = Composite.allBodies(engineA.world);\r\n\r\n            for (var i = 0; i < bodies.length; i++) {\r\n                var body = bodies[i];\r\n                Sleeping.set(body, false);\r\n                body.id = Common.nextId();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Clears the engine including the world, pairs and broadphase.\r\n     * @method clear\r\n     * @param {engine} engine\r\n     */\r\n    Engine.clear = function(engine) {\r\n        var world = engine.world;\r\n        \r\n        Pairs.clear(engine.pairs);\r\n\r\n        var broadphase = engine.broadphase;\r\n        if (broadphase.controller) {\r\n            var bodies = Composite.allBodies(world);\r\n            broadphase.controller.clear(broadphase);\r\n            broadphase.controller.update(broadphase, bodies, engine, true);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Zeroes the `body.force` and `body.torque` force buffers.\r\n     * @method _bodiesClearForces\r\n     * @private\r\n     * @param {body[]} bodies\r\n     */\r\n    Engine._bodiesClearForces = function(bodies) {\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n\r\n            // reset force buffers\r\n            body.force.x = 0;\r\n            body.force.y = 0;\r\n            body.torque = 0;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Applys a mass dependant force to all given bodies.\r\n     * @method _bodiesApplyGravity\r\n     * @private\r\n     * @param {body[]} bodies\r\n     * @param {vector} gravity\r\n     */\r\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\r\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\r\n\r\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\r\n            return;\r\n        }\r\n        \r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n\r\n            if (body.ignoreGravity || body.isStatic || body.isSleeping)\r\n                continue;\r\n\r\n            // apply gravity\r\n            body.force.y += body.mass * gravity.y * gravityScale;\r\n            body.force.x += body.mass * gravity.x * gravityScale;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Applys `Body.update` to all given `bodies`.\r\n     * @method _bodiesUpdate\r\n     * @private\r\n     * @param {body[]} bodies\r\n     * @param {number} deltaTime \r\n     * The amount of time elapsed between updates\r\n     * @param {number} timeScale\r\n     * @param {number} correction \r\n     * The Verlet correction factor (deltaTime / lastDeltaTime)\r\n     * @param {bounds} worldBounds\r\n     */\r\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n\r\n            if (body.isStatic || body.isSleeping)\r\n                continue;\r\n\r\n            Body.update(body, deltaTime, timeScale, correction);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\r\n     * @method run\r\n     * @param {engine} engine\r\n     */\r\n\r\n    /**\r\n    * Fired just before an update\r\n    *\r\n    * @event beforeUpdate\r\n    * @param {} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine update and all collision events\r\n    *\r\n    * @event afterUpdate\r\n    * @param {} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\r\n    *\r\n    * @event collisionStart\r\n    * @param {} event An event object\r\n    * @param {} event.pairs List of affected pairs\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\r\n    *\r\n    * @event collisionActive\r\n    * @param {} event An event object\r\n    * @param {} event.pairs List of affected pairs\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\r\n    *\r\n    * @event collisionEnd\r\n    * @param {} event An event object\r\n    * @param {} event.pairs List of affected pairs\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * An integer `Number` that specifies the number of position iterations to perform each update.\r\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\r\n     *\r\n     * @property positionIterations\r\n     * @type number\r\n     * @default 6\r\n     */\r\n\r\n    /**\r\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\r\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\r\n     *\r\n     * @property velocityIterations\r\n     * @type number\r\n     * @default 4\r\n     */\r\n\r\n    /**\r\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\r\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\r\n     * The default value of `2` is usually very adequate.\r\n     *\r\n     * @property constraintIterations\r\n     * @type number\r\n     * @default 2\r\n     */\r\n\r\n    /**\r\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\r\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\r\n     *\r\n     * @property enableSleeping\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * An `Object` containing properties regarding the timing systems of the engine. \r\n     *\r\n     * @property timing\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the global scaling factor of time for all bodies.\r\n     * A value of `0` freezes the simulation.\r\n     * A value of `0.1` gives a slow-motion effect.\r\n     * A value of `1.2` gives a speed-up effect.\r\n     *\r\n     * @property timing.timeScale\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \r\n     * It is incremented on every `Engine.update` by the given `delta` argument. \r\n     *\r\n     * @property timing.timestamp\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\r\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\r\n     *\r\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\r\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\r\n     *\r\n     * @property render\r\n     * @type render\r\n     * @deprecated see Demo.js for an example of creating a renderer\r\n     * @default a Matter.Render instance\r\n     */\r\n\r\n    /**\r\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\r\n     *\r\n     * @property broadphase\r\n     * @type grid\r\n     * @default a Matter.Grid instance\r\n     */\r\n\r\n    /**\r\n     * A `World` composite object that will contain all simulated bodies and constraints.\r\n     *\r\n     * @property world\r\n     * @type world\r\n     * @default a Matter.World instance\r\n     */\r\n\r\n    /**\r\n     * An object reserved for storing plugin-specific properties.\r\n     *\r\n     * @property plugin\r\n     * @type {}\r\n     */\r\n\r\n})();\r\n"},"sourceMaps":null,"error":null,"hash":"102d8bd58765c6be8ffc85c33af6cb1d","cacheData":{"env":{}}}