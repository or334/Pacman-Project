{"id":"../../node_modules/phaser/src/animations/Animation.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../math/Clamp","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\Animation.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Clamp.js"},{"name":"../utils/Class","loc":{"line":8,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\Animation.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"eventemitter3","loc":{"line":9,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\Animation.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\eventemitter3\\index.js"},{"name":"./events","loc":{"line":10,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\Animation.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\events\\index.js"},{"name":"../utils/array/FindClosestInSorted","loc":{"line":11,"column":34},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\Animation.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\array\\FindClosestInSorted.js"},{"name":"./AnimationFrame","loc":{"line":12,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\Animation.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\AnimationFrame.js"},{"name":"../utils/object/GetValue","loc":{"line":13,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\animations\\Animation.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetValue.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clamp = require('../math/Clamp');\r\nvar Class = require('../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar FindClosestInSorted = require('../utils/array/FindClosestInSorted');\r\nvar Frame = require('./AnimationFrame');\r\nvar GetValue = require('../utils/object/GetValue');\r\n\r\n/**\r\n * @classdesc\r\n * A Frame based Animation.\r\n *\r\n * This consists of a key, some default values (like the frame rate) and a bunch of Frame objects.\r\n *\r\n * The Animation Manager creates these. Game Objects don't own an instance of these directly.\r\n * Game Objects have the Animation Component, which are like playheads to global Animations (these objects)\r\n * So multiple Game Objects can have playheads all pointing to this one Animation instance.\r\n *\r\n * @class Animation\r\n * @memberof Phaser.Animations\r\n * @extends Phaser.Events.EventEmitter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Animations.AnimationManager} manager - A reference to the global Animation Manager\r\n * @param {string} key - The unique identifying string for this animation.\r\n * @param {Phaser.Types.Animations.Animation} config - The Animation configuration.\r\n */\r\nvar Animation = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function Animation (manager, key, config)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the global Animation Manager.\r\n         *\r\n         * @name Phaser.Animations.Animation#manager\r\n         * @type {Phaser.Animations.AnimationManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = manager;\r\n\r\n        /**\r\n         * The unique identifying string for this animation.\r\n         *\r\n         * @name Phaser.Animations.Animation#key\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.key = key;\r\n\r\n        /**\r\n         * A frame based animation (as opposed to a bone based animation)\r\n         *\r\n         * @name Phaser.Animations.Animation#type\r\n         * @type {string}\r\n         * @default frame\r\n         * @since 3.0.0\r\n         */\r\n        this.type = 'frame';\r\n\r\n        /**\r\n         * Extract all the frame data into the frames array.\r\n         *\r\n         * @name Phaser.Animations.Animation#frames\r\n         * @type {Phaser.Animations.AnimationFrame[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.frames = this.getFrames(\r\n            manager.textureManager,\r\n            GetValue(config, 'frames', []),\r\n            GetValue(config, 'defaultTextureKey', null)\r\n        );\r\n\r\n        /**\r\n         * The frame rate of playback in frames per second (default 24 if duration is null)\r\n         *\r\n         * @name Phaser.Animations.Animation#frameRate\r\n         * @type {integer}\r\n         * @default 24\r\n         * @since 3.0.0\r\n         */\r\n        this.frameRate = GetValue(config, 'frameRate', null);\r\n\r\n        /**\r\n         * How long the animation should play for, in milliseconds.\r\n         * If the `frameRate` property has been set then it overrides this value,\r\n         * otherwise the `frameRate` is derived from `duration`.\r\n         *\r\n         * @name Phaser.Animations.Animation#duration\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.duration = GetValue(config, 'duration', null);\r\n\r\n        if (this.duration === null && this.frameRate === null)\r\n        {\r\n            //  No duration or frameRate given, use default frameRate of 24fps\r\n            this.frameRate = 24;\r\n            this.duration = (this.frameRate / this.frames.length) * 1000;\r\n        }\r\n        else if (this.duration && this.frameRate === null)\r\n        {\r\n            //  Duration given but no frameRate, so set the frameRate based on duration\r\n            //  I.e. 12 frames in the animation, duration = 4000 ms\r\n            //  So frameRate is 12 / (4000 / 1000) = 3 fps\r\n            this.frameRate = this.frames.length / (this.duration / 1000);\r\n        }\r\n        else\r\n        {\r\n            //  frameRate given, derive duration from it (even if duration also specified)\r\n            //  I.e. 15 frames in the animation, frameRate = 30 fps\r\n            //  So duration is 15 / 30 = 0.5 * 1000 (half a second, or 500ms)\r\n            this.duration = (this.frames.length / this.frameRate) * 1000;\r\n        }\r\n\r\n        /**\r\n         * How many ms per frame, not including frame specific modifiers.\r\n         *\r\n         * @name Phaser.Animations.Animation#msPerFrame\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.msPerFrame = 1000 / this.frameRate;\r\n\r\n        /**\r\n         * Skip frames if the time lags, or always advanced anyway?\r\n         *\r\n         * @name Phaser.Animations.Animation#skipMissedFrames\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.skipMissedFrames = GetValue(config, 'skipMissedFrames', true);\r\n\r\n        /**\r\n         * The delay in ms before the playback will begin.\r\n         *\r\n         * @name Phaser.Animations.Animation#delay\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.delay = GetValue(config, 'delay', 0);\r\n\r\n        /**\r\n         * Number of times to repeat the animation. Set to -1 to repeat forever.\r\n         *\r\n         * @name Phaser.Animations.Animation#repeat\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.repeat = GetValue(config, 'repeat', 0);\r\n\r\n        /**\r\n         * The delay in ms before the a repeat play starts.\r\n         *\r\n         * @name Phaser.Animations.Animation#repeatDelay\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.repeatDelay = GetValue(config, 'repeatDelay', 0);\r\n\r\n        /**\r\n         * Should the animation yoyo (reverse back down to the start) before repeating?\r\n         *\r\n         * @name Phaser.Animations.Animation#yoyo\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.yoyo = GetValue(config, 'yoyo', false);\r\n\r\n        /**\r\n         * Should the GameObject's `visible` property be set to `true` when the animation starts to play?\r\n         *\r\n         * @name Phaser.Animations.Animation#showOnStart\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.showOnStart = GetValue(config, 'showOnStart', false);\r\n\r\n        /**\r\n         * Should the GameObject's `visible` property be set to `false` when the animation finishes?\r\n         *\r\n         * @name Phaser.Animations.Animation#hideOnComplete\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.hideOnComplete = GetValue(config, 'hideOnComplete', false);\r\n\r\n        /**\r\n         * Global pause. All Game Objects using this Animation instance are impacted by this property.\r\n         *\r\n         * @name Phaser.Animations.Animation#paused\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.paused = false;\r\n\r\n        this.manager.on(Events.PAUSE_ALL, this.pause, this);\r\n        this.manager.on(Events.RESUME_ALL, this.resume, this);\r\n    },\r\n\r\n    /**\r\n     * Add frames to the end of the animation.\r\n     *\r\n     * @method Phaser.Animations.Animation#addFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Types.Animations.AnimationFrame[])} config - [description]\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    addFrame: function (config)\r\n    {\r\n        return this.addFrameAt(this.frames.length, config);\r\n    },\r\n\r\n    /**\r\n     * Add frame/s into the animation.\r\n     *\r\n     * @method Phaser.Animations.Animation#addFrameAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The index to insert the frame at within the animation.\r\n     * @param {(string|Phaser.Types.Animations.AnimationFrame[])} config - [description]\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    addFrameAt: function (index, config)\r\n    {\r\n        var newFrames = this.getFrames(this.manager.textureManager, config);\r\n\r\n        if (newFrames.length > 0)\r\n        {\r\n            if (index === 0)\r\n            {\r\n                this.frames = newFrames.concat(this.frames);\r\n            }\r\n            else if (index === this.frames.length)\r\n            {\r\n                this.frames = this.frames.concat(newFrames);\r\n            }\r\n            else\r\n            {\r\n                var pre = this.frames.slice(0, index);\r\n                var post = this.frames.slice(index);\r\n\r\n                this.frames = pre.concat(newFrames, post);\r\n            }\r\n\r\n            this.updateFrameSequence();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Check if the given frame index is valid.\r\n     *\r\n     * @method Phaser.Animations.Animation#checkFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The index to be checked.\r\n     *\r\n     * @return {boolean} `true` if the index is valid, otherwise `false`.\r\n     */\r\n    checkFrame: function (index)\r\n    {\r\n        return (index >= 0 && index < this.frames.length);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#completeAnimation\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n     */\r\n    completeAnimation: function (component)\r\n    {\r\n        if (this.hideOnComplete)\r\n        {\r\n            component.parent.visible = false;\r\n        }\r\n\r\n        component.stop();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#getFirstTick\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n     * @param {boolean} [includeDelay=true] - [description]\r\n     */\r\n    getFirstTick: function (component, includeDelay)\r\n    {\r\n        if (includeDelay === undefined) { includeDelay = true; }\r\n\r\n        //  When is the first update due?\r\n        component.accumulator = 0;\r\n        component.nextTick = component.msPerFrame + component.currentFrame.duration;\r\n\r\n        if (includeDelay)\r\n        {\r\n            component.nextTick += component._delay;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns the AnimationFrame at the provided index\r\n     *\r\n     * @method Phaser.Animations.Animation#getFrameAt\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The index in the AnimationFrame array\r\n     *\r\n     * @return {Phaser.Animations.AnimationFrame} The frame at the index provided from the animation sequence\r\n     */\r\n    getFrameAt: function (index)\r\n    {\r\n        return this.frames[index];\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#getFrames\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Textures.TextureManager} textureManager - [description]\r\n     * @param {(string|Phaser.Types.Animations.AnimationFrame[])} frames - [description]\r\n     * @param {string} [defaultTextureKey] - [description]\r\n     *\r\n     * @return {Phaser.Animations.AnimationFrame[]} [description]\r\n     */\r\n    getFrames: function (textureManager, frames, defaultTextureKey)\r\n    {\r\n        var out = [];\r\n        var prev;\r\n        var animationFrame;\r\n        var index = 1;\r\n        var i;\r\n        var textureKey;\r\n\r\n        //  if frames is a string, we'll get all the frames from the texture manager as if it's a sprite sheet\r\n        if (typeof frames === 'string')\r\n        {\r\n            textureKey = frames;\r\n\r\n            var texture = textureManager.get(textureKey);\r\n            var frameKeys = texture.getFrameNames();\r\n\r\n            frames = [];\r\n\r\n            frameKeys.forEach(function (idx, value)\r\n            {\r\n                frames.push({ key: textureKey, frame: value });\r\n            });\r\n        }\r\n\r\n        if (!Array.isArray(frames) || frames.length === 0)\r\n        {\r\n            return out;\r\n        }\r\n\r\n        for (i = 0; i < frames.length; i++)\r\n        {\r\n            var item = frames[i];\r\n\r\n            var key = GetValue(item, 'key', defaultTextureKey);\r\n\r\n            if (!key)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            //  Could be an integer or a string\r\n            var frame = GetValue(item, 'frame', 0);\r\n\r\n            //  The actual texture frame\r\n            var textureFrame = textureManager.getFrame(key, frame);\r\n\r\n            animationFrame = new Frame(key, frame, index, textureFrame);\r\n\r\n            animationFrame.duration = GetValue(item, 'duration', 0);\r\n\r\n            animationFrame.isFirst = (!prev);\r\n\r\n            //  The previously created animationFrame\r\n            if (prev)\r\n            {\r\n                prev.nextFrame = animationFrame;\r\n\r\n                animationFrame.prevFrame = prev;\r\n            }\r\n\r\n            out.push(animationFrame);\r\n\r\n            prev = animationFrame;\r\n\r\n            index++;\r\n        }\r\n\r\n        if (out.length > 0)\r\n        {\r\n            animationFrame.isLast = true;\r\n\r\n            //  Link them end-to-end, so they loop\r\n            animationFrame.nextFrame = out[0];\r\n\r\n            out[0].prevFrame = animationFrame;\r\n\r\n            //  Generate the progress data\r\n\r\n            var slice = 1 / (out.length - 1);\r\n\r\n            for (i = 0; i < out.length; i++)\r\n            {\r\n                out[i].progress = i * slice;\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#getNextTick\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n     */\r\n    getNextTick: function (component)\r\n    {\r\n        // accumulator += delta * _timeScale\r\n        // after a large delta surge (perf issue for example) we need to adjust for it here\r\n\r\n        //  When is the next update due?\r\n        component.accumulator -= component.nextTick;\r\n\r\n        component.nextTick = component.msPerFrame + component.currentFrame.duration;\r\n    },\r\n\r\n    /**\r\n     * Loads the Animation values into the Animation Component.\r\n     *\r\n     * @method Phaser.Animations.Animation#load\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - The Animation Component to load values into.\r\n     * @param {integer} startFrame - The start frame of the animation to load.\r\n     */\r\n    load: function (component, startFrame)\r\n    {\r\n        if (startFrame >= this.frames.length)\r\n        {\r\n            startFrame = 0;\r\n        }\r\n\r\n        if (component.currentAnim !== this)\r\n        {\r\n            component.currentAnim = this;\r\n\r\n            component.frameRate = this.frameRate;\r\n            component.duration = this.duration;\r\n            component.msPerFrame = this.msPerFrame;\r\n            component.skipMissedFrames = this.skipMissedFrames;\r\n\r\n            component._delay = this.delay;\r\n            component._repeat = this.repeat;\r\n            component._repeatDelay = this.repeatDelay;\r\n            component._yoyo = this.yoyo;\r\n        }\r\n\r\n        var frame = this.frames[startFrame];\r\n\r\n        if (startFrame === 0 && !component.forward)\r\n        {\r\n            frame = this.getLastFrame();\r\n        }\r\n\r\n        component.updateFrame(frame);\r\n    },\r\n\r\n    /**\r\n     * Returns the frame closest to the given progress value between 0 and 1.\r\n     *\r\n     * @method Phaser.Animations.Animation#getFrameByProgress\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} value - A value between 0 and 1.\r\n     *\r\n     * @return {Phaser.Animations.AnimationFrame} The frame closest to the given progress value.\r\n     */\r\n    getFrameByProgress: function (value)\r\n    {\r\n        value = Clamp(value, 0, 1);\r\n\r\n        return FindClosestInSorted(value, this.frames, 'progress');\r\n    },\r\n\r\n    /**\r\n     * Advance the animation frame.\r\n     *\r\n     * @method Phaser.Animations.Animation#nextFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - The Animation Component to advance.\r\n     */\r\n    nextFrame: function (component)\r\n    {\r\n        var frame = component.currentFrame;\r\n\r\n        //  TODO: Add frame skip support\r\n\r\n        if (frame.isLast)\r\n        {\r\n            //  We're at the end of the animation\r\n\r\n            //  Yoyo? (happens before repeat)\r\n            if (component._yoyo)\r\n            {\r\n                this.handleYoyoFrame(component, false);\r\n            }\r\n            else if (component.repeatCounter > 0)\r\n            {\r\n                //  Repeat (happens before complete)\r\n\r\n                if (component._reverse && component.forward)\r\n                {\r\n                    component.forward = false;\r\n                }\r\n                else\r\n                {\r\n                    this.repeatAnimation(component);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.completeAnimation(component);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.updateAndGetNextTick(component, frame.nextFrame);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Handle the yoyo functionality in nextFrame and previousFrame methods.\r\n     *\r\n     * @method Phaser.Animations.Animation#handleYoyoFrame\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - The Animation Component to advance.\r\n     * @param {boolean} isReverse - Is animation in reverse mode? (Default: false)\r\n     */\r\n    handleYoyoFrame: function (component, isReverse)\r\n    {\r\n        if (!isReverse) { isReverse = false; }\r\n\r\n        if (component._reverse === !isReverse && component.repeatCounter > 0)\r\n        {\r\n            component.forward = isReverse;\r\n\r\n            this.repeatAnimation(component);\r\n\r\n            return;\r\n        }\r\n\r\n        if (component._reverse !== isReverse && component.repeatCounter === 0)\r\n        {\r\n            this.completeAnimation(component);\r\n\r\n            return;\r\n        }\r\n        \r\n        component.forward = isReverse;\r\n\r\n        var frame = (isReverse) ? component.currentFrame.nextFrame : component.currentFrame.prevFrame;\r\n\r\n        this.updateAndGetNextTick(component, frame);\r\n    },\r\n\r\n    /**\r\n     * Returns the animation last frame.\r\n     *\r\n     * @method Phaser.Animations.Animation#getLastFrame\r\n     * @since 3.12.0\r\n     *\r\n     * @return {Phaser.Animations.AnimationFrame} component - The Animation Last Frame.\r\n     */\r\n    getLastFrame: function ()\r\n    {\r\n        return this.frames[this.frames.length - 1];\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#previousFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n     */\r\n    previousFrame: function (component)\r\n    {\r\n        var frame = component.currentFrame;\r\n\r\n        //  TODO: Add frame skip support\r\n\r\n        if (frame.isFirst)\r\n        {\r\n            //  We're at the start of the animation\r\n\r\n            if (component._yoyo)\r\n            {\r\n                this.handleYoyoFrame(component, true);\r\n            }\r\n            else if (component.repeatCounter > 0)\r\n            {\r\n                if (component._reverse && !component.forward)\r\n                {\r\n                    component.currentFrame = this.getLastFrame();\r\n                    this.repeatAnimation(component);\r\n                }\r\n                else\r\n                {\r\n                    //  Repeat (happens before complete)\r\n                    component.forward = true;\r\n                    this.repeatAnimation(component);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.completeAnimation(component);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.updateAndGetNextTick(component, frame.prevFrame);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Update Frame and Wait next tick.\r\n     *\r\n     * @method Phaser.Animations.Animation#updateAndGetNextTick\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} frame - An Animation frame.\r\n     */\r\n    updateAndGetNextTick: function (component, frame)\r\n    {\r\n        component.updateFrame(frame);\r\n\r\n        this.getNextTick(component);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#removeFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} frame - [description]\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    removeFrame: function (frame)\r\n    {\r\n        var index = this.frames.indexOf(frame);\r\n\r\n        if (index !== -1)\r\n        {\r\n            this.removeFrameAt(index);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes a frame from the AnimationFrame array at the provided index\r\n     * and updates the animation accordingly.\r\n     *\r\n     * @method Phaser.Animations.Animation#removeFrameAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The index in the AnimationFrame array\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    removeFrameAt: function (index)\r\n    {\r\n        this.frames.splice(index, 1);\r\n\r\n        this.updateFrameSequence();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#repeatAnimation\r\n     * @fires Phaser.Animations.Events#ANIMATION_REPEAT\r\n     * @fires Phaser.Animations.Events#SPRITE_ANIMATION_REPEAT\r\n     * @fires Phaser.Animations.Events#SPRITE_ANIMATION_KEY_REPEAT\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n     */\r\n    repeatAnimation: function (component)\r\n    {\r\n        if (component._pendingStop === 2)\r\n        {\r\n            return this.completeAnimation(component);\r\n        }\r\n\r\n        if (component._repeatDelay > 0 && component.pendingRepeat === false)\r\n        {\r\n            component.pendingRepeat = true;\r\n            component.accumulator -= component.nextTick;\r\n            component.nextTick += component._repeatDelay;\r\n        }\r\n        else\r\n        {\r\n            component.repeatCounter--;\r\n\r\n            component.updateFrame(component.currentFrame[(component.forward) ? 'nextFrame' : 'prevFrame']);\r\n\r\n            if (component.isPlaying)\r\n            {\r\n                this.getNextTick(component);\r\n\r\n                component.pendingRepeat = false;\r\n\r\n                var frame = component.currentFrame;\r\n                var parent = component.parent;\r\n\r\n                this.emit(Events.ANIMATION_REPEAT, this, frame);\r\n\r\n                parent.emit(Events.SPRITE_ANIMATION_KEY_REPEAT + this.key, this, frame, component.repeatCounter, parent);\r\n\r\n                parent.emit(Events.SPRITE_ANIMATION_REPEAT, this, frame, component.repeatCounter, parent);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the texture frame the animation uses for rendering.\r\n     *\r\n     * @method Phaser.Animations.Animation#setFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n     */\r\n    setFrame: function (component)\r\n    {\r\n        //  Work out which frame should be set next on the child, and set it\r\n        if (component.forward)\r\n        {\r\n            this.nextFrame(component);\r\n        }\r\n        else\r\n        {\r\n            this.previousFrame(component);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Converts the animation data to JSON.\r\n     *\r\n     * @method Phaser.Animations.Animation#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Types.Animations.JSONAnimation} [description]\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var output = {\r\n            key: this.key,\r\n            type: this.type,\r\n            frames: [],\r\n            frameRate: this.frameRate,\r\n            duration: this.duration,\r\n            skipMissedFrames: this.skipMissedFrames,\r\n            delay: this.delay,\r\n            repeat: this.repeat,\r\n            repeatDelay: this.repeatDelay,\r\n            yoyo: this.yoyo,\r\n            showOnStart: this.showOnStart,\r\n            hideOnComplete: this.hideOnComplete\r\n        };\r\n\r\n        this.frames.forEach(function (frame)\r\n        {\r\n            output.frames.push(frame.toJSON());\r\n        });\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#updateFrameSequence\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    updateFrameSequence: function ()\r\n    {\r\n        var len = this.frames.length;\r\n        var slice = 1 / (len - 1);\r\n\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            var frame = this.frames[i];\r\n\r\n            frame.index = i + 1;\r\n            frame.isFirst = false;\r\n            frame.isLast = false;\r\n            frame.progress = i * slice;\r\n\r\n            if (i === 0)\r\n            {\r\n                frame.isFirst = true;\r\n                frame.isLast = (len === 1);\r\n                frame.prevFrame = this.frames[len - 1];\r\n                frame.nextFrame = this.frames[i + 1];\r\n            }\r\n            else if (i === len - 1)\r\n            {\r\n                frame.isLast = true;\r\n                frame.prevFrame = this.frames[len - 2];\r\n                frame.nextFrame = this.frames[0];\r\n            }\r\n            else if (len > 1)\r\n            {\r\n                frame.prevFrame = this.frames[i - 1];\r\n                frame.nextFrame = this.frames[i + 1];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    pause: function ()\r\n    {\r\n        this.paused = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    resume: function ()\r\n    {\r\n        this.paused = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.removeAllListeners();\r\n\r\n        this.manager.off(Events.PAUSE_ALL, this.pause, this);\r\n        this.manager.off(Events.RESUME_ALL, this.resume, this);\r\n\r\n        this.manager.remove(this.key);\r\n\r\n        for (var i = 0; i < this.frames.length; i++)\r\n        {\r\n            this.frames[i].destroy();\r\n        }\r\n\r\n        this.frames = [];\r\n\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Animation;\r\n"},"sourceMaps":null,"error":null,"hash":"5680189aeaed7c54480a121c9c605123","cacheData":{"env":{}}}