{"id":"../../node_modules/phaser/src/physics/arcade/StaticPhysicsGroup.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"./ArcadeSprite","loc":{"line":7,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\StaticPhysicsGroup.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\ArcadeSprite.js"},{"name":"../../utils/Class","loc":{"line":8,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\StaticPhysicsGroup.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./const","loc":{"line":9,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\StaticPhysicsGroup.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\const.js"},{"name":"../../gameobjects/group/Group","loc":{"line":10,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\StaticPhysicsGroup.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\group\\Group.js"},{"name":"../../utils/object/IsPlainObject","loc":{"line":11,"column":28},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\StaticPhysicsGroup.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\IsPlainObject.js"}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2019 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar ArcadeSprite = require('./ArcadeSprite');\nvar Class = require('../../utils/Class');\nvar CONST = require('./const');\nvar Group = require('../../gameobjects/group/Group');\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n\n/**\n * @classdesc\n * An Arcade Physics Static Group object.\n *\n * All Game Objects created by this Group will automatically be given static Arcade Physics bodies.\n *\n * Its dynamic counterpart is {@link Phaser.Physics.Arcade.Group}.\n *\n * @class StaticGroup\n * @extends Phaser.GameObjects.Group\n * @memberof Phaser.Physics.Arcade\n * @constructor\n * @since 3.0.0\n *\n * @param {Phaser.Physics.Arcade.World} world - The physics simulation.\n * @param {Phaser.Scene} scene - The scene this group belongs to.\n * @param {(Phaser.GameObjects.GameObject[]|Phaser.Types.GameObjects.Group.GroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\n * @param {Phaser.Types.GameObjects.Group.GroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig} [config] - Settings for this group.\n */\nvar StaticPhysicsGroup = new Class({\n\n    Extends: Group,\n\n    initialize:\n\n    function StaticPhysicsGroup (world, scene, children, config)\n    {\n        if (!children && !config)\n        {\n            config = {\n                createCallback: this.createCallbackHandler,\n                removeCallback: this.removeCallbackHandler,\n                createMultipleCallback: this.createMultipleCallbackHandler,\n                classType: ArcadeSprite\n            };\n        }\n        else if (IsPlainObject(children))\n        {\n            //  children is a plain object, so swizzle them:\n            config = children;\n            children = null;\n\n            config.createCallback = this.createCallbackHandler;\n            config.removeCallback = this.removeCallbackHandler;\n            config.createMultipleCallback = this.createMultipleCallbackHandler;\n            config.classType = ArcadeSprite;\n        }\n        else if (Array.isArray(children) && IsPlainObject(children[0]))\n        {\n            //  children is an array of plain objects\n            config = children;\n            children = null;\n\n            config.forEach(function (singleConfig)\n            {\n                singleConfig.createCallback = this.createCallbackHandler;\n                singleConfig.removeCallback = this.removeCallbackHandler;\n                singleConfig.createMultipleCallback = this.createMultipleCallbackHandler;\n                singleConfig.classType = ArcadeSprite;\n            });\n        }\n\n        /**\n         * The physics simulation.\n         *\n         * @name Phaser.Physics.Arcade.StaticGroup#world\n         * @type {Phaser.Physics.Arcade.World}\n         * @since 3.0.0\n         */\n        this.world = world;\n\n        /**\n         * The scene this group belongs to.\n         *\n         * @name Phaser.Physics.Arcade.StaticGroup#physicsType\n         * @type {integer}\n         * @default Phaser.Physics.Arcade.STATIC_BODY\n         * @since 3.0.0\n         */\n        this.physicsType = CONST.STATIC_BODY;\n\n        Group.call(this, scene, children, config);\n    },\n\n    /**\n     * Adds a static physics body to the new group member (if it lacks one) and adds it to the simulation.\n     *\n     * @method Phaser.Physics.Arcade.StaticGroup#createCallbackHandler\n     * @since 3.0.0\n     *\n     * @param {Phaser.GameObjects.GameObject} child - The new group member.\n     *\n     * @see Phaser.Physics.Arcade.World#enableBody\n     */\n    createCallbackHandler: function (child)\n    {\n        if (!child.body)\n        {\n            this.world.enableBody(child, CONST.STATIC_BODY);\n        }\n    },\n\n    /**\n     * Disables the group member's physics body, removing it from the simulation.\n     *\n     * @method Phaser.Physics.Arcade.StaticGroup#removeCallbackHandler\n     * @since 3.0.0\n     *\n     * @param {Phaser.GameObjects.GameObject} child - The group member being removed.\n     *\n     * @see Phaser.Physics.Arcade.World#disableBody\n     */\n    removeCallbackHandler: function (child)\n    {\n        if (child.body)\n        {\n            this.world.disableBody(child);\n        }\n    },\n\n    /**\n     * Refreshes the group.\n     *\n     * @method Phaser.Physics.Arcade.StaticGroup#createMultipleCallbackHandler\n     * @since 3.0.0\n     *\n     * @param {Phaser.GameObjects.GameObject[]} entries - The newly created group members.\n     *\n     * @see Phaser.Physics.Arcade.StaticGroup#refresh\n     */\n    createMultipleCallbackHandler: function ()\n    {\n        this.refresh();\n    },\n\n    /**\n     * Resets each Body to the position of its parent Game Object.\n     * Body sizes aren't changed (use {@link Phaser.Physics.Arcade.Components.Enable#refreshBody} for that).\n     *\n     * @method Phaser.Physics.Arcade.StaticGroup#refresh\n     * @since 3.0.0\n     *\n     * @return {Phaser.Physics.Arcade.StaticGroup} This group.\n     *\n     * @see Phaser.Physics.Arcade.StaticBody#reset\n     */\n    refresh: function ()\n    {\n        var children = this.children.entries;\n\n        for (var i = 0; i < children.length; i++)\n        {\n            children[i].body.reset();\n        }\n\n        return this;\n    }\n\n});\n\nmodule.exports = StaticPhysicsGroup;\n"},"sourceMaps":null,"error":null,"hash":"3bb2d597ad5cd83cbb5620978f5fcf86","cacheData":{"env":{}}}