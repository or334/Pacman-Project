{"id":"../../node_modules/phaser/src/utils/array/RemoveBetween.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"./SafeRange","loc":{"line":7,"column":24},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\array\\RemoveBetween.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\array\\SafeRange.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Removes the item within the given range in the array.\r\n * \r\n * The array is modified in-place.\r\n * \r\n * You can optionally specify a callback to be invoked for the item/s successfully removed from the array.\r\n *\r\n * @function Phaser.Utils.Array.RemoveBetween\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be modified.\r\n * @param {integer} startIndex - The start index to remove from.\r\n * @param {integer} endIndex - The end index to remove to.\r\n * @param {function} [callback] - A callback to be invoked for the item removed from the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {Array.<*>} An array of items that were removed.\r\n */\r\nvar RemoveBetween = function (array, startIndex, endIndex, callback, context)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n    if (context === undefined) { context = array; }\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        var size = endIndex - startIndex;\r\n\r\n        var removed = array.splice(startIndex, size);\r\n\r\n        if (callback)\r\n        {\r\n            for (var i = 0; i < removed.length; i++)\r\n            {\r\n                var entry = removed[i];\r\n\r\n                callback.call(context, entry);\r\n            }\r\n        }\r\n\r\n        return removed;\r\n    }\r\n    else\r\n    {\r\n        return [];\r\n    }\r\n};\r\n\r\nmodule.exports = RemoveBetween;\r\n"},"sourceMaps":null,"error":null,"hash":"ca49827842d75efc9170ceb10c43cdd7","cacheData":{"env":{}}}