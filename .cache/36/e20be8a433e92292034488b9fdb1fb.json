{"id":"../../node_modules/phaser/src/tilemaps/components/RenderDebug.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"./GetTilesWithin","loc":{"line":7,"column":29},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\components\\RenderDebug.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\components\\GetTilesWithin.js"},{"name":"../../display/color","loc":{"line":8,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\tilemaps\\components\\RenderDebug.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\color\\index.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar Color = require('../../display/color');\r\n\r\nvar defaultTileColor = new Color(105, 210, 231, 150);\r\nvar defaultCollidingTileColor = new Color(243, 134, 48, 200);\r\nvar defaultFaceColor = new Color(40, 39, 37, 150);\r\n\r\n/**\r\n * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n * wherever you want on the screen.\r\n *\r\n * @function Phaser.Tilemaps.Components.RenderDebug\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n * @param {?Phaser.Display.Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n * @param {?Phaser.Display.Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n * @param {?Phaser.Display.Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n * tile faces. If set to null, interesting tile faces will not be drawn.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar RenderDebug = function (graphics, styleConfig, layer)\r\n{\r\n    if (styleConfig === undefined) { styleConfig = {}; }\r\n\r\n    // Default colors without needlessly creating Color objects\r\n    var tileColor = (styleConfig.tileColor !== undefined) ? styleConfig.tileColor : defaultTileColor;\r\n    var collidingTileColor = (styleConfig.collidingTileColor !== undefined) ? styleConfig.collidingTileColor : defaultCollidingTileColor;\r\n    var faceColor = (styleConfig.faceColor !== undefined) ? styleConfig.faceColor : defaultFaceColor;\r\n\r\n    var tiles = GetTilesWithin(0, 0, layer.width, layer.height, null, layer);\r\n\r\n    graphics.translate(layer.tilemapLayer.x, layer.tilemapLayer.y);\r\n    graphics.scale(layer.tilemapLayer.scaleX, layer.tilemapLayer.scaleY);\r\n\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        var tile = tiles[i];\r\n\r\n        var tw = tile.width;\r\n        var th = tile.height;\r\n        var x = tile.pixelX;\r\n        var y = tile.pixelY;\r\n\r\n        var color = tile.collides ? collidingTileColor : tileColor;\r\n\r\n        if (color !== null)\r\n        {\r\n            graphics.fillStyle(color.color, color.alpha / 255);\r\n            graphics.fillRect(x, y, tw, th);\r\n        }\r\n\r\n        // Inset the face line to prevent neighboring tile's lines from overlapping\r\n        x += 1;\r\n        y += 1;\r\n        tw -= 2;\r\n        th -= 2;\r\n\r\n        if (faceColor !== null)\r\n        {\r\n            graphics.lineStyle(1, faceColor.color, faceColor.alpha / 255);\r\n\r\n            if (tile.faceTop) { graphics.lineBetween(x, y, x + tw, y); }\r\n            if (tile.faceRight) { graphics.lineBetween(x + tw, y, x + tw, y + th); }\r\n            if (tile.faceBottom) { graphics.lineBetween(x, y + th, x + tw, y + th); }\r\n            if (tile.faceLeft) { graphics.lineBetween(x, y, x, y + th); }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = RenderDebug;\r\n"},"sourceMaps":null,"error":null,"hash":"a02af10a53e2c291f5582e41c12012d9","cacheData":{"env":{}}}