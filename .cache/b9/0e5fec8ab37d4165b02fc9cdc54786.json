{"id":"../../node_modules/phaser/src/gameobjects/text/TextStyle.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\text\\TextStyle.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../../utils/object/GetAdvancedValue","loc":{"line":8,"column":31},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\text\\TextStyle.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetAdvancedValue.js"},{"name":"../../utils/object/GetValue","loc":{"line":9,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\text\\TextStyle.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetValue.js"},{"name":"./MeasureText","loc":{"line":10,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\text\\TextStyle.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\text\\MeasureText.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetAdvancedValue = require('../../utils/object/GetAdvancedValue');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar MeasureText = require('./MeasureText');\r\n\r\n//  Key: [ Object Key, Default Value ]\r\n\r\n/**\r\n * A custom function that will be responsible for wrapping the text.\r\n * @callback TextStyleWordWrapCallback\r\n *\r\n * @param {string} text - The string to wrap.\r\n * @param {Phaser.GameObjects.Text} textObject - The Text instance.\r\n *\r\n * @return {(string|string[])} Should return the wrapped lines either as an array of lines or as a string with\r\n * newline characters in place to indicate where breaks should happen.\r\n */\r\n\r\nvar propertyMap = {\r\n    fontFamily: [ 'fontFamily', 'Courier' ],\r\n    fontSize: [ 'fontSize', '16px' ],\r\n    fontStyle: [ 'fontStyle', '' ],\r\n    backgroundColor: [ 'backgroundColor', null ],\r\n    color: [ 'color', '#fff' ],\r\n    stroke: [ 'stroke', '#fff' ],\r\n    strokeThickness: [ 'strokeThickness', 0 ],\r\n    shadowOffsetX: [ 'shadow.offsetX', 0 ],\r\n    shadowOffsetY: [ 'shadow.offsetY', 0 ],\r\n    shadowColor: [ 'shadow.color', '#000' ],\r\n    shadowBlur: [ 'shadow.blur', 0 ],\r\n    shadowStroke: [ 'shadow.stroke', false ],\r\n    shadowFill: [ 'shadow.fill', false ],\r\n    align: [ 'align', 'left' ],\r\n    maxLines: [ 'maxLines', 0 ],\r\n    fixedWidth: [ 'fixedWidth', 0 ],\r\n    fixedHeight: [ 'fixedHeight', 0 ],\r\n    resolution: [ 'resolution', 0 ],\r\n    rtl: [ 'rtl', false ],\r\n    testString: [ 'testString', '|MÃ‰qgy' ],\r\n    baselineX: [ 'baselineX', 1.2 ],\r\n    baselineY: [ 'baselineY', 1.4 ],\r\n    wordWrapWidth: [ 'wordWrap.width', null ],\r\n    wordWrapCallback: [ 'wordWrap.callback', null ],\r\n    wordWrapCallbackScope: [ 'wordWrap.callbackScope', null ],\r\n    wordWrapUseAdvanced: [ 'wordWrap.useAdvancedWrap', false ]\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * A TextStyle class manages all of the style settings for a Text object.\r\n * \r\n * Text Game Objects create a TextStyle instance automatically, which is\r\n * accessed via the `Text.style` property. You do not normally need to\r\n * instantiate one yourself.\r\n *\r\n * @class TextStyle\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Text} text - The Text object that this TextStyle is styling.\r\n * @param {object} style - The style settings to set.\r\n */\r\nvar TextStyle = new Class({\r\n\r\n    initialize:\r\n\r\n    function TextStyle (text, style)\r\n    {\r\n        /**\r\n         * The Text object that this TextStyle is styling.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#parent\r\n         * @type {Phaser.GameObjects.Text}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent = text;\r\n\r\n        /**\r\n         * The font family.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#fontFamily\r\n         * @type {string}\r\n         * @default 'Courier'\r\n         * @since 3.0.0\r\n         */\r\n        this.fontFamily;\r\n\r\n        /**\r\n         * The font size.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#fontSize\r\n         * @type {string}\r\n         * @default '16px'\r\n         * @since 3.0.0\r\n         */\r\n        this.fontSize;\r\n\r\n        /**\r\n         * The font style.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#fontStyle\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.fontStyle;\r\n\r\n        /**\r\n         * The background color.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#backgroundColor\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.backgroundColor;\r\n\r\n        /**\r\n         * The text fill color.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#color\r\n         * @type {string}\r\n         * @default '#fff'\r\n         * @since 3.0.0\r\n         */\r\n        this.color;\r\n\r\n        /**\r\n         * The text stroke color.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#stroke\r\n         * @type {string}\r\n         * @default '#fff'\r\n         * @since 3.0.0\r\n         */\r\n        this.stroke;\r\n\r\n        /**\r\n         * The text stroke thickness.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#strokeThickness\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.strokeThickness;\r\n\r\n        /**\r\n         * The horizontal shadow offset.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#shadowOffsetX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowOffsetX;\r\n\r\n        /**\r\n         * The vertical shadow offset.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#shadowOffsetY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowOffsetY;\r\n\r\n        /**\r\n         * The shadow color.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#shadowColor\r\n         * @type {string}\r\n         * @default '#000'\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowColor;\r\n\r\n        /**\r\n         * The shadow blur radius.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#shadowBlur\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowBlur;\r\n\r\n        /**\r\n         * Whether shadow stroke is enabled or not.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#shadowStroke\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowStroke;\r\n\r\n        /**\r\n         * Whether shadow fill is enabled or not.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#shadowFill\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowFill;\r\n\r\n        /**\r\n         * The text alignment.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#align\r\n         * @type {string}\r\n         * @default 'left'\r\n         * @since 3.0.0\r\n         */\r\n        this.align;\r\n\r\n        /**\r\n         * The maximum number of lines to draw.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#maxLines\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.maxLines;\r\n\r\n        /**\r\n         * The fixed width of the text.\r\n         *\r\n         * `0` means no fixed with.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#fixedWidth\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.fixedWidth;\r\n\r\n        /**\r\n         * The fixed height of the text.\r\n         *\r\n         * `0` means no fixed height.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#fixedHeight\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.fixedHeight;\r\n\r\n        /**\r\n         * The resolution the text is rendered to its internal canvas at.\r\n         * The default is 0, which means it will use the resolution set in the Game Config.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#resolution\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.12.0\r\n         */\r\n        this.resolution;\r\n\r\n        /**\r\n         * Whether the text should render right to left.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#rtl\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.rtl;\r\n\r\n        /**\r\n         * The test string to use when measuring the font.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#testString\r\n         * @type {string}\r\n         * @default '|MÉqgy'\r\n         * @since 3.0.0\r\n         */\r\n        this.testString;\r\n\r\n        /**\r\n         * The amount of horizontal padding adding to the width of the text when calculating the font metrics.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#baselineX\r\n         * @type {number}\r\n         * @default 1.2\r\n         * @since 3.3.0\r\n         */\r\n        this.baselineX;\r\n\r\n        /**\r\n         * The amount of vertical padding adding to the width of the text when calculating the font metrics.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#baselineY\r\n         * @type {number}\r\n         * @default 1.4\r\n         * @since 3.3.0\r\n         */\r\n        this.baselineY;\r\n\r\n        /**\r\n         * The font style, size and family.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#_font\r\n         * @type {string}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._font;\r\n\r\n        //  Set to defaults + user style\r\n        this.setStyle(style, false, true);\r\n\r\n        var metrics = GetValue(style, 'metrics', false);\r\n\r\n        //  Provide optional TextMetrics in the style object to avoid the canvas look-up / scanning\r\n        //  Doing this is reset if you then change the font of this TextStyle after creation\r\n        if (metrics)\r\n        {\r\n            this.metrics = {\r\n                ascent: GetValue(metrics, 'ascent', 0),\r\n                descent: GetValue(metrics, 'descent', 0),\r\n                fontSize: GetValue(metrics, 'fontSize', 0)\r\n            };\r\n        }\r\n        else\r\n        {\r\n            this.metrics = MeasureText(this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set the text style.\r\n     *\r\n     * @example\r\n     * text.setStyle({\r\n     *     fontSize: '64px',\r\n     *     fontFamily: 'Arial',\r\n     *     color: '#ffffff',\r\n     *     align: 'center',\r\n     *     backgroundColor: '#ff00ff'\r\n     * });\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} style - The style settings to set.\r\n     * @param {boolean} [updateText=true] - Whether to update the text immediately.\r\n     * @param {boolean} [setDefaults=false] - Use the default values is not set, or the local values.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setStyle: function (style, updateText, setDefaults)\r\n    {\r\n        if (updateText === undefined) { updateText = true; }\r\n        if (setDefaults === undefined) { setDefaults = false; }\r\n\r\n        //  Avoid type mutation\r\n        if (style && style.hasOwnProperty('fontSize') && typeof style.fontSize === 'number')\r\n        {\r\n            style.fontSize = style.fontSize.toString() + 'px';\r\n        }\r\n\r\n        for (var key in propertyMap)\r\n        {\r\n            var value = (setDefaults) ? propertyMap[key][1] : this[key];\r\n\r\n            if (key === 'wordWrapCallback' || key === 'wordWrapCallbackScope')\r\n            {\r\n                // Callback & scope should be set without processing the values\r\n                this[key] = GetValue(style, propertyMap[key][0], value);\r\n            }\r\n            else\r\n            {\r\n                this[key] = GetAdvancedValue(style, propertyMap[key][0], value);\r\n            }\r\n        }\r\n\r\n        //  Allow for 'font' override\r\n        var font = GetValue(style, 'font', null);\r\n\r\n        if (font !== null)\r\n        {\r\n            this.setFont(font, false);\r\n        }\r\n\r\n        this._font = [ this.fontStyle, this.fontSize, this.fontFamily ].join(' ').trim();\r\n\r\n        //  Allow for 'fill' to be used in place of 'color'\r\n        var fill = GetValue(style, 'fill', null);\r\n\r\n        if (fill !== null)\r\n        {\r\n            this.color = fill;\r\n        }\r\n\r\n        if (updateText)\r\n        {\r\n            return this.update(true);\r\n        }\r\n        else\r\n        {\r\n            return this.parent;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Synchronize the font settings to the given Canvas Rendering Context.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#syncFont\r\n     * @since 3.0.0\r\n     *\r\n     * @param {HTMLCanvasElement} canvas - The Canvas Element.\r\n     * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n     */\r\n    syncFont: function (canvas, context)\r\n    {\r\n        context.font = this._font;\r\n    },\r\n\r\n    /**\r\n     * Synchronize the text style settings to the given Canvas Rendering Context.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#syncStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {HTMLCanvasElement} canvas - The Canvas Element.\r\n     * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n     */\r\n    syncStyle: function (canvas, context)\r\n    {\r\n        context.textBaseline = 'alphabetic';\r\n\r\n        context.fillStyle = this.color;\r\n        context.strokeStyle = this.stroke;\r\n\r\n        context.lineWidth = this.strokeThickness;\r\n        context.lineCap = 'round';\r\n        context.lineJoin = 'round';\r\n    },\r\n\r\n    /**\r\n     * Synchronize the shadow settings to the given Canvas Rendering Context.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#syncShadow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n     * @param {boolean} enabled - Whether shadows are enabled or not.\r\n     */\r\n    syncShadow: function (context, enabled)\r\n    {\r\n        if (enabled)\r\n        {\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n        }\r\n        else\r\n        {\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n            context.shadowColor = 0;\r\n            context.shadowBlur = 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Update the style settings for the parent Text object.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} recalculateMetrics - Whether to recalculate font and text metrics.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    update: function (recalculateMetrics)\r\n    {\r\n        if (recalculateMetrics)\r\n        {\r\n            this._font = [ this.fontStyle, this.fontSize, this.fontFamily ].join(' ').trim();\r\n\r\n            this.metrics = MeasureText(this);\r\n        }\r\n\r\n        return this.parent.updateText();\r\n    },\r\n\r\n    /**\r\n     * Set the font.\r\n     *\r\n     * If a string is given, the font family is set.\r\n     *\r\n     * If an object is given, the `fontFamily`, `fontSize` and `fontStyle`\r\n     * properties of that object are set.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setFont\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|object)} font - The font family or font settings to set.\r\n     * @param {boolean} [updateText=true] - Whether to update the text immediately.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFont: function (font, updateText)\r\n    {\r\n        if (updateText === undefined) { updateText = true; }\r\n\r\n        var fontFamily = font;\r\n        var fontSize = '';\r\n        var fontStyle = '';\r\n\r\n        if (typeof font !== 'string')\r\n        {\r\n            fontFamily = GetValue(font, 'fontFamily', 'Courier');\r\n            fontSize = GetValue(font, 'fontSize', '16px');\r\n            fontStyle = GetValue(font, 'fontStyle', '');\r\n        }\r\n        else\r\n        {\r\n            var fontSplit = font.split(' ');\r\n\r\n            var i = 0;\r\n\r\n            fontStyle = (fontSplit.length > 2) ? fontSplit[i++] : '';\r\n            fontSize = fontSplit[i++] || '16px';\r\n            fontFamily = fontSplit[i++] || 'Courier';\r\n        }\r\n\r\n        if (fontFamily !== this.fontFamily || fontSize !== this.fontSize || fontStyle !== this.fontStyle)\r\n        {\r\n            this.fontFamily = fontFamily;\r\n            this.fontSize = fontSize;\r\n            this.fontStyle = fontStyle;\r\n\r\n            if (updateText)\r\n            {\r\n                this.update(true);\r\n            }\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the font family.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setFontFamily\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} family - The font family.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFontFamily: function (family)\r\n    {\r\n        if (this.fontFamily !== family)\r\n        {\r\n            this.fontFamily = family;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the font style.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setFontStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} style - The font style.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFontStyle: function (style)\r\n    {\r\n        if (this.fontStyle !== style)\r\n        {\r\n            this.fontStyle = style;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the font size.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setFontSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|string)} size - The font size.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFontSize: function (size)\r\n    {\r\n        if (typeof size === 'number')\r\n        {\r\n            size = size.toString() + 'px';\r\n        }\r\n\r\n        if (this.fontSize !== size)\r\n        {\r\n            this.fontSize = size;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the test string to use when measuring the font.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setTestString\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} string - The test string to use when measuring the font.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setTestString: function (string)\r\n    {\r\n        this.testString = string;\r\n\r\n        return this.update(true);\r\n    },\r\n\r\n    /**\r\n     * Set a fixed width and height for the text.\r\n     *\r\n     * Pass in `0` for either of these parameters to disable fixed width or height respectively.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setFixedSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The fixed width to set.\r\n     * @param {number} height - The fixed height to set.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFixedSize: function (width, height)\r\n    {\r\n        this.fixedWidth = width;\r\n        this.fixedHeight = height;\r\n\r\n        if (width)\r\n        {\r\n            this.parent.width = width;\r\n        }\r\n\r\n        if (height)\r\n        {\r\n            this.parent.height = height;\r\n        }\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the background color.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setBackgroundColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The background color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setBackgroundColor: function (color)\r\n    {\r\n        this.backgroundColor = color;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the text fill color.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setFill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The text fill color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFill: function (color)\r\n    {\r\n        this.color = color;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the text fill color.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The text fill color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setColor: function (color)\r\n    {\r\n        this.color = color;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the resolution used by the Text object.\r\n     *\r\n     * By default it will be set to match the resolution set in the Game Config,\r\n     * but you can override it via this method. It allows for much clearer text on High DPI devices,\r\n     * at the cost of memory because it uses larger internal Canvas textures for the Text.\r\n     * \r\n     * Please use with caution, as the more high res Text you have, the more memory it uses up.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setResolution\r\n     * @since 3.12.0\r\n     *\r\n     * @param {number} value - The resolution for this Text object to use.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setResolution: function (value)\r\n    {\r\n        this.resolution = value;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the stroke settings.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setStroke\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The stroke color.\r\n     * @param {number} thickness - The stroke thickness.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setStroke: function (color, thickness)\r\n    {\r\n        if (thickness === undefined) { thickness = this.strokeThickness; }\r\n\r\n        if (color === undefined && this.strokeThickness !== 0)\r\n        {\r\n            //  Reset the stroke to zero (disabling it)\r\n            this.strokeThickness = 0;\r\n\r\n            this.update(true);\r\n        }\r\n        else if (this.stroke !== color || this.strokeThickness !== thickness)\r\n        {\r\n            this.stroke = color;\r\n            this.strokeThickness = thickness;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the shadow settings.\r\n     * \r\n     * Calling this method always re-measures the parent Text object,\r\n     * so only call it when you actually change the shadow settings.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setShadow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal shadow offset.\r\n     * @param {number} [y=0] - The vertical shadow offset.\r\n     * @param {string} [color='#000'] - The shadow color.\r\n     * @param {number} [blur=0] - The shadow blur radius.\r\n     * @param {boolean} [shadowStroke=false] - Whether to stroke the shadow.\r\n     * @param {boolean} [shadowFill=true] - Whether to fill the shadow.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadow: function (x, y, color, blur, shadowStroke, shadowFill)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (color === undefined) { color = '#000'; }\r\n        if (blur === undefined) { blur = 0; }\r\n        if (shadowStroke === undefined) { shadowStroke = false; }\r\n        if (shadowFill === undefined) { shadowFill = true; }\r\n\r\n        this.shadowOffsetX = x;\r\n        this.shadowOffsetY = y;\r\n        this.shadowColor = color;\r\n        this.shadowBlur = blur;\r\n        this.shadowStroke = shadowStroke;\r\n        this.shadowFill = shadowFill;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow offset.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setShadowOffset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal shadow offset.\r\n     * @param {number} [y=0] - The vertical shadow offset.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowOffset: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.shadowOffsetX = x;\r\n        this.shadowOffsetY = y;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow color.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setShadowColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [color='#000'] - The shadow color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowColor: function (color)\r\n    {\r\n        if (color === undefined) { color = '#000'; }\r\n\r\n        this.shadowColor = color;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow blur radius.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setShadowBlur\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [blur=0] - The shadow blur radius.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowBlur: function (blur)\r\n    {\r\n        if (blur === undefined) { blur = 0; }\r\n\r\n        this.shadowBlur = blur;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Enable or disable shadow stroke.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setShadowStroke\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} enabled - Whether shadow stroke is enabled or not.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowStroke: function (enabled)\r\n    {\r\n        this.shadowStroke = enabled;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Enable or disable shadow fill.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setShadowFill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} enabled - Whether shadow fill is enabled or not.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowFill: function (enabled)\r\n    {\r\n        this.shadowFill = enabled;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the width (in pixels) to use for wrapping lines.\r\n     *\r\n     * Pass in null to remove wrapping by width.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setWordWrapWidth\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The maximum width of a line in pixels. Set to null to remove wrapping.\r\n     * @param {boolean} [useAdvancedWrap=false] - Whether or not to use the advanced wrapping\r\n     * algorithm. If true, spaces are collapsed and whitespace is trimmed from lines. If false,\r\n     * spaces and whitespace are left as is.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setWordWrapWidth: function (width, useAdvancedWrap)\r\n    {\r\n        if (useAdvancedWrap === undefined) { useAdvancedWrap = false; }\r\n\r\n        this.wordWrapWidth = width;\r\n        this.wordWrapUseAdvanced = useAdvancedWrap;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set a custom callback for wrapping lines.\r\n     *\r\n     * Pass in null to remove wrapping by callback.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setWordWrapCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {TextStyleWordWrapCallback} callback - A custom function that will be responsible for wrapping the\r\n     * text. It will receive two arguments: text (the string to wrap), textObject (this Text\r\n     * instance). It should return the wrapped lines either as an array of lines or as a string with\r\n     * newline characters in place to indicate where breaks should happen.\r\n     * @param {object} [scope=null] - The scope that will be applied when the callback is invoked.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setWordWrapCallback: function (callback, scope)\r\n    {\r\n        if (scope === undefined) { scope = null; }\r\n\r\n        this.wordWrapCallback = callback;\r\n        this.wordWrapCallbackScope = scope;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the text alignment.\r\n     *\r\n     * Expects values like `'left'`, `'right'`, `'center'` or `'justified'`.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setAlign\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} align - The text alignment.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setAlign: function (align)\r\n    {\r\n        if (align === undefined) { align = 'left'; }\r\n\r\n        this.align = align;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the maximum number of lines to draw.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setMaxLines\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [max=0] - The maximum number of lines to draw.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setMaxLines: function (max)\r\n    {\r\n        if (max === undefined) { max = 0; }\r\n\r\n        this.maxLines = max;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Get the current text metrics.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#getTextMetrics\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Types.GameObjects.Text.TextMetrics} The text metrics.\r\n     */\r\n    getTextMetrics: function ()\r\n    {\r\n        var metrics = this.metrics;\r\n\r\n        return {\r\n            ascent: metrics.ascent,\r\n            descent: metrics.descent,\r\n            fontSize: metrics.fontSize\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Build a JSON representation of this Text Style.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} A JSON representation of this Text Style.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var output = {};\r\n\r\n        for (var key in propertyMap)\r\n        {\r\n            output[key] = this[key];\r\n        }\r\n\r\n        output.metrics = this.getTextMetrics();\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Destroy this Text Style.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.parent = undefined;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TextStyle;\r\n"},"sourceMaps":null,"error":null,"hash":"a4d9af3a45436be7ac6767435e02221d","cacheData":{"env":{}}}