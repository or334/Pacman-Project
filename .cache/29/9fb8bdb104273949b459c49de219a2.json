{"id":"../../node_modules/phaser/src/physics/matter-js/PhysicsEditorParser.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"./lib/factory/Bodies","loc":{"line":7,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\PhysicsEditorParser.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\factory\\Bodies.js"},{"name":"./lib/body/Body","loc":{"line":8,"column":19},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\PhysicsEditorParser.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\body\\Body.js"},{"name":"./lib/geometry/Bounds","loc":{"line":9,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\PhysicsEditorParser.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\geometry\\Bounds.js"},{"name":"./lib/core/Common","loc":{"line":10,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\PhysicsEditorParser.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Common.js"},{"name":"../../utils/object/GetFastValue","loc":{"line":11,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\PhysicsEditorParser.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetFastValue.js"},{"name":"./lib/geometry/Vector","loc":{"line":12,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\PhysicsEditorParser.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\geometry\\Vector.js"},{"name":"./lib/geometry/Vertices","loc":{"line":13,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\PhysicsEditorParser.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\geometry\\Vertices.js"}],"generated":{"js":"/**\r\n * @author       Joachim Grill <joachim@codeandweb.com>\r\n * @copyright    2018 CodeAndWeb GmbH\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Bodies = require('./lib/factory/Bodies');\r\nvar Body = require('./lib/body/Body');\r\nvar Bounds = require('./lib/geometry/Bounds');\r\nvar Common = require('./lib/core/Common');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Vector = require('./lib/geometry/Vector');\r\nvar Vertices = require('./lib/geometry/Vertices');\r\n\r\n/**\r\n * Use PhysicsEditorParser.parseBody() to build a Matter body object, based on a physics data file\r\n * created and exported with PhysicsEditor (https://www.codeandweb.com/physicseditor).\r\n *\r\n * @namespace Phaser.Physics.Matter.PhysicsEditorParser\r\n * @since 3.10.0\r\n */\r\nvar PhysicsEditorParser = {\r\n\r\n    /**\r\n     * Parses a body element exported by PhysicsEditor.\r\n     *\r\n     * @function Phaser.Physics.Matter.PhysicsEditorParser.parseBody\r\n     * @since 3.10.0\r\n     *\r\n     * @param {number} x - x position.\r\n     * @param {number} y - y position.\r\n     * @param {number} w - width.\r\n     * @param {number} h - height.\r\n     * @param {object} config - body configuration and fixture (child body) definitions.\r\n     * \r\n     * @return {object} A matter body, consisting of several parts (child bodies)\r\n     */\r\n    parseBody: function (x, y, w, h, config)\r\n    {\r\n        var fixtureConfigs = GetFastValue(config, 'fixtures', []);\r\n        var fixtures = [];\r\n\r\n        for (var fc = 0; fc < fixtureConfigs.length; fc++)\r\n        {\r\n            var fixtureParts = this.parseFixture(fixtureConfigs[fc]);\r\n\r\n            for (var i = 0; i < fixtureParts.length; i++)\r\n            {\r\n                fixtures.push(fixtureParts[i]);\r\n            }\r\n        }\r\n\r\n        var matterConfig = Common.extend({}, false, config);\r\n\r\n        delete matterConfig.fixtures;\r\n        delete matterConfig.type;\r\n\r\n        var body = Body.create(matterConfig);\r\n\r\n        Body.setParts(body, fixtures);\r\n        body.render.sprite.xOffset = body.position.x / w;\r\n        body.render.sprite.yOffset = body.position.y / h;\r\n        Body.setPosition(body, { x: x, y: y });\r\n\r\n        return body;\r\n    },\r\n\r\n\r\n    /**\r\n     * Parses an element of the \"fixtures\" list exported by PhysicsEditor\r\n     *\r\n     * @function Phaser.Physics.Matter.PhysicsEditorParser.parseFixture\r\n     * @since 3.10.0\r\n     *\r\n     * @param {object} fixtureConfig - the fixture object to parse\r\n     * \r\n     * @return {object[]} - A list of matter bodies\r\n     */\r\n    parseFixture: function (fixtureConfig)\r\n    {\r\n        var matterConfig = Common.extend({}, false, fixtureConfig);\r\n\r\n        delete matterConfig.circle;\r\n        delete matterConfig.vertices;\r\n\r\n        var fixtures;\r\n\r\n        if (fixtureConfig.circle)\r\n        {\r\n            var x = GetFastValue(fixtureConfig.circle, 'x');\r\n            var y = GetFastValue(fixtureConfig.circle, 'y');\r\n            var r = GetFastValue(fixtureConfig.circle, 'radius');\r\n            fixtures = [ Bodies.circle(x, y, r, matterConfig) ];\r\n        }\r\n        else if (fixtureConfig.vertices)\r\n        {\r\n            fixtures = this.parseVertices(fixtureConfig.vertices, matterConfig);\r\n        }\r\n\r\n        return fixtures;\r\n    },\r\n\r\n    /**\r\n     * Parses the \"vertices\" lists exported by PhysicsEditor.\r\n     *\r\n     * @function Phaser.Physics.Matter.PhysicsEditorParser.parseVertices\r\n     * @since 3.10.0\r\n     *\r\n     * @param {object} vertexSets - The vertex lists to parse.\r\n     * @param {object} options - Matter body options.\r\n     * \r\n     * @return {object[]} - A list of matter bodies.\r\n     */\r\n    parseVertices: function (vertexSets, options)\r\n    {\r\n        var i, j, k, v, z;\r\n        var parts = [];\r\n\r\n        options = options || {};\r\n\r\n        for (v = 0; v < vertexSets.length; v += 1)\r\n        {\r\n            parts.push(Body.create(Common.extend({\r\n                position: Vertices.centre(vertexSets[v]),\r\n                vertices: vertexSets[v]\r\n            }, options)));\r\n        }\r\n\r\n        // flag coincident part edges\r\n        var coincidentMaxDist = 5;\r\n\r\n        for (i = 0; i < parts.length; i++)\r\n        {\r\n            var partA = parts[i];\r\n\r\n            for (j = i + 1; j < parts.length; j++)\r\n            {\r\n                var partB = parts[j];\r\n\r\n                if (Bounds.overlaps(partA.bounds, partB.bounds))\r\n                {\r\n                    var pav = partA.vertices,\r\n                        pbv = partB.vertices;\r\n\r\n                    // iterate vertices of both parts\r\n                    for (k = 0; k < partA.vertices.length; k++)\r\n                    {\r\n                        for (z = 0; z < partB.vertices.length; z++)\r\n                        {\r\n                            // find distances between the vertices\r\n                            var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\r\n                                db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\r\n\r\n                            // if both vertices are very close, consider the edge concident (internal)\r\n                            if (da < coincidentMaxDist && db < coincidentMaxDist)\r\n                            {\r\n                                pav[k].isInternal = true;\r\n                                pbv[z].isInternal = true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return parts;\r\n    }\r\n};\r\n\r\nmodule.exports = PhysicsEditorParser;\r\n"},"sourceMaps":null,"error":null,"hash":"d445377c18de3c625ed537a725d8f467","cacheData":{"env":{}}}