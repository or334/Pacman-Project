{"id":"../../node_modules/phaser/src/physics/impact/Body.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\Body.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./COLLIDES","loc":{"line":8,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\Body.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\COLLIDES.js"},{"name":"./GetVelocity","loc":{"line":9,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\Body.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\GetVelocity.js"},{"name":"./TYPE","loc":{"line":10,"column":19},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\Body.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\TYPE.js"},{"name":"./UpdateMotion","loc":{"line":11,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\Body.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\impact\\UpdateMotion.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar COLLIDES = require('./COLLIDES');\r\nvar GetVelocity = require('./GetVelocity');\r\nvar TYPE = require('./TYPE');\r\nvar UpdateMotion = require('./UpdateMotion');\r\n\r\n/**\r\n * @callback Phaser.Types.Physics.Impact.BodyUpdateCallback\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.Body} body - [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * An Impact.js compatible physics body.\r\n * This re-creates the properties you'd get on an Entity and the math needed to update them.\r\n *\r\n * @class Body\r\n * @memberof Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - [description]\r\n * @param {number} x - [description]\r\n * @param {number} y - [description]\r\n * @param {number} [sx=16] - [description]\r\n * @param {number} [sy=16] - [description]\r\n */\r\nvar Body = new Class({\r\n\r\n    initialize:\r\n\r\n    function Body (world, x, y, sx, sy)\r\n    {\r\n        if (sx === undefined) { sx = 16; }\r\n        if (sy === undefined) { sy = sx; }\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#world\r\n         * @type {Phaser.Physics.Impact.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#gameObject\r\n         * @type {Phaser.GameObjects.GameObject}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.gameObject = null;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * The ImpactBody, ImpactSprite or ImpactImage object that owns this Body, if any.\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#parent\r\n         * @type {?(Phaser.Physics.Impact.ImpactBody|Phaser.Physics.Impact.ImpactImage|Phaser.Physics.Impact.ImpactSprite)}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#id\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.id = world.getNextID();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#name\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.name = '';\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#size\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.size = { x: sx, y: sy };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#offset\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.offset = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#pos\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.pos = { x: x, y: y };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#last\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.last = { x: x, y: y };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#vel\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.vel = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#accel\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.accel = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#friction\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.friction = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#maxVel\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.maxVel = { x: world.defaults.maxVelocityX, y: world.defaults.maxVelocityY };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#standing\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.standing = false;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#gravityFactor\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.gravityFactor = world.defaults.gravityFactor;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#bounciness\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.bounciness = world.defaults.bounciness;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#minBounceVelocity\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.minBounceVelocity = world.defaults.minBounceVelocity;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#accelGround\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelGround = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#accelAir\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelAir = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#jumpSpeed\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.jumpSpeed = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#type\r\n         * @type {Phaser.Physics.Impact.TYPE}\r\n         * @since 3.0.0\r\n         */\r\n        this.type = TYPE.NONE;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#checkAgainst\r\n         * @type {Phaser.Physics.Impact.TYPE}\r\n         * @since 3.0.0\r\n         */\r\n        this.checkAgainst = TYPE.NONE;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#collides\r\n         * @type {Phaser.Physics.Impact.COLLIDES}\r\n         * @since 3.0.0\r\n         */\r\n        this.collides = COLLIDES.NEVER;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#debugShowBody\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugShowBody = world.defaults.debugShowBody;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#debugShowVelocity\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugShowVelocity = world.defaults.debugShowVelocity;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#debugBodyColor\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugBodyColor = world.defaults.bodyDebugColor;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#updateCallback\r\n         * @type {?Phaser.Types.Physics.Impact.BodyUpdateCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.updateCallback;\r\n\r\n        /**\r\n         * min 44 deg, max 136 deg\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#slopeStanding\r\n         * @type {{ min: number, max: number }}\r\n         * @since 3.0.0\r\n         */\r\n        this.slopeStanding = { min: 0.767944870877505, max: 2.3736477827122884 };\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     */\r\n    reset: function (x, y)\r\n    {\r\n        this.pos = { x: x, y: y };\r\n        this.last = { x: x, y: y };\r\n        this.vel = { x: 0, y: 0 };\r\n        this.accel = { x: 0, y: 0 };\r\n        this.friction = { x: 0, y: 0 };\r\n        this.maxVel = { x: 100, y: 100 };\r\n\r\n        this.standing = false;\r\n\r\n        this.gravityFactor = 1;\r\n        this.bounciness = 0;\r\n        this.minBounceVelocity = 40;\r\n\r\n        this.accelGround = 0;\r\n        this.accelAir = 0;\r\n        this.jumpSpeed = 0;\r\n\r\n        this.type = TYPE.NONE;\r\n        this.checkAgainst = TYPE.NONE;\r\n        this.collides = COLLIDES.NEVER;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    update: function (delta)\r\n    {\r\n        var pos = this.pos;\r\n\r\n        this.last.x = pos.x;\r\n        this.last.y = pos.y;\r\n\r\n        this.vel.y += this.world.gravity * delta * this.gravityFactor;\r\n\r\n        this.vel.x = GetVelocity(delta, this.vel.x, this.accel.x, this.friction.x, this.maxVel.x);\r\n        this.vel.y = GetVelocity(delta, this.vel.y, this.accel.y, this.friction.y, this.maxVel.y);\r\n\r\n        var mx = this.vel.x * delta;\r\n        var my = this.vel.y * delta;\r\n\r\n        var res = this.world.collisionMap.trace(pos.x, pos.y, mx, my, this.size.x, this.size.y);\r\n\r\n        if (this.handleMovementTrace(res))\r\n        {\r\n            UpdateMotion(this, res);\r\n        }\r\n\r\n        var go = this.gameObject;\r\n\r\n        if (go)\r\n        {\r\n            go.x = (pos.x - this.offset.x) + go.displayOriginX * go.scaleX;\r\n            go.y = (pos.y - this.offset.y) + go.displayOriginY * go.scaleY;\r\n        }\r\n\r\n        if (this.updateCallback)\r\n        {\r\n            this.updateCallback(this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#drawDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphic - [description]\r\n     */\r\n    drawDebug: function (graphic)\r\n    {\r\n        var pos = this.pos;\r\n\r\n        if (this.debugShowBody)\r\n        {\r\n            graphic.lineStyle(1, this.debugBodyColor, 1);\r\n            graphic.strokeRect(pos.x, pos.y, this.size.x, this.size.y);\r\n        }\r\n\r\n        if (this.debugShowVelocity)\r\n        {\r\n            var x = pos.x + this.size.x / 2;\r\n            var y = pos.y + this.size.y / 2;\r\n\r\n            graphic.lineStyle(1, this.world.defaults.velocityDebugColor, 1);\r\n            graphic.lineBetween(x, y, x + this.vel.x, y + this.vel.y);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#willDrawDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    willDrawDebug: function ()\r\n    {\r\n        return (this.debugShowBody || this.debugShowVelocity);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#skipHash\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    skipHash: function ()\r\n    {\r\n        return (!this.enabled || (this.type === 0 && this.checkAgainst === 0 && this.collides === 0));\r\n    },\r\n\r\n    /**\r\n     * Determines whether the body collides with the `other` one or not.\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#touches\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body} other - [description]\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    touches: function (other)\r\n    {\r\n        return !(\r\n            this.pos.x >= other.pos.x + other.size.x ||\r\n            this.pos.x + this.size.x <= other.pos.x ||\r\n            this.pos.y >= other.pos.y + other.size.y ||\r\n            this.pos.y + this.size.y <= other.pos.y\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Reset the size and position of the physics body.\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#resetSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to position the body.\r\n     * @param {number} y - The y coordinate to position the body.\r\n     * @param {number} width - The width of the body.\r\n     * @param {number} height - The height of the body.\r\n     *\r\n     * @return {Phaser.Physics.Impact.Body} This Body object.\r\n     */\r\n    resetSize: function (x, y, width, height)\r\n    {\r\n        this.pos.x = x;\r\n        this.pos.y = y;\r\n        this.size.x = width;\r\n        this.size.y = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Export this body object to JSON.\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Types.Physics.Impact.JSONImpactBody} JSON representation of this body object.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var output = {\r\n            name: this.name,\r\n            size: { x: this.size.x, y: this.size.y },\r\n            pos: { x: this.pos.x, y: this.pos.y },\r\n            vel: { x: this.vel.x, y: this.vel.y },\r\n            accel: { x: this.accel.x, y: this.accel.y },\r\n            friction: { x: this.friction.x, y: this.friction.y },\r\n            maxVel: { x: this.maxVel.x, y: this.maxVel.y },\r\n            gravityFactor: this.gravityFactor,\r\n            bounciness: this.bounciness,\r\n            minBounceVelocity: this.minBounceVelocity,\r\n            type: this.type,\r\n            checkAgainst: this.checkAgainst,\r\n            collides: this.collides\r\n        };\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#fromJSON\r\n     * @todo Code it!\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} config - [description]\r\n     */\r\n    fromJSON: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * Can be overridden by user code\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#check\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body} other - [description]\r\n     */\r\n    check: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * Can be overridden by user code\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#collideWith\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body} other - [description]\r\n     * @param {string} axis - [description]\r\n     */\r\n    collideWith: function (other, axis)\r\n    {\r\n        if (this.parent && this.parent._collideCallback)\r\n        {\r\n            this.parent._collideCallback.call(this.parent._callbackScope, this, other, axis);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Can be overridden by user code but must return a boolean.\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#handleMovementTrace\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} res - [description]\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    handleMovementTrace: function ()\r\n    {\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.world.remove(this);\r\n\r\n        this.enabled = false;\r\n\r\n        this.world = null;\r\n\r\n        this.gameObject = null;\r\n\r\n        this.parent = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Body;\r\n"},"sourceMaps":null,"error":null,"hash":"a74788a17e449263ec7f035261717762","cacheData":{"env":{}}}