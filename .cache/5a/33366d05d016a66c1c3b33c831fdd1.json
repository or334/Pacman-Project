{"id":"../../node_modules/phaser/src/geom/triangle/Triangle.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\Triangle.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./Contains","loc":{"line":8,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\Triangle.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\Contains.js"},{"name":"./GetPoint","loc":{"line":9,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\Triangle.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\GetPoint.js"},{"name":"./GetPoints","loc":{"line":10,"column":24},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\Triangle.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\GetPoints.js"},{"name":"../line/Line","loc":{"line":11,"column":19},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\Triangle.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\line\\Line.js"},{"name":"./Random","loc":{"line":12,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\Triangle.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\Random.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Contains = require('./Contains');\r\nvar GetPoint = require('./GetPoint');\r\nvar GetPoints = require('./GetPoints');\r\nvar Line = require('../line/Line');\r\nvar Random = require('./Random');\r\n\r\n/**\r\n * @classdesc\r\n * A triangle is a plane created by connecting three points.\r\n * The first two arguments specify the first point, the middle two arguments\r\n * specify the second point, and the last two arguments specify the third point.\r\n *\r\n * @class Triangle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x1=0] - `x` coordinate of the first point.\r\n * @param {number} [y1=0] - `y` coordinate of the first point.\r\n * @param {number} [x2=0] - `x` coordinate of the second point.\r\n * @param {number} [y2=0] - `y` coordinate of the second point.\r\n * @param {number} [x3=0] - `x` coordinate of the third point.\r\n * @param {number} [y3=0] - `y` coordinate of the third point.\r\n */\r\nvar Triangle = new Class({\r\n\r\n    initialize:\r\n\r\n    function Triangle (x1, y1, x2, y2, x3, y3)\r\n    {\r\n        if (x1 === undefined) { x1 = 0; }\r\n        if (y1 === undefined) { y1 = 0; }\r\n        if (x2 === undefined) { x2 = 0; }\r\n        if (y2 === undefined) { y2 = 0; }\r\n        if (x3 === undefined) { x3 = 0; }\r\n        if (y3 === undefined) { y3 = 0; }\r\n\r\n        /**\r\n         * `x` coordinate of the first point.\r\n         *\r\n         * @name Phaser.Geom.Triangle#x1\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x1 = x1;\r\n\r\n        /**\r\n         * `y` coordinate of the first point.\r\n         *\r\n         * @name Phaser.Geom.Triangle#y1\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y1 = y1;\r\n\r\n        /**\r\n         * `x` coordinate of the second point.\r\n         *\r\n         * @name Phaser.Geom.Triangle#x2\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x2 = x2;\r\n\r\n        /**\r\n         * `y` coordinate of the second point.\r\n         *\r\n         * @name Phaser.Geom.Triangle#y2\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y2 = y2;\r\n\r\n        /**\r\n         * `x` coordinate of the third point.\r\n         *\r\n         * @name Phaser.Geom.Triangle#x3\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x3 = x3;\r\n\r\n        /**\r\n         * `y` coordinate of the third point.\r\n         *\r\n         * @name Phaser.Geom.Triangle#y3\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y3 = y3;\r\n    },\r\n\r\n    /**\r\n     * Checks whether a given points lies within the triangle.\r\n     *\r\n     * @method Phaser.Geom.Triangle#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the point to check.\r\n     * @param {number} y - The y coordinate of the point to check.\r\n     *\r\n     * @return {boolean} `true` if the coordinate pair is within the triangle, otherwise `false`.\r\n     */\r\n    contains: function (x, y)\r\n    {\r\n        return Contains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * Returns a specific point  on the triangle.\r\n     *\r\n     * @method Phaser.Geom.Triangle#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [output,$return]\r\n     *\r\n     * @param {number} position - Position as float within `0` and `1`. `0` equals the first point.\r\n     * @param {(Phaser.Geom.Point|object)} [output] - Optional Point, or point-like object, that the calculated point will be written to.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} Calculated `Point` that represents the requested position. It is the same as `output` when this parameter has been given.\r\n     */\r\n    getPoint: function (position, output)\r\n    {\r\n        return GetPoint(this, position, output);\r\n    },\r\n\r\n    /**\r\n     * Calculates a list of evenly distributed points on the triangle. It is either possible to pass an amount of points to be generated (`quantity`) or the distance between two points (`stepRate`).\r\n     *\r\n     * @method Phaser.Geom.Triangle#getPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n     *\r\n     * @param {integer} quantity - Number of points to be generated. Can be falsey when `stepRate` should be used. All points have the same distance along the triangle.\r\n     * @param {number} [stepRate] - Distance between two points. Will only be used when `quantity` is falsey.\r\n     * @param {(array|Phaser.Geom.Point[])} [output] - Optional Array for writing the calculated points into. Otherwise a new array will be created.\r\n     *\r\n     * @return {(array|Phaser.Geom.Point[])} Returns a list of calculated `Point` instances or the filled array passed as parameter `output`.\r\n     */\r\n    getPoints: function (quantity, stepRate, output)\r\n    {\r\n        return GetPoints(this, quantity, stepRate, output);\r\n    },\r\n\r\n    /**\r\n     * Returns a random point along the triangle.\r\n     *\r\n     * @method Phaser.Geom.Triangle#getRandomPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [point,$return]\r\n     *\r\n     * @param {Phaser.Geom.Point} [point] - Optional `Point` that should be modified. Otherwise a new one will be created.\r\n     *\r\n     * @return {Phaser.Geom.Point} Random `Point`. When parameter `point` has been provided it will be returned.\r\n     */\r\n    getRandomPoint: function (point)\r\n    {\r\n        return Random(this, point);\r\n    },\r\n\r\n    /**\r\n     * Sets all three points of the triangle. Leaving out any coordinate sets it to be `0`.\r\n     *\r\n     * @method Phaser.Geom.Triangle#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x1=0] - `x` coordinate of the first point.\r\n     * @param {number} [y1=0] - `y` coordinate of the first point.\r\n     * @param {number} [x2=0] - `x` coordinate of the second point.\r\n     * @param {number} [y2=0] - `y` coordinate of the second point.\r\n     * @param {number} [x3=0] - `x` coordinate of the third point.\r\n     * @param {number} [y3=0] - `y` coordinate of the third point.\r\n     *\r\n     * @return {Phaser.Geom.Triangle} This Triangle object.\r\n     */\r\n    setTo: function (x1, y1, x2, y2, x3, y3)\r\n    {\r\n        if (x1 === undefined) { x1 = 0; }\r\n        if (y1 === undefined) { y1 = 0; }\r\n        if (x2 === undefined) { x2 = 0; }\r\n        if (y2 === undefined) { y2 = 0; }\r\n        if (x3 === undefined) { x3 = 0; }\r\n        if (y3 === undefined) { y3 = 0; }\r\n\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n\r\n        this.x3 = x3;\r\n        this.y3 = y3;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to Line A of this Triangle.\r\n     *\r\n     * @method Phaser.Geom.Triangle#getLineA\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to line A of this Triangle.\r\n     */\r\n    getLineA: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.x1, this.y1, this.x2, this.y2);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to Line B of this Triangle.\r\n     *\r\n     * @method Phaser.Geom.Triangle#getLineB\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to line B of this Triangle.\r\n     */\r\n    getLineB: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.x2, this.y2, this.x3, this.y3);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to Line C of this Triangle.\r\n     *\r\n     * @method Phaser.Geom.Triangle#getLineC\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to line C of this Triangle.\r\n     */\r\n    getLineC: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.x3, this.y3, this.x1, this.y1);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Left most X coordinate of the triangle. Setting it moves the triangle on the X axis accordingly.\r\n     *\r\n     * @name Phaser.Geom.Triangle#left\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    left: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.min(this.x1, this.x2, this.x3);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var diff = 0;\r\n\r\n            if (this.x1 <= this.x2 && this.x1 <= this.x3)\r\n            {\r\n                diff = this.x1 - value;\r\n            }\r\n            else if (this.x2 <= this.x1 && this.x2 <= this.x3)\r\n            {\r\n                diff = this.x2 - value;\r\n            }\r\n            else\r\n            {\r\n                diff = this.x3 - value;\r\n            }\r\n\r\n            this.x1 -= diff;\r\n            this.x2 -= diff;\r\n            this.x3 -= diff;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Right most X coordinate of the triangle. Setting it moves the triangle on the X axis accordingly.\r\n     *\r\n     * @name Phaser.Geom.Triangle#right\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    right: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.max(this.x1, this.x2, this.x3);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var diff = 0;\r\n\r\n            if (this.x1 >= this.x2 && this.x1 >= this.x3)\r\n            {\r\n                diff = this.x1 - value;\r\n            }\r\n            else if (this.x2 >= this.x1 && this.x2 >= this.x3)\r\n            {\r\n                diff = this.x2 - value;\r\n            }\r\n            else\r\n            {\r\n                diff = this.x3 - value;\r\n            }\r\n\r\n            this.x1 -= diff;\r\n            this.x2 -= diff;\r\n            this.x3 -= diff;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Top most Y coordinate of the triangle. Setting it moves the triangle on the Y axis accordingly.\r\n     *\r\n     * @name Phaser.Geom.Triangle#top\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    top: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.min(this.y1, this.y2, this.y3);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var diff = 0;\r\n\r\n            if (this.y1 <= this.y2 && this.y1 <= this.y3)\r\n            {\r\n                diff = this.y1 - value;\r\n            }\r\n            else if (this.y2 <= this.y1 && this.y2 <= this.y3)\r\n            {\r\n                diff = this.y2 - value;\r\n            }\r\n            else\r\n            {\r\n                diff = this.y3 - value;\r\n            }\r\n\r\n            this.y1 -= diff;\r\n            this.y2 -= diff;\r\n            this.y3 -= diff;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Bottom most Y coordinate of the triangle. Setting it moves the triangle on the Y axis accordingly.\r\n     *\r\n     * @name Phaser.Geom.Triangle#bottom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    bottom: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.max(this.y1, this.y2, this.y3);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var diff = 0;\r\n\r\n            if (this.y1 >= this.y2 && this.y1 >= this.y3)\r\n            {\r\n                diff = this.y1 - value;\r\n            }\r\n            else if (this.y2 >= this.y1 && this.y2 >= this.y3)\r\n            {\r\n                diff = this.y2 - value;\r\n            }\r\n            else\r\n            {\r\n                diff = this.y3 - value;\r\n            }\r\n\r\n            this.y1 -= diff;\r\n            this.y2 -= diff;\r\n            this.y3 -= diff;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Triangle;\r\n"},"sourceMaps":null,"error":null,"hash":"890a5028d42aba270029fec0ced926f9","cacheData":{"env":{}}}