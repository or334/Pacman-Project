{"id":"../../node_modules/phaser/plugins/camera3d/src/sprite3d/Sprite3D.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../../../src/utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\sprite3d\\Sprite3D.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../../../../src/gameobjects/GameObject","loc":{"line":8,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\sprite3d\\Sprite3D.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\GameObject.js"},{"name":"../../../../src/gameobjects/sprite/Sprite","loc":{"line":9,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\sprite3d\\Sprite3D.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\sprite\\Sprite.js"},{"name":"../../../../src/math/Vector2","loc":{"line":10,"column":22},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\sprite3d\\Sprite3D.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Vector2.js"},{"name":"../../../../src/math/Vector4","loc":{"line":11,"column":22},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\sprite3d\\Sprite3D.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Vector4.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../../src/utils/Class');\r\nvar GameObject = require('../../../../src/gameobjects/GameObject');\r\nvar Sprite = require('../../../../src/gameobjects/sprite/Sprite');\r\nvar Vector2 = require('../../../../src/math/Vector2');\r\nvar Vector4 = require('../../../../src/math/Vector4');\r\n\r\n/**\r\n * @classdesc\r\n * A Sprite 3D Game Object.\r\n *\r\n * The Sprite 3D object is an encapsulation of a standard Sprite object, with additional methods to allow\r\n * it to be rendered by a 3D Camera. The Sprite can be positioned anywhere within 3D space.\r\n *\r\n * @class Sprite3D\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The x position of this Game Object.\r\n * @param {number} y - The y position of this Game Object.\r\n * @param {number} z - The z position of this Game Object.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\r\nvar Sprite3D = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    initialize:\r\n\r\n    function Sprite3D (scene, x, y, z, texture, frame)\r\n    {\r\n        GameObject.call(this, scene, 'Sprite3D');\r\n\r\n        /**\r\n         * The encapsulated Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#gameObject\r\n         * @type {Phaser.GameObjects.GameObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.gameObject = new Sprite(scene, 0, 0, texture, frame);\r\n\r\n        /**\r\n         * The position of the Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#position\r\n         * @type {Phaser.Math.Vector4}\r\n         * @since 3.0.0\r\n         */\r\n        this.position = new Vector4(x, y, z);\r\n\r\n        /**\r\n         * The 2D size of the Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#size\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.size = new Vector2(this.gameObject.width, this.gameObject.height);\r\n\r\n        /**\r\n         * The 2D scale of the Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#scale\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.scale = new Vector2(1, 1);\r\n\r\n        /**\r\n         * Whether to automatically set the horizontal scale of the encapsulated Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#adjustScaleX\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.adjustScaleX = true;\r\n\r\n        /**\r\n         * Whether to automatically set the vertical scale of the encapsulated Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#adjustScaleY\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.adjustScaleY = true;\r\n\r\n        /**\r\n         * The visible state of the Game Object.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#_visible\r\n         * @type {boolean}\r\n         * @default true\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._visible = true;\r\n    },\r\n\r\n    /**\r\n     * Project this Sprite onto the given 3D Camera.\r\n     *\r\n     * @method Phaser.GameObjects.Sprite3D#project\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Sprite3D.Camera} camera - The 3D Camera onto which to project this Sprite.\r\n     */\r\n    project: function (camera)\r\n    {\r\n        var pos = this.position;\r\n\r\n        var gameObject = this.gameObject;\r\n\r\n        camera.project(pos, gameObject);\r\n\r\n        camera.getPointSize(pos, this.size, this.scale);\r\n\r\n        if (this.scale.x <= 0 || this.scale.y <= 0)\r\n        {\r\n            gameObject.setVisible(false);\r\n        }\r\n        else\r\n        {\r\n            if (!gameObject.visible)\r\n            {\r\n                gameObject.setVisible(true);\r\n            }\r\n\r\n            if (this.adjustScaleX)\r\n            {\r\n                gameObject.scaleX = this.scale.x;\r\n            }\r\n\r\n            if (this.adjustScaleY)\r\n            {\r\n                gameObject.scaleY = this.scale.y;\r\n            }\r\n\r\n            gameObject.setDepth(gameObject.z * -1);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set the visible state of the Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Sprite3D#setVisible\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - The visible state of the Game Object.\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D} This Sprite3D Object.\r\n     */\r\n    setVisible: function (value)\r\n    {\r\n        this.visible = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The visible state of the Game Object.\r\n     *\r\n     * An invisible Game Object will skip rendering, but will still process update logic.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#visible\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\r\n    visible: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._visible;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._visible = value;\r\n            this.gameObject.visible = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The x position of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.x = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y position of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.y = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The z position of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#z\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    z: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.z;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.z = value;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Sprite3D;\r\n"},"sourceMaps":null,"error":null,"hash":"03bd7aaad1b30b6c6b027dcd2f3f212e","cacheData":{"env":{}}}