{"id":"game-objects/Ghost.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"phaser","loc":{"line":1,"column":19},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\game-objects\\Ghost.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\phaser.js"},{"name":"../constants","loc":{"line":2,"column":48},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\game-objects\\Ghost.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\constants.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Ghost = void 0;\n\nvar _phaser = _interopRequireDefault(require(\"phaser\"));\n\nvar _constants = require(\"../constants\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Ghost =\n/*#__PURE__*/\nfunction (_Phaser$GameObjects$S) {\n  _inherits(Ghost, _Phaser$GameObjects$S);\n\n  function Ghost(scene, ghost_number) {\n    var _this;\n\n    _classCallCheck(this, Ghost);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Ghost).call(this, scene, 32 * 13 + 16, 32 * 11 + 16, _constants.SPRITES.GHOST));\n    _this.ghost_number = ghost_number;\n\n    _this.scene.add.existing(_assertThisInitialized(_this)); // add our sprite to the scene\n\n\n    _this.scene.physics.world.enable(_assertThisInitialized(_this)); // add physics to our sprite\t\n\n\n    _this.createAnimations();\n\n    _this.turning = false;\n    _this.question_mode = false;\n    return _this;\n  }\n  /**\r\n   * moves the ghost according to the walls layer\r\n   * @param {Phaser.Tilemaps.StaticTilemapLayer} walls \r\n   */\n\n\n  _createClass(Ghost, [{\n    key: \"TouchPacman\",\n    value: function TouchPacman() {\n      this.x = 32 * 13 + 16;\n      this.y = 32 * 11 + 16;\n    }\n  }, {\n    key: \"move\",\n    value: function move(walls) {\n      var _this2 = this;\n\n      // get the current tile the ghost is walking on \n      var current = walls.getTileAtWorldXY(this.x, this.y, true); // if current is null we are crossing the screen\n\n      if (current == null) {\n        return;\n      } // get the neighbors (null if none)\n\n\n      var neighbors = [{\n        tile: walls.getTileAt(current.x, current.y - 1),\n        direction: _constants.DIRECTIONS.UP\n      }, {\n        tile: walls.getTileAt(current.x, current.y + 1),\n        direction: _constants.DIRECTIONS.DOWN\n      }, {\n        tile: walls.getTileAt(current.x + 1, current.y),\n        direction: _constants.DIRECTIONS.RIGHT\n      }, {\n        tile: walls.getTileAt(current.x - 1, current.y),\n        direction: _constants.DIRECTIONS.LEFT\n      }]; // do nothing if we moved allready and we don't meet the threshold for turning \n\n      if (!_phaser.default.Math.Fuzzy.Equal(current.getCenterX(), this.x, 2) || !_phaser.default.Math.Fuzzy.Equal(current.getCenterY(), this.y, 2)) {\n        return;\n      } // get the available directions except behind us\n\n\n      var available = neighbors.filter(function (x) {\n        return x.tile == null;\n      }).filter(function (_ref) {\n        var direction = _ref.direction;\n        return direction == _this2.direction || (direction + 180) % 180 != (_this2.direction + 180) % 180;\n      });\n\n      if (available.length == 0) {\n        this.direction = direction + 180;\n        return;\n      } // take one direction at random\n\n\n      var _Phaser$Math$RND$pick = _phaser.default.Math.RND.pick(available),\n          direction = _Phaser$Math$RND$pick.direction;\n\n      if (this.question_mode) {\n        if (this.body.velocity.x > 1) this.body.velocity.x = 50;else if (this.body.velocity.x < -1) this.body.velocity.x = -50;\n        if (this.body.velocity.y > 1) this.body.velocity.y = 50;else if (this.body.velocity.y < -1) this.body.velocity.y = -50;\n      } else {\n        if (this.body.velocity.x > 1) this.body.velocity.x = 120;else if (this.body.velocity.x < -1) this.body.velocity.x = -120;\n        if (this.body.velocity.y > 1) this.body.velocity.y = 120;else if (this.body.velocity.y < -1) this.body.velocity.y = -120;\n      } // check if the ghos is turning allready\n\n\n      if (!this.turning) {\n        //if not then check if we need to change the animation / velocity \n        if (this.direction != direction) {\n          this.body.reset(current.getCenterX(), current.getCenterY());\n          this.scene.physics.velocityFromAngle(direction + 180, 120, this.body.velocity);\n          this.anims.play(\"\".concat(_constants.ANIMATIONS.GHOST, \"_\").concat(direction) + this.ghost_number.toString());\n          this.direction = direction;\n        } //indicate that the ghost is turning and toggle it back after 1/5 of second\n\n\n        this.turning = true;\n        setTimeout(function () {\n          _this2.turning = false;\n        }, 200);\n      }\n    }\n  }, {\n    key: \"createAnimations\",\n    value: function createAnimations() {\n      this.scene.anims.create({\n        key: \"\".concat(_constants.ANIMATIONS.GHOST, \"_\").concat(_constants.DIRECTIONS.DOWN) + this.ghost_number.toString(),\n        frames: this.scene.anims.generateFrameNumbers(_constants.SPRITES.GHOST, {\n          frames: [0 + this.ghost_number * 8, 1 + this.ghost_number * 8]\n        }),\n        frameRate: 4,\n        yoyo: false,\n        repeat: -1\n      });\n      this.scene.anims.create({\n        key: \"\".concat(_constants.ANIMATIONS.GHOST, \"_\").concat(_constants.DIRECTIONS.UP) + this.ghost_number.toString(),\n        frames: this.scene.anims.generateFrameNumbers(_constants.SPRITES.GHOST, {\n          frames: [2 + this.ghost_number * 8, 3 + this.ghost_number * 8]\n        }),\n        frameRate: 4,\n        yoyo: false,\n        repeat: -1\n      });\n      this.scene.anims.create({\n        key: \"\".concat(_constants.ANIMATIONS.GHOST, \"_\").concat(_constants.DIRECTIONS.LEFT) + this.ghost_number.toString(),\n        frames: this.scene.anims.generateFrameNumbers(_constants.SPRITES.GHOST, {\n          frames: [4 + this.ghost_number * 8, 5 + this.ghost_number * 8]\n        }),\n        frameRate: 4,\n        yoyo: false,\n        repeat: -1\n      });\n      this.scene.anims.create({\n        key: \"\".concat(_constants.ANIMATIONS.GHOST, \"_\").concat(_constants.DIRECTIONS.RIGHT) + this.ghost_number.toString(),\n        frames: this.scene.anims.generateFrameNumbers(_constants.SPRITES.GHOST, {\n          frames: [6 + this.ghost_number * 8, 7 + this.ghost_number * 8]\n        }),\n        frameRate: 4,\n        yoyo: false,\n        repeat: -1\n      });\n    }\n  }]);\n\n  return Ghost;\n}(_phaser.default.GameObjects.Sprite);\n\nexports.Ghost = Ghost;"},"sourceMaps":null,"error":null,"hash":"4e76132d19aae5c1d6dc985a335a8686","cacheData":{"env":{}}}