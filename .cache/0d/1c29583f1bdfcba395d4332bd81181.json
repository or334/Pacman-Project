{"id":"../../node_modules/phaser/src/physics/matter-js/lib/core/Common.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369}],"generated":{"js":"var global = arguments[3];\n/**\r\n* The `Matter.Common` module contains utility functions that are common to all modules.\r\n*\r\n* @class Common\r\n*/\r\n\r\nvar Common = {};\r\n\r\nmodule.exports = Common;\r\n\r\n(function() {\r\n\r\n    Common._nextId = 0;\r\n    Common._seed = 0;\r\n    Common._nowStartTime = +(new Date());\r\n\r\n    /**\r\n     * Extends the object in the first argument using the object in the second argument.\r\n     * @method extend\r\n     * @param {} obj\r\n     * @param {boolean} deep\r\n     * @return {} obj extended\r\n     */\r\n    Common.extend = function(obj, deep) {\r\n        var argsStart,\r\n            args,\r\n            deepClone;\r\n\r\n        if (typeof deep === 'boolean') {\r\n            argsStart = 2;\r\n            deepClone = deep;\r\n        } else {\r\n            argsStart = 1;\r\n            deepClone = true;\r\n        }\r\n\r\n        for (var i = argsStart; i < arguments.length; i++) {\r\n            var source = arguments[i];\r\n\r\n            if (source) {\r\n                for (var prop in source) {\r\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\r\n                        if (!obj[prop] || obj[prop].constructor === Object) {\r\n                            obj[prop] = obj[prop] || {};\r\n                            Common.extend(obj[prop], deepClone, source[prop]);\r\n                        } else {\r\n                            obj[prop] = source[prop];\r\n                        }\r\n                    } else {\r\n                        obj[prop] = source[prop];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return obj;\r\n    };\r\n\r\n    /**\r\n     * Creates a new clone of the object, if deep is true references will also be cloned.\r\n     * @method clone\r\n     * @param {} obj\r\n     * @param {bool} deep\r\n     * @return {} obj cloned\r\n     */\r\n    Common.clone = function(obj, deep) {\r\n        return Common.extend({}, deep, obj);\r\n    };\r\n\r\n    /**\r\n     * Returns the list of keys for the given object.\r\n     * @method keys\r\n     * @param {} obj\r\n     * @return {string[]} keys\r\n     */\r\n    Common.keys = function(obj) {\r\n        if (Object.keys)\r\n            return Object.keys(obj);\r\n\r\n        // avoid hasOwnProperty for performance\r\n        var keys = [];\r\n        for (var key in obj)\r\n            keys.push(key);\r\n        return keys;\r\n    };\r\n\r\n    /**\r\n     * Returns the list of values for the given object.\r\n     * @method values\r\n     * @param {} obj\r\n     * @return {array} Array of the objects property values\r\n     */\r\n    Common.values = function(obj) {\r\n        var values = [];\r\n        \r\n        if (Object.keys) {\r\n            var keys = Object.keys(obj);\r\n            for (var i = 0; i < keys.length; i++) {\r\n                values.push(obj[keys[i]]);\r\n            }\r\n            return values;\r\n        }\r\n        \r\n        // avoid hasOwnProperty for performance\r\n        for (var key in obj)\r\n            values.push(obj[key]);\r\n        return values;\r\n    };\r\n\r\n    /**\r\n     * Gets a value from `base` relative to the `path` string.\r\n     * @method get\r\n     * @param {} obj The base object\r\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\r\n     * @param {number} [begin] Path slice begin\r\n     * @param {number} [end] Path slice end\r\n     * @return {} The object at the given path\r\n     */\r\n    Common.get = function(obj, path, begin, end) {\r\n        path = path.split('.').slice(begin, end);\r\n\r\n        for (var i = 0; i < path.length; i += 1) {\r\n            obj = obj[path[i]];\r\n        }\r\n\r\n        return obj;\r\n    };\r\n\r\n    /**\r\n     * Sets a value on `base` relative to the given `path` string.\r\n     * @method set\r\n     * @param {} obj The base object\r\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\r\n     * @param {} val The value to set\r\n     * @param {number} [begin] Path slice begin\r\n     * @param {number} [end] Path slice end\r\n     * @return {} Pass through `val` for chaining\r\n     */\r\n    Common.set = function(obj, path, val, begin, end) {\r\n        var parts = path.split('.').slice(begin, end);\r\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\r\n        return val;\r\n    };\r\n\r\n    /**\r\n     * Shuffles the given array in-place.\r\n     * The function uses a seeded random generator.\r\n     * @method shuffle\r\n     * @param {array} array\r\n     * @return {array} array shuffled randomly\r\n     */\r\n    Common.shuffle = function(array) {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Common.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Randomly chooses a value from a list with equal probability.\r\n     * The function uses a seeded random generator.\r\n     * @method choose\r\n     * @param {array} choices\r\n     * @return {object} A random choice object from the array\r\n     */\r\n    Common.choose = function(choices) {\r\n        return choices[Math.floor(Common.random() * choices.length)];\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is a HTMLElement, otherwise false.\r\n     * @method isElement\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\r\n     */\r\n    Common.isElement = function(obj) {\r\n        if (typeof HTMLElement !== 'undefined') {\r\n            return obj instanceof HTMLElement;\r\n        }\r\n\r\n        return !!(obj && obj.nodeType && obj.nodeName);\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is an array.\r\n     * @method isArray\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is an array, otherwise false\r\n     */\r\n    Common.isArray = function(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Array]';\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is a function.\r\n     * @method isFunction\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is a function, otherwise false\r\n     */\r\n    Common.isFunction = function(obj) {\r\n        return typeof obj === \"function\";\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is a plain object.\r\n     * @method isPlainObject\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is a plain object, otherwise false\r\n     */\r\n    Common.isPlainObject = function(obj) {\r\n        return typeof obj === 'object' && obj.constructor === Object;\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is a string.\r\n     * @method isString\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is a string, otherwise false\r\n     */\r\n    Common.isString = function(obj) {\r\n        return toString.call(obj) === '[object String]';\r\n    };\r\n    \r\n    /**\r\n     * Returns the given value clamped between a minimum and maximum value.\r\n     * @method clamp\r\n     * @param {number} value\r\n     * @param {number} min\r\n     * @param {number} max\r\n     * @return {number} The value clamped between min and max inclusive\r\n     */\r\n    Common.clamp = function(value, min, max) {\r\n        if (value < min)\r\n            return min;\r\n        if (value > max)\r\n            return max;\r\n        return value;\r\n    };\r\n    \r\n    /**\r\n     * Returns the sign of the given value.\r\n     * @method sign\r\n     * @param {number} value\r\n     * @return {number} -1 if negative, +1 if 0 or positive\r\n     */\r\n    Common.sign = function(value) {\r\n        return value < 0 ? -1 : 1;\r\n    };\r\n    \r\n    /**\r\n     * Returns the current timestamp since the time origin (e.g. from page load).\r\n     * The result will be high-resolution including decimal places if available.\r\n     * @method now\r\n     * @return {number} the current timestamp\r\n     */\r\n    Common.now = function() {\r\n        if (window.performance) {\r\n            if (window.performance.now) {\r\n                return window.performance.now();\r\n            } else if (window.performance.webkitNow) {\r\n                return window.performance.webkitNow();\r\n            }\r\n        }\r\n\r\n        return (new Date()) - Common._nowStartTime;\r\n    };\r\n    \r\n    /**\r\n     * Returns a random value between a minimum and a maximum value inclusive.\r\n     * The function uses a seeded random generator.\r\n     * @method random\r\n     * @param {number} min\r\n     * @param {number} max\r\n     * @return {number} A random number between min and max inclusive\r\n     */\r\n    Common.random = function(min, max) {\r\n        min = (typeof min !== \"undefined\") ? min : 0;\r\n        max = (typeof max !== \"undefined\") ? max : 1;\r\n        return min + _seededRandom() * (max - min);\r\n    };\r\n\r\n    var _seededRandom = function() {\r\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\r\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\r\n        return Common._seed / 233280;\r\n    };\r\n\r\n    /**\r\n     * Converts a CSS hex colour string into an integer.\r\n     * @method colorToNumber\r\n     * @param {string} colorString\r\n     * @return {number} An integer representing the CSS hex string\r\n     */\r\n    Common.colorToNumber = function(colorString) {\r\n        colorString = colorString.replace('#','');\r\n\r\n        if (colorString.length == 3) {\r\n            colorString = colorString.charAt(0) + colorString.charAt(0)\r\n                        + colorString.charAt(1) + colorString.charAt(1)\r\n                        + colorString.charAt(2) + colorString.charAt(2);\r\n        }\r\n\r\n        return parseInt(colorString, 16);\r\n    };\r\n\r\n    /**\r\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\r\n     * The default level is 'debug' which shows all console messages.  \r\n     *\r\n     * Possible level values are:\r\n     * - 0 = None\r\n     * - 1 = Debug\r\n     * - 2 = Info\r\n     * - 3 = Warn\r\n     * - 4 = Error\r\n     * @property Common.logLevel\r\n     * @type {Number}\r\n     * @default 1\r\n     */\r\n    Common.logLevel = 1;\r\n\r\n    /**\r\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\r\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\r\n     * @method log\r\n     * @param ...objs {} The objects to log.\r\n     */\r\n    Common.log = function() {\r\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\r\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\r\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\r\n     * @method info\r\n     * @param ...objs {} The objects to log.\r\n     */\r\n    Common.info = function() {\r\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\r\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\r\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\r\n     * @method warn\r\n     * @param ...objs {} The objects to log.\r\n     */\r\n    Common.warn = function() {\r\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\r\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the next unique sequential ID.\r\n     * @method nextId\r\n     * @return {Number} Unique sequential ID\r\n     */\r\n    Common.nextId = function() {\r\n        return Common._nextId++;\r\n    };\r\n\r\n    /**\r\n     * A cross browser compatible indexOf implementation.\r\n     * @method indexOf\r\n     * @param {array} haystack\r\n     * @param {object} needle\r\n     * @return {number} The position of needle in haystack, otherwise -1.\r\n     */\r\n    Common.indexOf = function(haystack, needle) {\r\n        if (haystack.indexOf)\r\n            return haystack.indexOf(needle);\r\n\r\n        for (var i = 0; i < haystack.length; i++) {\r\n            if (haystack[i] === needle)\r\n                return i;\r\n        }\r\n\r\n        return -1;\r\n    };\r\n\r\n    /**\r\n     * A cross browser compatible array map implementation.\r\n     * @method map\r\n     * @param {array} list\r\n     * @param {function} func\r\n     * @return {array} Values from list transformed by func.\r\n     */\r\n    Common.map = function(list, func) {\r\n        if (list.map) {\r\n            return list.map(func);\r\n        }\r\n\r\n        var mapped = [];\r\n\r\n        for (var i = 0; i < list.length; i += 1) {\r\n            mapped.push(func(list[i]));\r\n        }\r\n\r\n        return mapped;\r\n    };\r\n\r\n    /**\r\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\r\n     * Circular dependencies are allowed.\r\n     * @method topologicalSort\r\n     * @param {object} graph\r\n     * @return {array} Partially ordered set of vertices in topological order.\r\n     */\r\n    Common.topologicalSort = function(graph) {\r\n        // https://github.com/mgechev/javascript-algorithms\r\n        // Copyright (c) Minko Gechev (MIT license)\r\n        // Modifications: tidy formatting and naming\r\n        var result = [],\r\n            visited = [],\r\n            temp = [];\r\n\r\n        for (var node in graph) {\r\n            if (!visited[node] && !temp[node]) {\r\n                Common._topologicalSort(node, visited, temp, graph, result);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\r\n        var neighbors = graph[node] || [];\r\n        temp[node] = true;\r\n\r\n        for (var i = 0; i < neighbors.length; i += 1) {\r\n            var neighbor = neighbors[i];\r\n\r\n            if (temp[neighbor]) {\r\n                // skip circular dependencies\r\n                continue;\r\n            }\r\n\r\n            if (!visited[neighbor]) {\r\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\r\n            }\r\n        }\r\n\r\n        temp[node] = false;\r\n        visited[node] = true;\r\n\r\n        result.push(node);\r\n    };\r\n\r\n    /**\r\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\r\n     * The arguments applied when calling the new function will also be applied to every function passed.\r\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\r\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\r\n     * After all passed functions have been called the new function returns the last returned value (if any).\r\n     * If any of the passed functions are a chain, then the chain will be flattened.\r\n     * @method chain\r\n     * @param ...funcs {function} The functions to chain.\r\n     * @return {function} A new function that calls the passed functions in order.\r\n     */\r\n    Common.chain = function() {\r\n        var funcs = [];\r\n\r\n        for (var i = 0; i < arguments.length; i += 1) {\r\n            var func = arguments[i];\r\n\r\n            if (func._chained) {\r\n                // flatten already chained functions\r\n                funcs.push.apply(funcs, func._chained);\r\n            } else {\r\n                funcs.push(func);\r\n            }\r\n        }\r\n\r\n        var chain = function() {\r\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\r\n            var lastResult,\r\n                args = new Array(arguments.length);\r\n\r\n            for (var i = 0, l = arguments.length; i < l; i++) {\r\n                args[i] = arguments[i];\r\n            }\r\n\r\n            for (i = 0; i < funcs.length; i += 1) {\r\n                var result = funcs[i].apply(lastResult, args);\r\n\r\n                if (typeof result !== 'undefined') {\r\n                    lastResult = result;\r\n                }\r\n            }\r\n\r\n            return lastResult;\r\n        };\r\n\r\n        chain._chained = funcs;\r\n\r\n        return chain;\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\r\n     * See also docs for `Common.chain`.\r\n     * @method chainPathBefore\r\n     * @param {} base The base object\r\n     * @param {string} path The path relative to `base`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Common.chainPathBefore = function(base, path, func) {\r\n        return Common.set(base, path, Common.chain(\r\n            func,\r\n            Common.get(base, path)\r\n        ));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\r\n     * See also docs for `Common.chain`.\r\n     * @method chainPathAfter\r\n     * @param {} base The base object\r\n     * @param {string} path The path relative to `base`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Common.chainPathAfter = function(base, path, func) {\r\n        return Common.set(base, path, Common.chain(\r\n            Common.get(base, path),\r\n            func\r\n        ));\r\n    };\r\n\r\n    /**\r\n     * Used to require external libraries outside of the bundle.\r\n     * It first looks for the `globalName` on the environment's global namespace.\r\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\r\n     * @private\r\n     * @method _requireGlobal\r\n     * @param {string} globalName The global module name\r\n     * @param {string} moduleName The fallback CommonJS module name\r\n     * @return {} The loaded module\r\n     */\r\n    Common._requireGlobal = function(globalName, moduleName) {\r\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\r\n\r\n        //  Breaks webpack :(\r\n        // return obj || require(moduleName);\r\n\r\n        return obj;\r\n    };\r\n})();\r\n"},"sourceMaps":null,"error":null,"hash":"dbd9317e9b260065ce56b45eb037effe","cacheData":{"env":{}}}