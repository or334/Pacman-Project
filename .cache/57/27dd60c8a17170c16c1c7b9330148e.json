{"id":"../../node_modules/phaser/src/physics/matter-js/lib/collision/Pairs.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"./Pair","loc":{"line":11,"column":19},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\collision\\Pairs.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\collision\\Pair.js"},{"name":"../core/Common","loc":{"line":12,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\collision\\Pairs.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\core\\Common.js"}],"generated":{"js":"/**\r\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\r\n*\r\n* @class Pairs\r\n*/\r\n\r\nvar Pairs = {};\r\n\r\nmodule.exports = Pairs;\r\n\r\nvar Pair = require('./Pair');\r\nvar Common = require('../core/Common');\r\n\r\n(function() {\r\n    \r\n    Pairs._pairMaxIdleLife = 1000;\r\n\r\n    /**\r\n     * Creates a new pairs structure.\r\n     * @method create\r\n     * @param {object} options\r\n     * @return {pairs} A new pairs structure\r\n     */\r\n    Pairs.create = function(options) {\r\n        return Common.extend({ \r\n            table: {},\r\n            list: [],\r\n            collisionStart: [],\r\n            collisionActive: [],\r\n            collisionEnd: []\r\n        }, options);\r\n    };\r\n\r\n    /**\r\n     * Updates pairs given a list of collisions.\r\n     * @method update\r\n     * @param {object} pairs\r\n     * @param {collision[]} collisions\r\n     * @param {number} timestamp\r\n     */\r\n    Pairs.update = function(pairs, collisions, timestamp) {\r\n        var pairsList = pairs.list,\r\n            pairsTable = pairs.table,\r\n            collisionStart = pairs.collisionStart,\r\n            collisionEnd = pairs.collisionEnd,\r\n            collisionActive = pairs.collisionActive,\r\n            collision,\r\n            pairId,\r\n            pair,\r\n            i;\r\n\r\n        // clear collision state arrays, but maintain old reference\r\n        collisionStart.length = 0;\r\n        collisionEnd.length = 0;\r\n        collisionActive.length = 0;\r\n\r\n        for (i = 0; i < pairsList.length; i++) {\r\n            pairsList[i].confirmedActive = false;\r\n        }\r\n\r\n        for (i = 0; i < collisions.length; i++) {\r\n            collision = collisions[i];\r\n\r\n            if (collision.collided) {\r\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\r\n\r\n                pair = pairsTable[pairId];\r\n                \r\n                if (pair) {\r\n                    // pair already exists (but may or may not be active)\r\n                    if (pair.isActive) {\r\n                        // pair exists and is active\r\n                        collisionActive.push(pair);\r\n                    } else {\r\n                        // pair exists but was inactive, so a collision has just started again\r\n                        collisionStart.push(pair);\r\n                    }\r\n\r\n                    // update the pair\r\n                    Pair.update(pair, collision, timestamp);\r\n                    pair.confirmedActive = true;\r\n                } else {\r\n                    // pair did not exist, create a new pair\r\n                    pair = Pair.create(collision, timestamp);\r\n                    pairsTable[pairId] = pair;\r\n\r\n                    // push the new pair\r\n                    collisionStart.push(pair);\r\n                    pairsList.push(pair);\r\n                }\r\n            }\r\n        }\r\n\r\n        // deactivate previously active pairs that are now inactive\r\n        for (i = 0; i < pairsList.length; i++) {\r\n            pair = pairsList[i];\r\n            if (pair.isActive && !pair.confirmedActive) {\r\n                Pair.setActive(pair, false, timestamp);\r\n                collisionEnd.push(pair);\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Finds and removes pairs that have been inactive for a set amount of time.\r\n     * @method removeOld\r\n     * @param {object} pairs\r\n     * @param {number} timestamp\r\n     */\r\n    Pairs.removeOld = function(pairs, timestamp) {\r\n        var pairsList = pairs.list,\r\n            pairsTable = pairs.table,\r\n            indexesToRemove = [],\r\n            pair,\r\n            collision,\r\n            pairIndex,\r\n            i;\r\n\r\n        for (i = 0; i < pairsList.length; i++) {\r\n            pair = pairsList[i];\r\n            collision = pair.collision;\r\n            \r\n            // never remove sleeping pairs\r\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\r\n                pair.timeUpdated = timestamp;\r\n                continue;\r\n            }\r\n\r\n            // if pair is inactive for too long, mark it to be removed\r\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\r\n                indexesToRemove.push(i);\r\n            }\r\n        }\r\n\r\n        // remove marked pairs\r\n        for (i = 0; i < indexesToRemove.length; i++) {\r\n            pairIndex = indexesToRemove[i] - i;\r\n            pair = pairsList[pairIndex];\r\n            delete pairsTable[pair.id];\r\n            pairsList.splice(pairIndex, 1);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Clears the given pairs structure.\r\n     * @method clear\r\n     * @param {pairs} pairs\r\n     * @return {pairs} pairs\r\n     */\r\n    Pairs.clear = function(pairs) {\r\n        pairs.table = {};\r\n        pairs.list.length = 0;\r\n        pairs.collisionStart.length = 0;\r\n        pairs.collisionActive.length = 0;\r\n        pairs.collisionEnd.length = 0;\r\n        return pairs;\r\n    };\r\n\r\n})();\r\n"},"sourceMaps":null,"error":null,"hash":"c292f146b28da718d725de7785a879fe","cacheData":{"env":{}}}