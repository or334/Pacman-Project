{"id":"../../node_modules/phaser/src/curves/SplineCurve.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../math/CatmullRom","loc":{"line":9,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\curves\\SplineCurve.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\CatmullRom.js"},{"name":"../utils/Class","loc":{"line":10,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\curves\\SplineCurve.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./Curve","loc":{"line":11,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\curves\\SplineCurve.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\curves\\Curve.js"},{"name":"../math/Vector2","loc":{"line":12,"column":22},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\curves\\SplineCurve.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Vector2.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Based on the three.js Curve classes created by [zz85](http://www.lab4games.net/zz85/blog)\r\n\r\nvar CatmullRom = require('../math/CatmullRom');\r\nvar Class = require('../utils/Class');\r\nvar Curve = require('./Curve');\r\nvar Vector2 = require('../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class Spline\r\n * @extends Phaser.Curves.Curve\r\n * @memberof Phaser.Curves\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector2[]} [points] - [description]\r\n */\r\nvar SplineCurve = new Class({\r\n\r\n    Extends: Curve,\r\n\r\n    initialize:\r\n\r\n    function SplineCurve (points)\r\n    {\r\n        if (points === undefined) { points = []; }\r\n\r\n        Curve.call(this, 'SplineCurve');\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.Spline#points\r\n         * @type {Phaser.Math.Vector2[]}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.points = [];\r\n\r\n        this.addPoints(points);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Spline#addPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2[]|number[]|number[][])} points - [description]\r\n     *\r\n     * @return {Phaser.Curves.Spline} This curve object.\r\n     */\r\n    addPoints: function (points)\r\n    {\r\n        for (var i = 0; i < points.length; i++)\r\n        {\r\n            var p = new Vector2();\r\n\r\n            if (typeof points[i] === 'number')\r\n            {\r\n                p.x = points[i];\r\n                p.y = points[i + 1];\r\n                i++;\r\n            }\r\n            else if (Array.isArray(points[i]))\r\n            {\r\n                //  An array of arrays?\r\n                p.x = points[i][0];\r\n                p.y = points[i][1];\r\n            }\r\n            else\r\n            {\r\n                p.x = points[i].x;\r\n                p.y = points[i].y;\r\n            }\r\n\r\n            this.points.push(p);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Spline#addPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector2} [description]\r\n     */\r\n    addPoint: function (x, y)\r\n    {\r\n        var vec = new Vector2(x, y);\r\n\r\n        this.points.push(vec);\r\n\r\n        return vec;\r\n    },\r\n\r\n    /**\r\n     * Gets the starting point on the curve.\r\n     *\r\n     * @method Phaser.Curves.Spline#getStartPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getStartPoint: function (out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        return out.copy(this.points[0]);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Spline#getResolution\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} divisions - [description]\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getResolution: function (divisions)\r\n    {\r\n        return divisions * this.points.length;\r\n    },\r\n\r\n    /**\r\n     * Get point at relative position in curve according to length.\r\n     *\r\n     * @method Phaser.Curves.Spline#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getPoint: function (t, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        var points = this.points;\r\n\r\n        var point = (points.length - 1) * t;\r\n\r\n        var intPoint = Math.floor(point);\r\n\r\n        var weight = point - intPoint;\r\n\r\n        var p0 = points[(intPoint === 0) ? intPoint : intPoint - 1];\r\n        var p1 = points[intPoint];\r\n        var p2 = points[(intPoint > points.length - 2) ? points.length - 1 : intPoint + 1];\r\n        var p3 = points[(intPoint > points.length - 3) ? points.length - 1 : intPoint + 2];\r\n\r\n        return out.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Spline#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Types.Curves.JSONCurve} The JSON object containing this curve data.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var points = [];\r\n\r\n        for (var i = 0; i < this.points.length; i++)\r\n        {\r\n            points.push(this.points[i].x);\r\n            points.push(this.points[i].y);\r\n        }\r\n\r\n        return {\r\n            type: this.type,\r\n            points: points\r\n        };\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Curves.Spline.fromJSON\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Curves.JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.Spline} [description]\r\n */\r\nSplineCurve.fromJSON = function (data)\r\n{\r\n    return new SplineCurve(data.points);\r\n};\r\n\r\nmodule.exports = SplineCurve;\r\n"},"sourceMaps":null,"error":null,"hash":"13fa9c47c52b81e27d5ab7e446d9b42d","cacheData":{"env":{}}}