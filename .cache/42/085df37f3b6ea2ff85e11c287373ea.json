{"id":"../../node_modules/phaser/src/loader/filetypes/GLSLFile.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\GLSLFile.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../const","loc":{"line":8,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\GLSLFile.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\const.js"},{"name":"../File","loc":{"line":9,"column":19},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\GLSLFile.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\File.js"},{"name":"../FileTypesManager","loc":{"line":10,"column":31},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\GLSLFile.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\FileTypesManager.js"},{"name":"../../utils/object/GetFastValue","loc":{"line":11,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\GLSLFile.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetFastValue.js"},{"name":"../../utils/object/IsPlainObject","loc":{"line":12,"column":28},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\GLSLFile.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\IsPlainObject.js"},{"name":"../../display/shader/BaseShader","loc":{"line":13,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\loader\\filetypes\\GLSLFile.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\display\\shader\\BaseShader.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\nvar Shader = require('../../display/shader/BaseShader');\r\n\r\n/**\r\n * @classdesc\r\n * A single GLSL File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#glsl method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#glsl.\r\n *\r\n * @class GLSLFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.GLSLFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.txt`, i.e. if `key` was \"alien\" then the URL will be \"alien.txt\".\r\n * @param {string} [shaderType='fragment'] - The type of shader. Either `fragment` for a fragment shader, or `vertex` for a vertex shader. This is ignored if you load a shader bundle.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar GLSLFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function GLSLFile (loader, key, url, shaderType, xhrSettings)\r\n    {\r\n        var extension = 'glsl';\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            url = GetFastValue(config, 'url');\r\n            shaderType = GetFastValue(config, 'shaderType', 'fragment');\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            extension = GetFastValue(config, 'extension', extension);\r\n        }\r\n        else if (shaderType === undefined)\r\n        {\r\n            shaderType = 'fragment';\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'glsl',\r\n            cache: loader.cacheManager.shader,\r\n            extension: extension,\r\n            responseType: 'text',\r\n            key: key,\r\n            url: url,\r\n            config: {\r\n                shaderType: shaderType\r\n            },\r\n            xhrSettings: xhrSettings\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.GLSLFile#onProcess\r\n     * @since 3.7.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        this.data = this.xhrLoader.responseText;\r\n\r\n        this.onProcessComplete();\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.GLSLFile#addToCache\r\n     * @since 3.17.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        var data = this.data.split('\\n');\r\n\r\n        //  Check to see if this is a shader bundle, or raw glsl file.\r\n        var block = this.extractBlock(data, 0);\r\n\r\n        if (block)\r\n        {\r\n            while (block)\r\n            {\r\n                var key = this.getShaderName(block.header);\r\n                var shaderType = this.getShaderType(block.header);\r\n                var uniforms = this.getShaderUniforms(block.header);\r\n                var shaderSrc = block.shader;\r\n\r\n                if (this.cache.has(key))\r\n                {\r\n                    var shader = this.cache.get(key);\r\n\r\n                    if (shaderType === 'fragment')\r\n                    {\r\n                        shader.fragmentSrc = shaderSrc;\r\n                    }\r\n                    else\r\n                    {\r\n                        shader.vertexSrc = shaderSrc;\r\n                    }\r\n\r\n                    if (!shader.uniforms)\r\n                    {\r\n                        shader.uniforms = uniforms;\r\n                    }\r\n                }\r\n                else if (shaderType === 'fragment')\r\n                {\r\n                    this.cache.add(key, new Shader(key, shaderSrc, '', uniforms));\r\n                }\r\n                else\r\n                {\r\n                    this.cache.add(key, new Shader(key, '', shaderSrc, uniforms));\r\n                }\r\n\r\n                block = this.extractBlock(data, block.offset);\r\n            }\r\n        }\r\n        else if (this.config.shaderType === 'fragment')\r\n        {\r\n            //  Single shader\r\n            this.cache.add(this.key, new Shader(this.key, this.data));\r\n        }\r\n        else\r\n        {\r\n            this.cache.add(this.key, new Shader(this.key, '', this.data));\r\n        }\r\n\r\n        this.pendingDestroy();\r\n    },\r\n\r\n    /**\r\n     * Returns the name of the shader from the header block.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.GLSLFile#getShaderName\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string[]} headerSource - The header data.\r\n     * \r\n     * @return {string} The shader name.\r\n     */\r\n    getShaderName: function (headerSource)\r\n    {\r\n        for (var i = 0; i < headerSource.length; i++)\r\n        {\r\n            var line = headerSource[i].trim();\r\n\r\n            if (line.substring(0, 5) === 'name:')\r\n            {\r\n                return line.substring(5).trim();\r\n            }\r\n        }\r\n\r\n        return this.key;\r\n    },\r\n\r\n    /**\r\n     * Returns the type of the shader from the header block.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.GLSLFile#getShaderType\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string[]} headerSource - The header data.\r\n     * \r\n     * @return {string} The shader type. Either 'fragment' or 'vertex'.\r\n     */\r\n    getShaderType: function (headerSource)\r\n    {\r\n        for (var i = 0; i < headerSource.length; i++)\r\n        {\r\n            var line = headerSource[i].trim();\r\n\r\n            if (line.substring(0, 5) === 'type:')\r\n            {\r\n                return line.substring(5).trim();\r\n            }\r\n        }\r\n\r\n        return this.config.shaderType;\r\n    },\r\n\r\n    /**\r\n     * Returns the shader uniforms from the header block.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.GLSLFile#getShaderUniforms\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string[]} headerSource - The header data.\r\n     * \r\n     * @return {any} The shader uniforms object.\r\n     */\r\n    getShaderUniforms: function (headerSource)\r\n    {\r\n        var uniforms = {};\r\n\r\n        for (var i = 0; i < headerSource.length; i++)\r\n        {\r\n            var line = headerSource[i].trim();\r\n\r\n            if (line.substring(0, 8) === 'uniform.')\r\n            {\r\n                var pos = line.indexOf(':');\r\n\r\n                if (pos)\r\n                {\r\n                    var key = line.substring(8, pos);\r\n\r\n                    try\r\n                    {\r\n                        uniforms[key] = JSON.parse(line.substring(pos + 1));\r\n                    }\r\n                    catch (e)\r\n                    {\r\n                        console.warn('Invalid uniform JSON: ' + key);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return uniforms;\r\n    },\r\n\r\n    /**\r\n     * Processes the shader file and extracts the relevant data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.GLSLFile#extractBlock\r\n     * @private\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string[]} data - The array of shader data to process.\r\n     * @param {integer} offset - The offset to start processing from.\r\n     * \r\n     * @return {any} The processed shader block, or null.\r\n     */\r\n    extractBlock: function (data, offset)\r\n    {\r\n        var headerStart = -1;\r\n        var headerEnd = -1;\r\n        var blockEnd = -1;\r\n        var headerOpen = false;\r\n        var captureSource = false;\r\n        var headerSource = [];\r\n        var shaderSource = [];\r\n\r\n        for (var i = offset; i < data.length; i++)\r\n        {\r\n            var line = data[i].trim();\r\n\r\n            if (line === '---')\r\n            {\r\n                if (headerStart === -1)\r\n                {\r\n                    headerStart = i;\r\n                    headerOpen = true;\r\n                }\r\n                else if (headerOpen)\r\n                {\r\n                    headerEnd = i;\r\n                    headerOpen = false;\r\n                    captureSource = true;\r\n                }\r\n                else\r\n                {\r\n                    //  We've hit another --- delimeter, break out\r\n                    captureSource = false;\r\n                    break;\r\n                }\r\n            }\r\n            else if (headerOpen)\r\n            {\r\n                headerSource.push(line);\r\n            }\r\n            else if (captureSource)\r\n            {\r\n                shaderSource.push(line);\r\n                blockEnd = i;\r\n            }\r\n        }\r\n\r\n        if (!headerOpen && headerEnd !== -1)\r\n        {\r\n            return { header: headerSource, shader: shaderSource.join('\\n'), offset: blockEnd };\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds a GLSL file, or array of GLSL files, to the current load queue.\r\n * In Phaser 3 GLSL files are just plain Text files at the current moment in time.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.glsl('plasma', 'shaders/Plasma.glsl');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Shader Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Shader Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Shader Cache first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.glsl({\r\n *     key: 'plasma',\r\n *     shaderType: 'fragment',\r\n *     url: 'shaders/Plasma.glsl'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.GLSLFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can access it from its Cache using its key:\r\n * \r\n * ```javascript\r\n * this.load.glsl('plasma', 'shaders/Plasma.glsl');\r\n * // and later in your game ...\r\n * var data = this.cache.shader.get('plasma');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `FX.` and the key was `Plasma` the final key will be `FX.Plasma` and\r\n * this is what you would use to retrieve the text from the Shader Cache.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"plasma\"\r\n * and no URL is given then the Loader will set the URL to be \"plasma.glsl\". It will always add `.glsl` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the GLSL File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#glsl\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.GLSLFileConfig|Phaser.Types.Loader.FileTypes.GLSLFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.glsl`, i.e. if `key` was \"alien\" then the URL will be \"alien.glsl\".\r\n * @param {string} [shaderType='fragment'] - The type of shader. Either `fragment` for a fragment shader, or `vertex` for a vertex shader. This is ignored if you load a shader bundle.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('glsl', function (key, url, shaderType, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new GLSLFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new GLSLFile(this, key, url, shaderType, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = GLSLFile;\r\n"},"sourceMaps":null,"error":null,"hash":"131947dd33310e107b04cafb68ba8d6c","cacheData":{"env":{}}}