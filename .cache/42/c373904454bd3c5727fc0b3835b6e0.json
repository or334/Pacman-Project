{"id":"../../node_modules/phaser/src/physics/matter-js/index.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"./Factory","loc":{"line":13,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\index.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\Factory.js"},{"name":"./MatterImage","loc":{"line":14,"column":19},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\index.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterImage.js"},{"name":"./CustomMain","loc":{"line":15,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\index.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\CustomMain.js"},{"name":"./MatterPhysics","loc":{"line":16,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\index.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterPhysics.js"},{"name":"./poly-decomp","loc":{"line":17,"column":24},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\index.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\poly-decomp\\index.js"},{"name":"./MatterSprite","loc":{"line":18,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\index.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterSprite.js"},{"name":"./MatterTileBody","loc":{"line":19,"column":22},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\index.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\MatterTileBody.js"},{"name":"./World","loc":{"line":20,"column":19},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\index.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\World.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Physics.Matter\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    Factory: require('./Factory'),\r\n    Image: require('./MatterImage'),\r\n    Matter: require('./CustomMain'),\r\n    MatterPhysics: require('./MatterPhysics'),\r\n    PolyDecomp: require('./poly-decomp'),\r\n    Sprite: require('./MatterSprite'),\r\n    TileBody: require('./MatterTileBody'),\r\n    World: require('./World')\r\n\r\n};\r\n\r\n/**\r\n * @namespace MatterJS\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The `Matter.Body` module contains methods for creating and manipulating body models.\r\n * A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\r\n * Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\r\n *\r\n * @class MatterJS.Body\r\n * @since 3.0.0\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\r\n * A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\r\n * It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\r\n * Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\r\n *\r\n * @class MatterJS.Composite\r\n * @since 3.0.0\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The `Matter.World` module contains methods for creating and manipulating the world composite.\r\n * A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\r\n * A `Matter.World` has a few additional properties including `gravity` and `bounds`.\r\n * It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\r\n * There are also a few methods here that alias those in `Matter.Composite` for easier readability.\r\n *\r\n * @class MatterJS.World\r\n * @extends MatterJS.Composite\r\n * @since 3.0.0\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The `Matter.Constraint` module contains methods for creating and manipulating constraints.\r\n * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\r\n * The stiffness of constraints can be modified to create springs or elastic.\r\n *\r\n * @class MatterJS.Constraint\r\n * @since 3.0.0\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The `Matter.Engine` module contains methods for creating and manipulating engines.\r\n * An engine is a controller that manages updating the simulation of the world.\r\n *\r\n * @class MatterJS.Engine\r\n * @since 3.0.0\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\r\n * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\r\n * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\r\n *\r\n * @class MatterJS.Vertices\r\n * @since 3.0.0\r\n */\r\n"},"sourceMaps":null,"error":null,"hash":"29d54cfd5055f337556ecc2cacc31494","cacheData":{"env":{}}}