{"id":"../../node_modules/phaser/src/gameobjects/shape/grid/Grid.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\shape\\grid\\Grid.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../Shape","loc":{"line":8,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\shape\\grid\\Grid.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\shape\\Shape.js"},{"name":"./GridRender","loc":{"line":9,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\shape\\grid\\Grid.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\shape\\grid\\GridRender.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\nvar Shape = require('../Shape');\r\nvar GridRender = require('./GridRender');\r\n\r\n/**\r\n * @classdesc\r\n * The Grid Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only fill colors and cannot be stroked.\r\n * \r\n * A Grid Shape allows you to display a grid in your game, where you can control the size of the\r\n * grid as well as the width and height of the grid cells. You can set a fill color for each grid\r\n * cell as well as an alternate fill color. When the alternate fill color is set then the grid\r\n * cells will alternate the fill colors as they render, creating a chess-board effect. You can\r\n * also optionally have an outline fill color. If set, this draws lines between the grid cells\r\n * in the given color. If you specify an outline color with an alpha of zero, then it will draw\r\n * the cells spaced out, but without the lines between them.\r\n *\r\n * @class Grid\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [width=128] - The width of the grid.\r\n * @param {number} [height=128] - The height of the grid.\r\n * @param {number} [cellWidth=32] - The width of one cell in the grid.\r\n * @param {number} [cellHeight=32] - The height of one cell in the grid.\r\n * @param {number} [fillColor] - The color the grid cells will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n * @param {number} [outlineFillColor] - The color of the lines between the grid cells. See the `setOutline` method.\r\n * @param {number} [outlineFillAlpha] - The alpha of the lines between the grid cells.\r\n */\r\nvar Grid = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        GridRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Grid (scene, x, y, width, height, cellWidth, cellHeight, fillColor, fillAlpha, outlineFillColor, outlineFillAlpha)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = 128; }\r\n        if (height === undefined) { height = 128; }\r\n        if (cellWidth === undefined) { cellWidth = 32; }\r\n        if (cellHeight === undefined) { cellHeight = 32; }\r\n\r\n        Shape.call(this, scene, 'Grid', null);\r\n\r\n        /**\r\n         * The width of each grid cell.\r\n         * Must be a positive value.\r\n         *\r\n         * @name Phaser.GameObjects.Grid#cellWidth\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.cellWidth = cellWidth;\r\n\r\n        /**\r\n         * The height of each grid cell.\r\n         * Must be a positive value.\r\n         *\r\n         * @name Phaser.GameObjects.Grid#cellHeight\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.cellHeight = cellHeight;\r\n\r\n        /**\r\n         * Will the grid render its cells in the `fillColor`?\r\n         *\r\n         * @name Phaser.GameObjects.Grid#showCells\r\n         * @type {boolean}\r\n         * @since 3.13.0\r\n         */\r\n        this.showCells = true;\r\n\r\n        /**\r\n         * The color of the lines between each grid cell.\r\n         *\r\n         * @name Phaser.GameObjects.Grid#outlineFillColor\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.outlineFillColor = 0;\r\n\r\n        /**\r\n         * The alpha value for the color of the lines between each grid cell.\r\n         *\r\n         * @name Phaser.GameObjects.Grid#outlineFillAlpha\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.outlineFillAlpha = 0;\r\n\r\n        /**\r\n         * Will the grid display the lines between each cell when it renders?\r\n         *\r\n         * @name Phaser.GameObjects.Grid#showOutline\r\n         * @type {boolean}\r\n         * @since 3.13.0\r\n         */\r\n        this.showOutline = true;\r\n\r\n        /**\r\n         * Will the grid render the alternating cells in the `altFillColor`?\r\n         *\r\n         * @name Phaser.GameObjects.Grid#showAltCells\r\n         * @type {boolean}\r\n         * @since 3.13.0\r\n         */\r\n        this.showAltCells = false;\r\n\r\n        /**\r\n         * The color the alternating grid cells will be filled with, i.e. 0xff0000 for red.\r\n         *\r\n         * @name Phaser.GameObjects.Grid#altFillColor\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.altFillColor;\r\n\r\n        /**\r\n         * The alpha the alternating grid cells will be filled with.\r\n         * You can also set the alpha of the overall Shape using its `alpha` property.\r\n         *\r\n         * @name Phaser.GameObjects.Grid#altFillAlpha\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.altFillAlpha;\r\n\r\n        this.setPosition(x, y);\r\n        this.setSize(width, height);\r\n\r\n        if (fillColor !== undefined)\r\n        {\r\n            this.setFillStyle(fillColor, fillAlpha);\r\n        }\r\n\r\n        if (outlineFillColor !== undefined)\r\n        {\r\n            this.setOutlineStyle(outlineFillColor, outlineFillAlpha);\r\n        }\r\n\r\n        this.updateDisplayOrigin();\r\n    },\r\n\r\n    /**\r\n     * Sets the fill color and alpha level the grid cells will use when rendering.\r\n     * \r\n     * If this method is called with no values then the grid cells will not be rendered, \r\n     * however the grid lines and alternating cells may still be.\r\n     * \r\n     * Also see the `setOutlineStyle` and `setAltFillStyle` methods.\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Grid#setFillStyle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} [fillColor] - The color the grid cells will be filled with, i.e. 0xff0000 for red.\r\n     * @param {number} [fillAlpha=1] - The alpha the grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setFillStyle: function (fillColor, fillAlpha)\r\n    {\r\n        if (fillAlpha === undefined) { fillAlpha = 1; }\r\n\r\n        if (fillColor === undefined)\r\n        {\r\n            this.showCells = false;\r\n        }\r\n        else\r\n        {\r\n            this.fillColor = fillColor;\r\n            this.fillAlpha = fillAlpha;\r\n            this.showCells = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the fill color and alpha level that the alternating grid cells will use.\r\n     * \r\n     * If this method is called with no values then alternating grid cells will not be rendered in a different color.\r\n     * \r\n     * Also see the `setOutlineStyle` and `setFillStyle` methods.\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Grid#setAltFillStyle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} [fillColor] - The color the alternating grid cells will be filled with, i.e. 0xff0000 for red.\r\n     * @param {number} [fillAlpha=1] - The alpha the alternating grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setAltFillStyle: function (fillColor, fillAlpha)\r\n    {\r\n        if (fillAlpha === undefined) { fillAlpha = 1; }\r\n\r\n        if (fillColor === undefined)\r\n        {\r\n            this.showAltCells = false;\r\n        }\r\n        else\r\n        {\r\n            this.altFillColor = fillColor;\r\n            this.altFillAlpha = fillAlpha;\r\n            this.showAltCells = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the fill color and alpha level that the lines between each grid cell will use.\r\n     * \r\n     * If this method is called with no values then the grid lines will not be rendered at all, however\r\n     * the cells themselves may still be if they have colors set.\r\n     * \r\n     * Also see the `setFillStyle` and `setAltFillStyle` methods.\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Grid#setOutlineStyle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} [fillColor] - The color the lines between the grid cells will be filled with, i.e. 0xff0000 for red.\r\n     * @param {number} [fillAlpha=1] - The alpha the lines between the grid cells will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setOutlineStyle: function (fillColor, fillAlpha)\r\n    {\r\n        if (fillAlpha === undefined) { fillAlpha = 1; }\r\n\r\n        if (fillColor === undefined)\r\n        {\r\n            this.showOutline = false;\r\n        }\r\n        else\r\n        {\r\n            this.outlineFillColor = fillColor;\r\n            this.outlineFillAlpha = fillAlpha;\r\n            this.showOutline = true;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Grid;\r\n"},"sourceMaps":null,"error":null,"hash":"299d0c37348c1614c77809fb8d566e5a","cacheData":{"env":{}}}