{"id":"../../node_modules/phaser/src/gameobjects/lights/LightsManager.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\lights\\LightsManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./Light","loc":{"line":8,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\lights\\LightsManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\lights\\Light.js"},{"name":"../../renderer/webgl/Utils","loc":{"line":9,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\lights\\LightsManager.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\webgl\\Utils.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Light = require('./Light');\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * @callback LightForEach\r\n *\r\n * @param {Phaser.GameObjects.Light} light - The Light.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Manages Lights for a Scene.\r\n *\r\n * Affects the rendering of Game Objects using the `Light2D` pipeline.\r\n *\r\n * @class LightsManager\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n */\r\nvar LightsManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function LightsManager ()\r\n    {\r\n        /**\r\n         * The pool of Lights.\r\n         *\r\n         * Used to recycle removed Lights for a more efficient use of memory.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#lightPool\r\n         * @type {Phaser.GameObjects.Light[]}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.lightPool = [];\r\n\r\n        /**\r\n         * The Lights in the Scene.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#lights\r\n         * @type {Phaser.GameObjects.Light[]}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.lights = [];\r\n\r\n        /**\r\n         * Lights that have been culled from a Camera's viewport.\r\n         *\r\n         * Lights in this list will not be rendered.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#culledLights\r\n         * @type {Phaser.GameObjects.Light[]}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.culledLights = [];\r\n\r\n        /**\r\n         * The ambient color.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#ambientColor\r\n         * @type {{ r: number, g: number, b: number }}\r\n         * @since 3.0.0\r\n         */\r\n        this.ambientColor = { r: 0.1, g: 0.1, b: 0.1 };\r\n\r\n        /**\r\n         * Whether the Lights Manager is enabled.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#active\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.active = false;\r\n\r\n        /**\r\n         * The maximum number of lights that a single Camera and the lights shader can process.\r\n         * Change this via the `maxLights` property in your game config, as it cannot be changed at runtime.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#maxLights\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.15.0\r\n         */\r\n        this.maxLights = -1;\r\n    },\r\n\r\n    /**\r\n     * Enable the Lights Manager.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#enable\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    enable: function ()\r\n    {\r\n        if (this.maxLights === -1)\r\n        {\r\n            this.maxLights = this.scene.sys.game.renderer.config.maxLights;\r\n        }\r\n\r\n        this.active = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Disable the Lights Manager.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#disable\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    disable: function ()\r\n    {\r\n        this.active = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Cull any Lights that aren't visible to the given Camera.\r\n     *\r\n     * Culling Lights improves performance by ensuring that only Lights within a Camera's viewport are rendered.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to cull Lights for.\r\n     *\r\n     * @return {Phaser.GameObjects.Light[]} The culled Lights.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        var lights = this.lights;\r\n        var culledLights = this.culledLights;\r\n        var length = lights.length;\r\n        var cameraCenterX = camera.x + camera.width / 2.0;\r\n        var cameraCenterY = camera.y + camera.height / 2.0;\r\n        var cameraRadius = (camera.width + camera.height) / 2.0;\r\n        var point = { x: 0, y: 0 };\r\n        var cameraMatrix = camera.matrix;\r\n        var viewportHeight = this.systems.game.config.height;\r\n\r\n        culledLights.length = 0;\r\n\r\n        for (var index = 0; index < length && culledLights.length < this.maxLights; index++)\r\n        {\r\n            var light = lights[index];\r\n\r\n            cameraMatrix.transformPoint(light.x, light.y, point);\r\n\r\n            //  We'll just use bounding spheres to test if lights should be rendered\r\n            var dx = cameraCenterX - (point.x - (camera.scrollX * light.scrollFactorX * camera.zoom));\r\n            var dy = cameraCenterY - (viewportHeight - (point.y - (camera.scrollY * light.scrollFactorY) * camera.zoom));\r\n            var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            if (distance < light.radius + cameraRadius)\r\n            {\r\n                culledLights.push(lights[index]);\r\n            }\r\n        }\r\n\r\n        return culledLights;\r\n    },\r\n\r\n    /**\r\n     * Iterate over each Light with a callback.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#forEachLight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {LightForEach} callback - The callback that is called with each Light.\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    forEachLight: function (callback)\r\n    {\r\n        if (!callback)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var lights = this.lights;\r\n        var length = lights.length;\r\n\r\n        for (var index = 0; index < length; ++index)\r\n        {\r\n            callback(lights[index]);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the ambient light color.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#setAmbientColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rgb - The integer RGB color of the ambient light.\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    setAmbientColor: function (rgb)\r\n    {\r\n        var color = Utils.getFloatsFromUintRGB(rgb);\r\n\r\n        this.ambientColor.r = color[0];\r\n        this.ambientColor.g = color[1];\r\n        this.ambientColor.b = color[2];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the maximum number of Lights allowed to appear at once.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#getMaxVisibleLights\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The maximum number of Lights allowed to appear at once.\r\n     */\r\n    getMaxVisibleLights: function ()\r\n    {\r\n        return 10;\r\n    },\r\n\r\n    /**\r\n     * Get the number of Lights managed by this Lights Manager.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#getLightCount\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The number of Lights managed by this Lights Manager.\r\n     */\r\n    getLightCount: function ()\r\n    {\r\n        return this.lights.length;\r\n    },\r\n\r\n    /**\r\n     * Add a Light.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#addLight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal position of the Light.\r\n     * @param {number} [y=0] - The vertical position of the Light.\r\n     * @param {number} [radius=100] - The radius of the Light.\r\n     * @param {number} [rgb=0xffffff] - The integer RGB color of the light.\r\n     * @param {number} [intensity=1] - The intensity of the Light.\r\n     *\r\n     * @return {Phaser.GameObjects.Light} The Light that was added.\r\n     */\r\n    addLight: function (x, y, radius, rgb, intensity)\r\n    {\r\n        var color = null;\r\n        var light = null;\r\n\r\n        x = (x === undefined) ? 0.0 : x;\r\n        y = (y === undefined) ? 0.0 : y;\r\n        rgb = (rgb === undefined) ? 0xffffff : rgb;\r\n        radius = (radius === undefined) ? 100.0 : radius;\r\n        intensity = (intensity === undefined) ? 1.0 : intensity;\r\n\r\n        color = Utils.getFloatsFromUintRGB(rgb);\r\n        light = null;\r\n\r\n        if (this.lightPool.length > 0)\r\n        {\r\n            light = this.lightPool.pop();\r\n            light.set(x, y, radius, color[0], color[1], color[2], intensity);\r\n        }\r\n        else\r\n        {\r\n            light = new Light(x, y, radius, color[0], color[1], color[2], intensity);\r\n        }\r\n\r\n        this.lights.push(light);\r\n\r\n        return light;\r\n    },\r\n\r\n    /**\r\n     * Remove a Light.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#removeLight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Light} light - The Light to remove.\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    removeLight: function (light)\r\n    {\r\n        var index = this.lights.indexOf(light);\r\n\r\n        if (index >= 0)\r\n        {\r\n            this.lightPool.push(light);\r\n            this.lights.splice(index, 1);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shut down the Lights Manager.\r\n     *\r\n     * Recycles all active Lights into the Light pool, resets ambient light color and clears the lists of Lights and\r\n     * culled Lights.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        while (this.lights.length > 0)\r\n        {\r\n            this.lightPool.push(this.lights.pop());\r\n        }\r\n\r\n        this.ambientColor = { r: 0.1, g: 0.1, b: 0.1 };\r\n        this.culledLights.length = 0;\r\n        this.lights.length = 0;\r\n    },\r\n\r\n    /**\r\n     * Destroy the Lights Manager.\r\n     *\r\n     * Cleans up all references by calling {@link Phaser.GameObjects.LightsManager#shutdown}.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = LightsManager;\r\n"},"sourceMaps":null,"error":null,"hash":"f17c917373e3a8d001a10b2ec753f532","cacheData":{"env":{}}}