{"id":"../../node_modules/phaser/src/geom/intersects/PointToLine.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Florian Mertens\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if the a Point falls between the two end-points of a Line, based on the given line thickness.\r\n * \r\n * Assumes that the line end points are circular, not square.\r\n *\r\n * @function Phaser.Geom.Intersects.PointToLine\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Point|any)} point - The point, or point-like object to check.\r\n * @param {Phaser.Geom.Line} line - The line segment to test for intersection on.\r\n * @param {number} [lineThickness=1] - The line thickness. Assumes that the line end points are circular.\r\n *\r\n * @return {boolean} `true` if the Point falls on the Line, otherwise `false`.\r\n */\r\nvar PointToLine = function (point, line, lineThickness)\r\n{\r\n    if (lineThickness === undefined) { lineThickness = 1; }\r\n\r\n    var x1 = line.x1;\r\n    var y1 = line.y1;\r\n\r\n    var x2 = line.x2;\r\n    var y2 = line.y2;\r\n\r\n    var px = point.x;\r\n    var py = point.y;\r\n\r\n    var L2 = (((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));\r\n\r\n    if (L2 === 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    var r = (((px - x1) * (x2 - x1)) + ((py - y1) * (y2 - y1))) / L2;\r\n\r\n    //  Assume line thickness is circular\r\n    if (r < 0)\r\n    {\r\n        //  Outside line1\r\n        return (Math.sqrt(((x1 - px) * (x1 - px)) + ((y1 - py) * (y1 - py))) <= lineThickness);\r\n    }\r\n    else if ((r >= 0) && (r <= 1))\r\n    {\r\n        //  On the line segment\r\n        var s = (((y1 - py) * (x2 - x1)) - ((x1 - px) * (y2 - y1))) / L2;\r\n\r\n        return (Math.abs(s) * Math.sqrt(L2) <= lineThickness);\r\n    }\r\n    else\r\n    {\r\n        //  Outside line2\r\n        return (Math.sqrt(((x2 - px) * (x2 - px)) + ((y2 - py) * (y2 - py))) <= lineThickness);\r\n    }\r\n};\r\n\r\nmodule.exports = PointToLine;\r\n"},"sourceMaps":null,"error":null,"hash":"6558520ae4d6b7f6dd16bf9d87d03c57","cacheData":{"env":{}}}