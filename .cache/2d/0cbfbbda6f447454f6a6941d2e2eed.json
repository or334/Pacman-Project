{"id":"../../node_modules/phaser/src/gameobjects/graphics/GraphicsCanvasRenderer.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"./Commands","loc":{"line":7,"column":23},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\graphics\\GraphicsCanvasRenderer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\graphics\\Commands.js"},{"name":"../../renderer/canvas/utils/SetTransform","loc":{"line":8,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\graphics\\GraphicsCanvasRenderer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\canvas\\utils\\SetTransform.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Commands = require('./Commands');\r\nvar SetTransform = require('../../renderer/canvas/utils/SetTransform');\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Graphics#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Graphics} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n * @param {CanvasRenderingContext2D} [renderTargetCtx] - The target rendering context.\r\n * @param {boolean} allowClip - If `true` then path operations will be used instead of fill operations.\r\n */\r\nvar GraphicsCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix, renderTargetCtx, allowClip)\r\n{\r\n    var commandBuffer = src.commandBuffer;\r\n    var commandBufferLength = commandBuffer.length;\r\n\r\n    var ctx = renderTargetCtx || renderer.currentContext;\r\n\r\n    if (commandBufferLength === 0 || !SetTransform(renderer, ctx, src, camera, parentMatrix))\r\n    {\r\n        return;\r\n    }\r\n\r\n    var lineAlpha = 1;\r\n    var fillAlpha = 1;\r\n    var lineColor = 0;\r\n    var fillColor = 0;\r\n    var lineWidth = 1;\r\n    var red = 0;\r\n    var green = 0;\r\n    var blue = 0;\r\n\r\n    //  Reset any currently active paths\r\n    ctx.beginPath();\r\n\r\n    for (var index = 0; index < commandBufferLength; ++index)\r\n    {\r\n        var commandID = commandBuffer[index];\r\n\r\n        switch (commandID)\r\n        {\r\n            case Commands.ARC:\r\n                ctx.arc(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2],\r\n                    commandBuffer[index + 3],\r\n                    commandBuffer[index + 4],\r\n                    commandBuffer[index + 5],\r\n                    commandBuffer[index + 6]\r\n                );\r\n\r\n                //  +7 because overshoot is the 7th value, not used in Canvas\r\n                index += 7;\r\n                break;\r\n\r\n            case Commands.LINE_STYLE:\r\n                lineWidth = commandBuffer[index + 1];\r\n                lineColor = commandBuffer[index + 2];\r\n                lineAlpha = commandBuffer[index + 3];\r\n                red = ((lineColor & 0xFF0000) >>> 16);\r\n                green = ((lineColor & 0xFF00) >>> 8);\r\n                blue = (lineColor & 0xFF);\r\n                ctx.strokeStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + lineAlpha + ')';\r\n                ctx.lineWidth = lineWidth;\r\n                index += 3;\r\n                break;\r\n\r\n            case Commands.FILL_STYLE:\r\n                fillColor = commandBuffer[index + 1];\r\n                fillAlpha = commandBuffer[index + 2];\r\n                red = ((fillColor & 0xFF0000) >>> 16);\r\n                green = ((fillColor & 0xFF00) >>> 8);\r\n                blue = (fillColor & 0xFF);\r\n                ctx.fillStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + fillAlpha + ')';\r\n                index += 2;\r\n                break;\r\n\r\n            case Commands.BEGIN_PATH:\r\n                ctx.beginPath();\r\n                break;\r\n\r\n            case Commands.CLOSE_PATH:\r\n                ctx.closePath();\r\n                break;\r\n\r\n            case Commands.FILL_PATH:\r\n                if (!allowClip)\r\n                {\r\n                    ctx.fill();\r\n                }\r\n                break;\r\n\r\n            case Commands.STROKE_PATH:\r\n                if (!allowClip)\r\n                {\r\n                    ctx.stroke();\r\n                }\r\n                break;\r\n\r\n            case Commands.FILL_RECT:\r\n                if (!allowClip)\r\n                {\r\n                    ctx.fillRect(\r\n                        commandBuffer[index + 1],\r\n                        commandBuffer[index + 2],\r\n                        commandBuffer[index + 3],\r\n                        commandBuffer[index + 4]\r\n                    );\r\n                }\r\n                else\r\n                {\r\n                    ctx.rect(\r\n                        commandBuffer[index + 1],\r\n                        commandBuffer[index + 2],\r\n                        commandBuffer[index + 3],\r\n                        commandBuffer[index + 4]\r\n                    );\r\n                }\r\n                index += 4;\r\n                break;\r\n\r\n            case Commands.FILL_TRIANGLE:\r\n                ctx.beginPath();\r\n                ctx.moveTo(commandBuffer[index + 1], commandBuffer[index + 2]);\r\n                ctx.lineTo(commandBuffer[index + 3], commandBuffer[index + 4]);\r\n                ctx.lineTo(commandBuffer[index + 5], commandBuffer[index + 6]);\r\n                ctx.closePath();\r\n                if (!allowClip)\r\n                {\r\n                    ctx.fill();\r\n                }\r\n                index += 6;\r\n                break;\r\n\r\n            case Commands.STROKE_TRIANGLE:\r\n                ctx.beginPath();\r\n                ctx.moveTo(commandBuffer[index + 1], commandBuffer[index + 2]);\r\n                ctx.lineTo(commandBuffer[index + 3], commandBuffer[index + 4]);\r\n                ctx.lineTo(commandBuffer[index + 5], commandBuffer[index + 6]);\r\n                ctx.closePath();\r\n                if (!allowClip)\r\n                {\r\n                    ctx.stroke();\r\n                }\r\n                index += 6;\r\n                break;\r\n\r\n            case Commands.LINE_TO:\r\n                ctx.lineTo(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2]\r\n                );\r\n                index += 2;\r\n                break;\r\n\r\n            case Commands.MOVE_TO:\r\n                ctx.moveTo(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2]\r\n                );\r\n                index += 2;\r\n                break;\r\n\r\n            case Commands.LINE_FX_TO:\r\n                ctx.lineTo(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2]\r\n                );\r\n                index += 5;\r\n                break;\r\n\r\n            case Commands.MOVE_FX_TO:\r\n                ctx.moveTo(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2]\r\n                );\r\n                index += 5;\r\n                break;\r\n\r\n            case Commands.SAVE:\r\n                ctx.save();\r\n                break;\r\n\r\n            case Commands.RESTORE:\r\n                ctx.restore();\r\n                break;\r\n\r\n            case Commands.TRANSLATE:\r\n                ctx.translate(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2]\r\n                );\r\n                index += 2;\r\n                break;\r\n\r\n            case Commands.SCALE:\r\n                ctx.scale(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2]\r\n                );\r\n                index += 2;\r\n                break;\r\n\r\n            case Commands.ROTATE:\r\n                ctx.rotate(\r\n                    commandBuffer[index + 1]\r\n                );\r\n                index += 1;\r\n                break;\r\n\r\n            case Commands.GRADIENT_FILL_STYLE:\r\n                index += 5;\r\n                break;\r\n\r\n            case Commands.GRADIENT_LINE_STYLE:\r\n                index += 6;\r\n                break;\r\n\r\n            case Commands.SET_TEXTURE:\r\n                index += 2;\r\n                break;\r\n        }\r\n    }\r\n\r\n    //  Restore the context saved in SetTransform\r\n    ctx.restore();\r\n};\r\n\r\nmodule.exports = GraphicsCanvasRenderer;\r\n"},"sourceMaps":null,"error":null,"hash":"f15fab87095537e7786557a307c11ec5","cacheData":{"env":{}}}