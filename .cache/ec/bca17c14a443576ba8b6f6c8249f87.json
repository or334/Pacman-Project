{"id":"../../node_modules/phaser/plugins/camera3d/src/CameraManager.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../../src/utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\CameraManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./OrthographicCamera","loc":{"line":8,"column":33},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\CameraManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\OrthographicCamera.js"},{"name":"./PerspectiveCamera","loc":{"line":9,"column":32},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\CameraManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\PerspectiveCamera.js"},{"name":"../../../src/plugins/PluginCache","loc":{"line":10,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\plugins\\camera3d\\src\\CameraManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\plugins\\PluginCache.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../src/utils/Class');\r\nvar OrthographicCamera = require('./OrthographicCamera');\r\nvar PerspectiveCamera = require('./PerspectiveCamera');\r\nvar PluginCache = require('../../../src/plugins/PluginCache');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class CameraManager\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\r\nvar CameraManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function CameraManager (scene)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.CameraManager#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.CameraManager#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * An Array of the Camera objects being managed by this Camera Manager.\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.CameraManager#cameras\r\n         * @type {Phaser.Cameras.Sprite3D.Camera[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.cameras = [];\r\n\r\n        scene.sys.events.once('boot', this.boot, this);\r\n        scene.sys.events.on('start', this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Cameras.Scene3D.CameraManager#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.systems.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on('update', this.update, this);\r\n        eventEmitter.once('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [fieldOfView=80] - [description]\r\n     * @param {number} [width] - [description]\r\n     * @param {number} [height] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n     */\r\n    add: function (fieldOfView, width, height)\r\n    {\r\n        return this.addPerspectiveCamera(fieldOfView, width, height);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#addOrthographicCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n     */\r\n    addOrthographicCamera: function (width, height)\r\n    {\r\n        var config = this.scene.sys.game.config;\r\n\r\n        if (width === undefined) { width = config.width; }\r\n        if (height === undefined) { height = config.height; }\r\n\r\n        var camera = new OrthographicCamera(this.scene, width, height);\r\n\r\n        this.cameras.push(camera);\r\n\r\n        return camera;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#addPerspectiveCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [fieldOfView=80] - [description]\r\n     * @param {number} [width] - [description]\r\n     * @param {number} [height] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n     */\r\n    addPerspectiveCamera: function (fieldOfView, width, height)\r\n    {\r\n        var config = this.scene.sys.game.config;\r\n\r\n        if (fieldOfView === undefined) { fieldOfView = 80; }\r\n        if (width === undefined) { width = config.width; }\r\n        if (height === undefined) { height = config.height; }\r\n\r\n        var camera = new PerspectiveCamera(this.scene, fieldOfView, width, height);\r\n\r\n        this.cameras.push(camera);\r\n\r\n        return camera;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#getCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - [description]\r\n     *\r\n     * @return {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} [description]\r\n     */\r\n    getCamera: function (name)\r\n    {\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            if (this.cameras[i].name === name)\r\n            {\r\n                return this.cameras[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#removeCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} camera - [description]\r\n     */\r\n    removeCamera: function (camera)\r\n    {\r\n        var cameraIndex = this.cameras.indexOf(camera);\r\n\r\n        if (cameraIndex !== -1)\r\n        {\r\n            this.cameras.splice(cameraIndex, 1);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#removeAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} [description]\r\n     */\r\n    removeAll: function ()\r\n    {\r\n        while (this.cameras.length > 0)\r\n        {\r\n            var camera = this.cameras.pop();\r\n\r\n            camera.destroy();\r\n        }\r\n\r\n        return this.main;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} timestep - [description]\r\n     * @param {number} delta - [description]\r\n     */\r\n    update: function (timestep, delta)\r\n    {\r\n        for (var i = 0, l = this.cameras.length; i < l; ++i)\r\n        {\r\n            this.cameras[i].update(timestep, delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off('update', this.update, this);\r\n        eventEmitter.off('shutdown', this.shutdown, this);\r\n\r\n        this.removeAll();\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off('start', this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('CameraManager3D', CameraManager, 'cameras3d');\r\n\r\nmodule.exports = CameraManager;\r\n"},"sourceMaps":null,"error":null,"hash":"2cfd920027335fcd2e81162f5abc63ea","cacheData":{"env":{}}}