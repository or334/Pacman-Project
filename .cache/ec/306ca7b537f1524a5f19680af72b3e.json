{"id":"../../node_modules/phaser/src/scene/ScenePlugin.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../math/Clamp","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\ScenePlugin.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Clamp.js"},{"name":"../utils/Class","loc":{"line":8,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\ScenePlugin.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./events","loc":{"line":9,"column":21},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\ScenePlugin.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\events\\index.js"},{"name":"../utils/object/GetFastValue","loc":{"line":10,"column":27},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\ScenePlugin.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\object\\GetFastValue.js"},{"name":"../plugins/PluginCache","loc":{"line":11,"column":26},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\scene\\ScenePlugin.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\plugins\\PluginCache.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clamp = require('../math/Clamp');\r\nvar Class = require('../utils/Class');\r\nvar Events = require('./events');\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\nvar PluginCache = require('../plugins/PluginCache');\r\n\r\n/**\r\n * @classdesc\r\n * A proxy class to the Global Scene Manager.\r\n *\r\n * @class ScenePlugin\r\n * @memberof Phaser.Scenes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that this ScenePlugin belongs to.\r\n */\r\nvar ScenePlugin = new Class({\r\n\r\n    initialize:\r\n\r\n    function ScenePlugin (scene)\r\n    {\r\n        /**\r\n         * The Scene that this ScenePlugin belongs to.\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * The Scene Systems instance of the Scene that this ScenePlugin belongs to.\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * The settings of the Scene this ScenePlugin belongs to.\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#settings\r\n         * @type {Phaser.Types.Scenes.SettingsObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.settings = scene.sys.settings;\r\n\r\n        /**\r\n         * The key of the Scene this ScenePlugin belongs to.\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#key\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.key = scene.sys.settings.key;\r\n\r\n        /**\r\n         * The Game's SceneManager.\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#manager\r\n         * @type {Phaser.Scenes.SceneManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = scene.sys.game.scene;\r\n\r\n        /**\r\n         * If this Scene is currently transitioning to another, this holds\r\n         * the current percentage of the transition progress, between 0 and 1.\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#transitionProgress\r\n         * @type {number}\r\n         * @since 3.5.0\r\n         */\r\n        this.transitionProgress = 0;\r\n\r\n        /**\r\n         * Transition elapsed timer.\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#_elapsed\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._elapsed = 0;\r\n\r\n        /**\r\n         * Transition elapsed timer.\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#_target\r\n         * @type {?Phaser.Scenes.Scene}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._target = null;\r\n\r\n        /**\r\n         * Transition duration.\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#_duration\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._duration = 0;\r\n\r\n        /**\r\n         * Transition callback.\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#_onUpdate\r\n         * @type {function}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdate;\r\n\r\n        /**\r\n         * Transition callback scope.\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#_onUpdateScope\r\n         * @type {object}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdateScope;\r\n\r\n        /**\r\n         * Will this Scene sleep (true) after the transition, or stop (false)\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#_willSleep\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._willSleep = false;\r\n\r\n        /**\r\n         * Will this Scene be removed from the Scene Manager after the transition completes?\r\n         *\r\n         * @name Phaser.Scenes.ScenePlugin#_willRemove\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._willRemove = false;\r\n\r\n        scene.sys.events.once(Events.BOOT, this.boot, this);\r\n        scene.sys.events.on(Events.START, this.pluginStart, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#boot\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.systems.events.once(Events.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#pluginStart\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    pluginStart: function ()\r\n    {\r\n        this._target = null;\r\n\r\n        this.systems.events.once(Events.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Shutdown this Scene and run the given one.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#start\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to start.\r\n     * @param {object} [data] - The Scene data.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    start: function (key, data)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        this.manager.queueOp('stop', this.key);\r\n        this.manager.queueOp('start', key, data);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Restarts this Scene.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#restart\r\n     * @since 3.4.0\r\n     *\r\n     * @param {object} [data] - The Scene data.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    restart: function (data)\r\n    {\r\n        var key = this.key;\r\n\r\n        this.manager.queueOp('stop', key);\r\n        this.manager.queueOp('start', key, data);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * This will start a transition from the current Scene to the target Scene given.\r\n     *\r\n     * The transition will last for the duration specified in milliseconds.\r\n     *\r\n     * You can have the target Scene moved above or below this one in the display list.\r\n     *\r\n     * You can specify an update callback. This callback will be invoked _every frame_ for the duration\r\n     * of the transition.\r\n     *\r\n     * This Scene can either be sent to sleep at the end of the transition, or stopped. The default is to stop.\r\n     *\r\n     * There are also 5 transition related events: This scene will emit the event `transitionout` when\r\n     * the transition begins, which is typically the frame after calling this method.\r\n     *\r\n     * The target Scene will emit the event `transitioninit` when that Scene's `init` method is called.\r\n     * It will then emit the event `transitionstart` when its `create` method is called.\r\n     * If the Scene was sleeping and has been woken up, it will emit the event `transitionwake` instead of these two,\r\n     * as the Scenes `init` and `create` methods are not invoked when a Scene wakes up.\r\n     *\r\n     * When the duration of the transition has elapsed it will emit the event `transitioncomplete`.\r\n     * These events are cleared of all listeners when the Scene shuts down, but not if it is sent to sleep.\r\n     *\r\n     * It's important to understand that the duration of the transition begins the moment you call this method.\r\n     * If the Scene you are transitioning to includes delayed processes, such as waiting for files to load, the\r\n     * time still counts down even while that is happening. If the game itself pauses, or something else causes\r\n     * this Scenes update loop to stop, then the transition will also pause for that duration. There are\r\n     * checks in place to prevent you accidentally stopping a transitioning Scene but if you've got code to\r\n     * override this understand that until the target Scene completes it might never be unlocked for input events.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#transition\r\n     * @fires Phaser.Scenes.Events#TRANSITION_OUT\r\n     * @since 3.5.0\r\n     *\r\n     * @param {Phaser.Types.Scenes.SceneTransitionConfig} config - The transition configuration object.\r\n     *\r\n     * @return {boolean} `true` is the transition was started, otherwise `false`.\r\n     */\r\n    transition: function (config)\r\n    {\r\n        if (config === undefined) { config = {}; }\r\n\r\n        var key = GetFastValue(config, 'target', false);\r\n\r\n        var target = this.manager.getScene(key);\r\n\r\n        if (!key || !this.checkValidTransition(target))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var duration = GetFastValue(config, 'duration', 1000);\r\n\r\n        this._elapsed = 0;\r\n        this._target = target;\r\n        this._duration = duration;\r\n        this._willSleep = GetFastValue(config, 'sleep', false);\r\n        this._willRemove = GetFastValue(config, 'remove', false);\r\n\r\n        var callback = GetFastValue(config, 'onUpdate', null);\r\n\r\n        if (callback)\r\n        {\r\n            this._onUpdate = callback;\r\n            this._onUpdateScope = GetFastValue(config, 'onUpdateScope', this.scene);\r\n        }\r\n\r\n        var allowInput = GetFastValue(config, 'allowInput', false);\r\n\r\n        this.settings.transitionAllowInput = allowInput;\r\n\r\n        var targetSettings = target.sys.settings;\r\n\r\n        targetSettings.isTransition = true;\r\n        targetSettings.transitionFrom = this.scene;\r\n        targetSettings.transitionDuration = duration;\r\n        targetSettings.transitionAllowInput = allowInput;\r\n\r\n        if (GetFastValue(config, 'moveAbove', false))\r\n        {\r\n            this.manager.moveAbove(this.key, key);\r\n        }\r\n        else if (GetFastValue(config, 'moveBelow', false))\r\n        {\r\n            this.manager.moveBelow(this.key, key);\r\n        }\r\n\r\n        if (target.sys.isSleeping())\r\n        {\r\n            target.sys.wake();\r\n        }\r\n        else\r\n        {\r\n            this.manager.start(key, GetFastValue(config, 'data'));\r\n        }\r\n\r\n        this.systems.events.emit(Events.TRANSITION_OUT, target, duration);\r\n\r\n        this.systems.events.on(Events.UPDATE, this.step, this);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if this Scene can transition to the target Scene or not.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#checkValidTransition\r\n     * @private\r\n     * @since 3.5.0\r\n     *\r\n     * @param {Phaser.Scene} target - The Scene to test against.\r\n     *\r\n     * @return {boolean} `true` if this Scene can transition, otherwise `false`.\r\n     */\r\n    checkValidTransition: function (target)\r\n    {\r\n        //  Not a valid target if it doesn't exist, isn't active or is already transitioning in or out\r\n        if (!target || target.sys.isActive() || target.sys.isTransitioning() || target === this.scene || this.systems.isTransitioning())\r\n        {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * A single game step. This is only called if the parent Scene is transitioning\r\n     * out to another Scene.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#step\r\n     * @private\r\n     * @since 3.5.0\r\n     *\r\n     * @param {number} time - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    step: function (time, delta)\r\n    {\r\n        this._elapsed += delta;\r\n\r\n        this.transitionProgress = Clamp(this._elapsed / this._duration, 0, 1);\r\n\r\n        if (this._onUpdate)\r\n        {\r\n            this._onUpdate.call(this._onUpdateScope, this.transitionProgress);\r\n        }\r\n\r\n        if (this._elapsed >= this._duration)\r\n        {\r\n            this.transitionComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by `step` when the transition out of this scene to another is over.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#transitionComplete\r\n     * @private\r\n     * @fires Phaser.Scenes.Events#TRANSITION_COMPLETE\r\n     * @since 3.5.0\r\n     */\r\n    transitionComplete: function ()\r\n    {\r\n        var targetSys = this._target.sys;\r\n        var targetSettings = this._target.sys.settings;\r\n\r\n        //  Stop the step\r\n        this.systems.events.off(Events.UPDATE, this.step, this);\r\n\r\n        //  Notify target scene\r\n        targetSys.events.emit(Events.TRANSITION_COMPLETE, this.scene);\r\n\r\n        //  Clear target scene settings\r\n        targetSettings.isTransition = false;\r\n        targetSettings.transitionFrom = null;\r\n\r\n        //  Clear local settings\r\n        this._duration = 0;\r\n        this._target = null;\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n\r\n        //  Now everything is clear we can handle what happens to this Scene\r\n        if (this._willRemove)\r\n        {\r\n            this.manager.remove(this.key);\r\n        }\r\n        else if (this._willSleep)\r\n        {\r\n            this.systems.sleep();\r\n        }\r\n        else\r\n        {\r\n            this.manager.stop(this.key);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Add the Scene into the Scene Manager and start it if 'autoStart' is true or the Scene config 'active' property is set.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The Scene key.\r\n     * @param {(Phaser.Scene|Phaser.Types.Scenes.SettingsConfig|Phaser.Types.Scenes.CreateSceneFromObjectConfig|function)} sceneConfig - The config for the Scene.\r\n     * @param {boolean} autoStart - Whether to start the Scene after it's added.\r\n     * @param {object} [data] - Optional data object. This will be set as Scene.settings.data and passed to `Scene.init`.\r\n     *\r\n     * @return {Phaser.Scene} An instance of the Scene that was added to the Scene Manager.\r\n     */\r\n    add: function (key, sceneConfig, autoStart, data)\r\n    {\r\n        return this.manager.add(key, sceneConfig, autoStart, data);\r\n    },\r\n\r\n    /**\r\n     * Launch the given Scene and run it in parallel with this one.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#launch\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The Scene to launch.\r\n     * @param {object} [data] - The Scene data.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    launch: function (key, data)\r\n    {\r\n        if (key && key !== this.key)\r\n        {\r\n            this.manager.queueOp('start', key, data);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Runs the given Scene, but does not change the state of this Scene.\r\n     *\r\n     * If the given Scene is paused, it will resume it. If sleeping, it will wake it.\r\n     * If not running at all, it will be started.\r\n     *\r\n     * Use this if you wish to open a modal Scene by calling `pause` on the current\r\n     * Scene, then `run` on the modal Scene.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#run\r\n     * @since 3.10.0\r\n     *\r\n     * @param {string} key - The Scene to run.\r\n     * @param {object} [data] - A data object that will be passed to the Scene and emitted in its ready, wake, or resume events.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    run: function (key, data)\r\n    {\r\n        if (key && key !== this.key)\r\n        {\r\n            this.manager.queueOp('run', key, data);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Pause the Scene - this stops the update step from happening but it still renders.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to pause.\r\n     * @param {object} [data] - An optional data object that will be passed to the Scene and emitted in its pause event.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    pause: function (key, data)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        this.manager.queueOp('pause', key, data);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resume the Scene - starts the update loop again.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to resume.\r\n     * @param {object} [data] - An optional data object that will be passed to the Scene and emitted in its resume event.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    resume: function (key, data)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        this.manager.queueOp('resume', key, data);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Makes the Scene sleep (no update, no render) but doesn't shutdown.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#sleep\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to put to sleep.\r\n     * @param {object} [data] - An optional data object that will be passed to the Scene and emitted in its sleep event.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    sleep: function (key, data)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        this.manager.queueOp('sleep', key, data);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Makes the Scene wake-up (starts update and render)\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#wake\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to wake up.\r\n     * @param {object} [data] - An optional data object that will be passed to the Scene and emitted in its wake event.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    wake: function (key, data)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        this.manager.queueOp('wake', key, data);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Makes this Scene sleep then starts the Scene given.\r\n     * \r\n     * No checks are made to see if an instance of the given Scene is already running.\r\n     * Because Scenes in Phaser are non-exclusive, you are allowed to run multiple\r\n     * instances of them _at the same time_. This means, calling this function\r\n     * may launch another instance of the requested Scene if it's already running.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#switch\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The Scene to start.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    switch: function (key)\r\n    {\r\n        if (key !== this.key)\r\n        {\r\n            this.manager.queueOp('switch', this.key, key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shutdown the Scene, clearing display list, timers, etc.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#stop\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to stop.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    stop: function (key)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        this.manager.queueOp('stop', key);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the active state of the given Scene.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#setActive\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - If `true` the Scene will be resumed. If `false` it will be paused.\r\n     * @param {string} [key] - The Scene to set the active state of.\r\n     * @param {object} [data] - An optional data object that will be passed to the Scene and emitted with its events.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    setActive: function (value, key, data)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        var scene = this.manager.getScene(key);\r\n\r\n        if (scene)\r\n        {\r\n            scene.sys.setActive(value, data);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state of the given Scene.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#setVisible\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - The visible value.\r\n     * @param {string} [key] - The Scene to set the visible state for.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    setVisible: function (value, key)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        var scene = this.manager.getScene(key);\r\n\r\n        if (scene)\r\n        {\r\n            scene.sys.setVisible(value);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given Scene is sleeping or not?\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#isSleeping\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to check.\r\n     *\r\n     * @return {boolean} Whether the Scene is sleeping.\r\n     */\r\n    isSleeping: function (key)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        return this.manager.isSleeping(key);\r\n    },\r\n\r\n    /**\r\n     * Checks if the given Scene is running or not?\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#isActive\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to check.\r\n     *\r\n     * @return {boolean} Whether the Scene is running.\r\n     */\r\n    isActive: function (key)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        return this.manager.isActive(key);\r\n    },\r\n\r\n    /**\r\n     * Checks if the given Scene is paused or not?\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#isPaused\r\n     * @since 3.17.0\r\n     *\r\n     * @param {string} [key] - The Scene to check.\r\n     *\r\n     * @return {boolean} Whether the Scene is paused.\r\n     */\r\n    isPaused: function (key)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        return this.manager.isPaused(key);\r\n    },\r\n\r\n    /**\r\n     * Checks if the given Scene is visible or not?\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#isVisible\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to check.\r\n     *\r\n     * @return {boolean} Whether the Scene is visible.\r\n     */\r\n    isVisible: function (key)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        return this.manager.isVisible(key);\r\n    },\r\n\r\n    /**\r\n     * Swaps the position of two scenes in the Scenes list.\r\n     *\r\n     * This controls the order in which they are rendered and updated.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#swapPosition\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} keyA - The first Scene to swap.\r\n     * @param {string} [keyB] - The second Scene to swap. If none is given it defaults to this Scene.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    swapPosition: function (keyA, keyB)\r\n    {\r\n        if (keyB === undefined) { keyB = this.key; }\r\n\r\n        if (keyA !== keyB)\r\n        {\r\n            this.manager.swapPosition(keyA, keyB);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Swaps the position of two scenes in the Scenes list, so that Scene B is directly above Scene A.\r\n     *\r\n     * This controls the order in which they are rendered and updated.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#moveAbove\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} keyA - The Scene that Scene B will be moved to be above.\r\n     * @param {string} [keyB] - The Scene to be moved. If none is given it defaults to this Scene.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    moveAbove: function (keyA, keyB)\r\n    {\r\n        if (keyB === undefined) { keyB = this.key; }\r\n\r\n        if (keyA !== keyB)\r\n        {\r\n            this.manager.moveAbove(keyA, keyB);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Swaps the position of two scenes in the Scenes list, so that Scene B is directly below Scene A.\r\n     *\r\n     * This controls the order in which they are rendered and updated.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#moveBelow\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} keyA - The Scene that Scene B will be moved to be below.\r\n     * @param {string} [keyB] - The Scene to be moved. If none is given it defaults to this Scene.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    moveBelow: function (keyA, keyB)\r\n    {\r\n        if (keyB === undefined) { keyB = this.key; }\r\n\r\n        if (keyA !== keyB)\r\n        {\r\n            this.manager.moveBelow(keyA, keyB);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes a Scene from the SceneManager.\r\n     *\r\n     * The Scene is removed from the local scenes array, it's key is cleared from the keys\r\n     * cache and Scene.Systems.destroy is then called on it.\r\n     *\r\n     * If the SceneManager is processing the Scenes when this method is called it wil\r\n     * queue the operation for the next update sequence.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#remove\r\n     * @since 3.2.0\r\n     *\r\n     * @param {(string|Phaser.Scene)} [key] - The Scene to be removed.\r\n     *\r\n     * @return {Phaser.Scenes.SceneManager} This SceneManager.\r\n     */\r\n    remove: function (key)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        this.manager.remove(key);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Moves a Scene up one position in the Scenes list.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#moveUp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to move.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    moveUp: function (key)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        this.manager.moveUp(key);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Moves a Scene down one position in the Scenes list.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#moveDown\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to move.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    moveDown: function (key)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        this.manager.moveDown(key);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Brings a Scene to the top of the Scenes list.\r\n     *\r\n     * This means it will render above all other Scenes.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#bringToTop\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to move.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    bringToTop: function (key)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        this.manager.bringToTop(key);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sends a Scene to the back of the Scenes list.\r\n     *\r\n     * This means it will render below all other Scenes.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#sendToBack\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The Scene to move.\r\n     *\r\n     * @return {Phaser.Scenes.ScenePlugin} This ScenePlugin object.\r\n     */\r\n    sendToBack: function (key)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        this.manager.sendToBack(key);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Retrieve a Scene.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The Scene to retrieve.\r\n     *\r\n     * @return {Phaser.Scene} The Scene.\r\n     */\r\n    get: function (key)\r\n    {\r\n        return this.manager.getScene(key);\r\n    },\r\n\r\n    /**\r\n     * Retrieves the numeric index of a Scene in the Scenes list.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#getIndex\r\n     * @since 3.7.0\r\n     *\r\n     * @param {(string|Phaser.Scene)} [key] - The Scene to get the index of.\r\n     *\r\n     * @return {integer} The index of the Scene.\r\n     */\r\n    getIndex: function (key)\r\n    {\r\n        if (key === undefined) { key = this.key; }\r\n\r\n        return this.manager.getIndex(key);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off(Events.SHUTDOWN, this.shutdown, this);\r\n        eventEmitter.off(Events.POST_UPDATE, this.step, this);\r\n        eventEmitter.off(Events.TRANSITION_OUT);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Scenes.ScenePlugin#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off(Events.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n        this.settings = null;\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('ScenePlugin', ScenePlugin, 'scenePlugin');\r\n\r\nmodule.exports = ScenePlugin;\r\n"},"sourceMaps":null,"error":null,"hash":"0da1f2a7a955680d6ae91c6ae5e11eac","cacheData":{"env":{}}}