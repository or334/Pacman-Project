{"id":"../../node_modules/phaser/src/gameobjects/particles/ParticleManagerWebGLRenderer.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../renderer/webgl/Utils","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\particles\\ParticleManagerWebGLRenderer.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\renderer\\webgl\\Utils.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Particles.EmitterManager#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitterManager} emitterManager - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar ParticleManagerWebGLRenderer = function (renderer, emitterManager, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var emitters = emitterManager.emitters.list;\r\n    var emittersLength = emitters.length;\r\n\r\n    if (emittersLength === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var pipeline = this.pipeline;\r\n\r\n    var camMatrix = pipeline._tempMatrix1.copyFrom(camera.matrix);\r\n    var calcMatrix = pipeline._tempMatrix2;\r\n    var particleMatrix = pipeline._tempMatrix3;\r\n    var managerMatrix = pipeline._tempMatrix4.applyITRS(emitterManager.x, emitterManager.y, emitterManager.rotation, emitterManager.scaleX, emitterManager.scaleY);\r\n\r\n    camMatrix.multiply(managerMatrix);\r\n\r\n    renderer.setPipeline(pipeline);\r\n\r\n    var roundPixels = camera.roundPixels;\r\n    var texture = emitterManager.defaultFrame.glTexture;\r\n    var getTint = Utils.getTintAppendFloatAlphaAndSwap;\r\n\r\n    pipeline.setTexture2D(texture, 0);\r\n\r\n    for (var e = 0; e < emittersLength; e++)\r\n    {\r\n        var emitter = emitters[e];\r\n        var particles = emitter.alive;\r\n        var particleCount = particles.length;\r\n\r\n        if (!emitter.visible || particleCount === 0)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var scrollX = camera.scrollX * emitter.scrollFactorX;\r\n        var scrollY = camera.scrollY * emitter.scrollFactorY;\r\n\r\n        if (parentMatrix)\r\n        {\r\n            //  Multiply the camera by the parent matrix\r\n            camMatrix.multiplyWithOffset(parentMatrix, -scrollX, -scrollY);\r\n\r\n            scrollX = 0;\r\n            scrollY = 0;\r\n        }\r\n\r\n        if (renderer.setBlendMode(emitter.blendMode))\r\n        {\r\n            //  Rebind the texture if we've flushed\r\n            pipeline.setTexture2D(texture, 0);\r\n        }\r\n\r\n        if (emitter.mask)\r\n        {\r\n            emitter.mask.preRenderWebGL(renderer, emitter, camera);\r\n            pipeline.setTexture2D(texture, 0);\r\n        }\r\n    \r\n        var tintEffect = 0;\r\n\r\n        for (var i = 0; i < particleCount; i++)\r\n        {\r\n            var particle = particles[i];\r\n\r\n            var alpha = particle.alpha * camera.alpha;\r\n\r\n            if (alpha <= 0)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var frame = particle.frame;\r\n\r\n            var x = -(frame.halfWidth);\r\n            var y = -(frame.halfHeight);\r\n            var xw = x + frame.width;\r\n            var yh = y + frame.height;\r\n\r\n            particleMatrix.applyITRS(0, 0, particle.rotation, particle.scaleX, particle.scaleY);\r\n\r\n            particleMatrix.e = particle.x - scrollX;\r\n            particleMatrix.f = particle.y - scrollY;\r\n\r\n            camMatrix.multiply(particleMatrix, calcMatrix);\r\n\r\n            var tx0 = calcMatrix.getX(x, y);\r\n            var ty0 = calcMatrix.getY(x, y);\r\n    \r\n            var tx1 = calcMatrix.getX(x, yh);\r\n            var ty1 = calcMatrix.getY(x, yh);\r\n    \r\n            var tx2 = calcMatrix.getX(xw, yh);\r\n            var ty2 = calcMatrix.getY(xw, yh);\r\n    \r\n            var tx3 = calcMatrix.getX(xw, y);\r\n            var ty3 = calcMatrix.getY(xw, y);\r\n\r\n            if (roundPixels)\r\n            {\r\n                tx0 = Math.round(tx0);\r\n                ty0 = Math.round(ty0);\r\n    \r\n                tx1 = Math.round(tx1);\r\n                ty1 = Math.round(ty1);\r\n    \r\n                tx2 = Math.round(tx2);\r\n                ty2 = Math.round(ty2);\r\n    \r\n                tx3 = Math.round(tx3);\r\n                ty3 = Math.round(ty3);\r\n            }\r\n\r\n            var tint = getTint(particle.tint, alpha);\r\n\r\n            pipeline.batchQuad(tx0, ty0, tx1, ty1, tx2, ty2, tx3, ty3, frame.u0, frame.v0, frame.u1, frame.v1, tint, tint, tint, tint, tintEffect, texture, 0);\r\n        }\r\n\r\n        if (emitter.mask)\r\n        {\r\n            emitter.mask.postRenderWebGL(renderer, camera);\r\n            pipeline.setTexture2D(texture, 0);\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = ParticleManagerWebGLRenderer;\r\n"},"sourceMaps":null,"error":null,"hash":"19c6635fbd98345dc6adfa12761683ac","cacheData":{"env":{}}}