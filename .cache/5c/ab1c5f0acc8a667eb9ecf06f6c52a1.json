{"id":"../../node_modules/phaser/src/geom/triangle/GetPoint.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../point/Point","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\GetPoint.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\point\\Point.js"},{"name":"../line/Length","loc":{"line":8,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\triangle\\GetPoint.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\line\\Length.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\nvar Length = require('../line/Length');\r\n\r\n/**\r\n * Returns a Point from around the perimeter of a Triangle.\r\n *\r\n * @function Phaser.Geom.Triangle.GetPoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to get the point on its perimeter from.\r\n * @param {number} position - The position along the perimeter of the triangle. A value between 0 and 1.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An option Point, or Point-like object to store the value in. If not given a new Point will be created.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object containing the given position from the perimeter of the triangle.\r\n */\r\nvar GetPoint = function (triangle, position, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var line1 = triangle.getLineA();\r\n    var line2 = triangle.getLineB();\r\n    var line3 = triangle.getLineC();\r\n\r\n    if (position <= 0 || position >= 1)\r\n    {\r\n        out.x = line1.x1;\r\n        out.y = line1.y1;\r\n\r\n        return out;\r\n    }\r\n\r\n    var length1 = Length(line1);\r\n    var length2 = Length(line2);\r\n    var length3 = Length(line3);\r\n\r\n    var perimeter = length1 + length2 + length3;\r\n\r\n    var p = perimeter * position;\r\n    var localPosition = 0;\r\n\r\n    //  Which line is it on?\r\n\r\n    if (p < length1)\r\n    {\r\n        //  Line 1\r\n        localPosition = p / length1;\r\n\r\n        out.x = line1.x1 + (line1.x2 - line1.x1) * localPosition;\r\n        out.y = line1.y1 + (line1.y2 - line1.y1) * localPosition;\r\n    }\r\n    else if (p > length1 + length2)\r\n    {\r\n        //  Line 3\r\n        p -= length1 + length2;\r\n        localPosition = p / length3;\r\n\r\n        out.x = line3.x1 + (line3.x2 - line3.x1) * localPosition;\r\n        out.y = line3.y1 + (line3.y2 - line3.y1) * localPosition;\r\n    }\r\n    else\r\n    {\r\n        //  Line 2\r\n        p -= length1;\r\n        localPosition = p / length2;\r\n\r\n        out.x = line2.x1 + (line2.x2 - line2.x1) * localPosition;\r\n        out.y = line2.y1 + (line2.y2 - line2.y1) * localPosition;\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoint;\r\n"},"sourceMaps":null,"error":null,"hash":"3b6e271a13ed60c3467bfefe5156e0ed","cacheData":{"env":{}}}