{"id":"../../node_modules/phaser/src/gameobjects/particles/ParticleEmitterManager.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\particles\\ParticleEmitterManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"../components","loc":{"line":8,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\particles\\ParticleEmitterManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\components\\index.js"},{"name":"../GameObject","loc":{"line":9,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\particles\\ParticleEmitterManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\GameObject.js"},{"name":"./GravityWell","loc":{"line":10,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\particles\\ParticleEmitterManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\particles\\GravityWell.js"},{"name":"../../structs/List","loc":{"line":11,"column":19},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\particles\\ParticleEmitterManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\structs\\List.js"},{"name":"./ParticleEmitter","loc":{"line":12,"column":30},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\particles\\ParticleEmitterManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\particles\\ParticleEmitter.js"},{"name":"./ParticleManagerRender","loc":{"line":13,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\particles\\ParticleEmitterManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\particles\\ParticleManagerRender.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar GameObject = require('../GameObject');\r\nvar GravityWell = require('./GravityWell');\r\nvar List = require('../../structs/List');\r\nvar ParticleEmitter = require('./ParticleEmitter');\r\nvar Render = require('./ParticleManagerRender');\r\n\r\n/**\r\n * @classdesc\r\n * A Particle Emitter Manager creates and controls {@link Phaser.GameObjects.Particles.ParticleEmitter Particle Emitters} and {@link Phaser.GameObjects.Particles.GravityWell Gravity Wells}.\r\n *\r\n * @class ParticleEmitterManager\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Emitter Manager belongs.\r\n * @param {string} texture - The key of the Texture this Emitter Manager will use to render particles, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Emitter Manager will use to render particles.\r\n * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterConfig|Phaser.Types.GameObjects.Particles.ParticleEmitterConfig[]} [emitters] - Configuration settings for one or more emitters to create.\r\n */\r\nvar ParticleEmitterManager = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Depth,\r\n        Components.Mask,\r\n        Components.Pipeline,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Render\r\n    ],\r\n\r\n    initialize:\r\n\r\n    //  frame is optional and can contain the emitters array or object if skipped\r\n    function ParticleEmitterManager (scene, texture, frame, emitters)\r\n    {\r\n        GameObject.call(this, scene, 'ParticleEmitterManager');\r\n\r\n        /**\r\n         * The blend mode applied to all emitters and particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#blendMode\r\n         * @type {integer}\r\n         * @default -1\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.blendMode = -1;\r\n\r\n        /**\r\n         * The time scale applied to all emitters and particles, affecting flow rate, lifespan, and movement.\r\n         * Values larger than 1 are faster than normal.\r\n         * This is multiplied with any timeScale set on each individual emitter.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#timeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.timeScale = 1;\r\n\r\n        /**\r\n         * The texture used to render this Emitter Manager's particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#texture\r\n         * @type {Phaser.Textures.Texture}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.texture = null;\r\n\r\n        /**\r\n         * The texture frame used to render this Emitter Manager's particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#frame\r\n         * @type {Phaser.Textures.Frame}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.frame = null;\r\n\r\n        /**\r\n         * Names of this Emitter Manager's texture frames.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#frameNames\r\n         * @type {string[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.frameNames = [];\r\n\r\n        //  frame is optional and can contain the emitters array or object if skipped\r\n        if (frame !== null && (typeof frame === 'object' || Array.isArray(frame)))\r\n        {\r\n            emitters = frame;\r\n            frame = null;\r\n        }\r\n\r\n        this.setTexture(texture, frame);\r\n\r\n        this.initPipeline();\r\n\r\n        /**\r\n         * A list of Emitters being managed by this Emitter Manager.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#emitters\r\n         * @type {Phaser.Structs.List.<Phaser.GameObjects.Particles.ParticleEmitter>}\r\n         * @since 3.0.0\r\n         */\r\n        this.emitters = new List(this);\r\n\r\n        /**\r\n         * A list of Gravity Wells being managed by this Emitter Manager.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#wells\r\n         * @type {Phaser.Structs.List.<Phaser.GameObjects.Particles.GravityWell>}\r\n         * @since 3.0.0\r\n         */\r\n        this.wells = new List(this);\r\n\r\n        if (emitters)\r\n        {\r\n            //  An array of emitter configs?\r\n            if (!Array.isArray(emitters))\r\n            {\r\n                emitters = [ emitters ];\r\n            }\r\n\r\n            for (var i = 0; i < emitters.length; i++)\r\n            {\r\n                this.createEmitter(emitters[i]);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the texture and frame this Emitter Manager will use to render with.\r\n     *\r\n     * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setTexture\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the texture to be used, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    setTexture: function (key, frame)\r\n    {\r\n        this.texture = this.scene.sys.textures.get(key);\r\n\r\n        return this.setFrame(frame);\r\n    },\r\n\r\n    /**\r\n     * Sets the frame this Emitter Manager will use to render with.\r\n     *\r\n     * The Frame has to belong to the current Texture being used.\r\n     *\r\n     * It can be either a string or an index.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    setFrame: function (frame)\r\n    {\r\n        this.frame = this.texture.get(frame);\r\n\r\n        var frames = this.texture.getFramesFromTextureSource(this.frame.sourceIndex);\r\n\r\n        var names = [];\r\n\r\n        frames.forEach(function (sourceFrame)\r\n        {\r\n            names.push(sourceFrame.name);\r\n        });\r\n\r\n        this.frameNames = names;\r\n\r\n        this.defaultFrame = this.frame;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Assigns texture frames to an emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setEmitterFrames\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Textures.Frame|Phaser.Textures.Frame[])} frames - The texture frames.\r\n     * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The particle emitter to modify.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    setEmitterFrames: function (frames, emitter)\r\n    {\r\n        if (!Array.isArray(frames))\r\n        {\r\n            frames = [ frames ];\r\n        }\r\n\r\n        var out = emitter.frames;\r\n\r\n        out.length = 0;\r\n\r\n        for (var i = 0; i < frames.length; i++)\r\n        {\r\n            var frame = frames[i];\r\n\r\n            if (this.frameNames.indexOf(frame) !== -1)\r\n            {\r\n                out.push(this.texture.get(frame));\r\n            }\r\n        }\r\n\r\n        if (out.length > 0)\r\n        {\r\n            emitter.defaultFrame = out[0];\r\n        }\r\n        else\r\n        {\r\n            emitter.defaultFrame = this.defaultFrame;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds an existing Particle Emitter to this Emitter Manager.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#addEmitter\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Particle Emitter to add to this Emitter Manager.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} The Particle Emitter that was added to this Emitter Manager.\r\n     */\r\n    addEmitter: function (emitter)\r\n    {\r\n        return this.emitters.add(emitter);\r\n    },\r\n\r\n    /**\r\n     * Creates a new Particle Emitter object, adds it to this Emitter Manager and returns a reference to it.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#createEmitter\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterConfig} config - Configuration settings for the Particle Emitter to create.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} The Particle Emitter that was created.\r\n     */\r\n    createEmitter: function (config)\r\n    {\r\n        return this.addEmitter(new ParticleEmitter(this, config));\r\n    },\r\n\r\n    /**\r\n     * Adds an existing Gravity Well object to this Emitter Manager.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#addGravityWell\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.GravityWell} well - The Gravity Well to add to this Emitter Manager.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.GravityWell} The Gravity Well that was added to this Emitter Manager.\r\n     */\r\n    addGravityWell: function (well)\r\n    {\r\n        return this.wells.add(well);\r\n    },\r\n\r\n    /**\r\n     * Creates a new Gravity Well, adds it to this Emitter Manager and returns a reference to it.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#createGravityWell\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.GravityWellConfig} config - Configuration settings for the Gravity Well to create.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.GravityWell} The Gravity Well that was created.\r\n     */\r\n    createGravityWell: function (config)\r\n    {\r\n        return this.addGravityWell(new GravityWell(config));\r\n    },\r\n\r\n    /**\r\n     * Emits particles from each active emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#emitParticle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [count] - The number of particles to release from each emitter. The default is the emitter's own {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\r\n     * @param {number} [x] - The x-coordinate to to emit particles from. The default is the x-coordinate of the emitter's current location.\r\n     * @param {number} [y] - The y-coordinate to to emit particles from. The default is the y-coordinate of the emitter's current location.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    emitParticle: function (count, x, y)\r\n    {\r\n        var emitters = this.emitters.list;\r\n\r\n        for (var i = 0; i < emitters.length; i++)\r\n        {\r\n            var emitter = emitters[i];\r\n\r\n            if (emitter.active)\r\n            {\r\n                emitter.emitParticle(count, x, y);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Emits particles from each active emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#emitParticleAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x] - The x-coordinate to to emit particles from. The default is the x-coordinate of the emitter's current location.\r\n     * @param {number} [y] - The y-coordinate to to emit particles from. The default is the y-coordinate of the emitter's current location.\r\n     * @param {integer} [count] - The number of particles to release from each emitter. The default is the emitter's own {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    emitParticleAt: function (x, y, count)\r\n    {\r\n        return this.emitParticle(count, x, y);\r\n    },\r\n\r\n    /**\r\n     * Pauses this Emitter Manager.\r\n     *\r\n     * This has the effect of pausing all emitters, and all particles of those emitters, currently under its control.\r\n     *\r\n     * The particles will still render, but they will not have any of their logic updated.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    pause: function ()\r\n    {\r\n        this.active = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resumes this Emitter Manager, should it have been previously paused.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    resume: function ()\r\n    {\r\n        this.active = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets all active particle processors (gravity wells).\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#getProcessors\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.GravityWell[]} - The active gravity wells.\r\n     */\r\n    getProcessors: function ()\r\n    {\r\n        return this.wells.getAll('active', true);\r\n    },\r\n\r\n    /**\r\n     * Updates all active emitters.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#preUpdate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    preUpdate: function (time, delta)\r\n    {\r\n        //  Scale the delta\r\n        delta *= this.timeScale;\r\n\r\n        var emitters = this.emitters.list;\r\n\r\n        for (var i = 0; i < emitters.length; i++)\r\n        {\r\n            var emitter = emitters[i];\r\n\r\n            if (emitter.active)\r\n            {\r\n                emitter.preUpdate(time, delta);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * A NOOP method so you can pass an EmitterManager to a Container.\r\n     * Calling this method will do nothing. It is intentionally empty.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setAlpha\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    setAlpha: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * A NOOP method so you can pass an EmitterManager to a Container.\r\n     * Calling this method will do nothing. It is intentionally empty.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setScrollFactor\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    setScrollFactor: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * A NOOP method so you can pass an EmitterManager to a Container.\r\n     * Calling this method will do nothing. It is intentionally empty.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setBlendMode\r\n     * @private\r\n     * @since 3.15.0\r\n     */\r\n    setBlendMode: function ()\r\n    {\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = ParticleEmitterManager;\r\n"},"sourceMaps":null,"error":null,"hash":"8388e628b4dd8066c47865a981e116ea","cacheData":{"env":{}}}