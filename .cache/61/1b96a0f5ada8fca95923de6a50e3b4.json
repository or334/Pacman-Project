{"id":"../../node_modules/phaser/src/geom/intersects/GetLineToCircle.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../point/Point","loc":{"line":8,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\intersects\\GetLineToCircle.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\point\\Point.js"},{"name":"./LineToCircle","loc":{"line":9,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\intersects\\GetLineToCircle.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\intersects\\LineToCircle.js"}],"generated":{"js":"/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\nvar LineToCircle = require('./LineToCircle');\r\n\r\n/**\r\n * Checks for intersection between the line segment and circle,\r\n * and returns the intersection points as a Point object array.\r\n *\r\n * @function Phaser.Geom.Intersects.GetLineToCircle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The line segment to check.\r\n * @param {Phaser.Geom.Circle} circle - The circle to check against the line.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\r\nvar GetLineToCircle = function (line, circle, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    if (LineToCircle(line, circle))\r\n    {\r\n        var lx1 = line.x1;\r\n        var ly1 = line.y1;\r\n\r\n        var lx2 = line.x2;\r\n        var ly2 = line.y2;\r\n\r\n        var cx = circle.x;\r\n        var cy = circle.y;\r\n        var cr = circle.radius;\r\n\r\n        var lDirX = lx2 - lx1;\r\n        var lDirY = ly2 - ly1;\r\n        var oDirX = lx1 - cx;\r\n        var oDirY = ly1 - cy;\r\n\r\n        var coefficientA = lDirX * lDirX + lDirY * lDirY;\r\n        var coefficientB = 2 * (lDirX * oDirX + lDirY * oDirY);\r\n        var coefficientC = oDirX * oDirX + oDirY * oDirY - cr * cr;\r\n\r\n        var lambda = (coefficientB * coefficientB) - (4 * coefficientA * coefficientC);\r\n\r\n        var x, y;\r\n\r\n        if (lambda === 0)\r\n        {\r\n            var root = -coefficientB / (2 * coefficientA);\r\n            x = lx1 + root * lDirX;\r\n            y = ly1 + root * lDirY;\r\n            if (root >= 0 && root <= 1)\r\n            {\r\n                out.push(new Point(x, y));\r\n            }\r\n        }\r\n        else if (lambda > 0)\r\n        {\r\n            var root1 = (-coefficientB - Math.sqrt(lambda)) / (2 * coefficientA);\r\n            x = lx1 + root1 * lDirX;\r\n            y = ly1 + root1 * lDirY;\r\n            if (root1 >= 0 && root1 <= 1)\r\n            {\r\n                out.push(new Point(x, y));\r\n            }\r\n\r\n            var root2 = (-coefficientB + Math.sqrt(lambda)) / (2 * coefficientA);\r\n            x = lx1 + root2 * lDirX;\r\n            y = ly1 + root2 * lDirY;\r\n            if (root2 >= 0 && root2 <= 1)\r\n            {\r\n                out.push(new Point(x, y));\r\n            }\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetLineToCircle;\r\n"},"sourceMaps":null,"error":null,"hash":"b9c12064391cdfe2ab61e935506bc6c7","cacheData":{"env":{}}}