{"id":"../../node_modules/phaser/src/display/color/RGBToHSV.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Converts an RGB color value to HSV (hue, saturation and value).\r\n * Conversion forumla from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes RGB values are contained in the set [0, 255] and returns h, s and v in the set [0, 1].\r\n * Based on code by Michael Jackson (https://github.com/mjijackson)\r\n *\r\n * @function Phaser.Display.Color.RGBToHSV\r\n * @since 3.0.0\r\n *\r\n * @param {integer} r - The red color value. A number between 0 and 255.\r\n * @param {integer} g - The green color value. A number between 0 and 255.\r\n * @param {integer} b - The blue color value. A number between 0 and 255.\r\n * @param {(Phaser.Types.Display.HSVColorObject|Phaser.Display.Color)} [out] - An object to store the color values in. If not given an HSV Color Object will be created.\r\n *\r\n * @return {(Phaser.Types.Display.HSVColorObject|Phaser.Display.Color)} An object with the properties `h`, `s` and `v` set.\r\n */\r\nvar RGBToHSV = function (r, g, b, out)\r\n{\r\n    if (out === undefined) { out = { h: 0, s: 0, v: 0 }; }\r\n\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n\r\n    var min = Math.min(r, g, b);\r\n    var max = Math.max(r, g, b);\r\n    var d = max - min;\r\n\r\n    // achromatic by default\r\n    var h = 0;\r\n    var s = (max === 0) ? 0 : d / max;\r\n    var v = max;\r\n\r\n    if (max !== min)\r\n    {\r\n        if (max === r)\r\n        {\r\n            h = (g - b) / d + ((g < b) ? 6 : 0);\r\n        }\r\n        else if (max === g)\r\n        {\r\n            h = (b - r) / d + 2;\r\n        }\r\n        else if (max === b)\r\n        {\r\n            h = (r - g) / d + 4;\r\n        }\r\n\r\n        h /= 6;\r\n    }\r\n\r\n    if (out.hasOwnProperty('_h'))\r\n    {\r\n        out._h = h;\r\n        out._s = s;\r\n        out._v = v;\r\n    }\r\n    else\r\n    {\r\n        out.h = h;\r\n        out.s = s;\r\n        out.v = v;\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = RGBToHSV;\r\n"},"sourceMaps":null,"error":null,"hash":"5a40a25d9066983675d893596367dd72","cacheData":{"env":{}}}