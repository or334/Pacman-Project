{"id":"../../node_modules/phaser/src/physics/arcade/Collider.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\Collider.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2019 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar Class = require('../../utils/Class');\n\n/**\n * @classdesc\n * An Arcade Physics Collider will automatically check for collision, or overlaps, between two objects\n * every step. If a collision, or overlap, occurs it will invoke the given callbacks.\n *\n * @class Collider\n * @memberof Phaser.Physics.Arcade\n * @constructor\n * @since 3.0.0\n *\n * @param {Phaser.Physics.Arcade.World} world - The Arcade physics World that will manage the collisions.\n * @param {boolean} overlapOnly - Whether to check for collisions or overlap.\n * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object1 - The first object to check for collision.\n * @param {Phaser.Types.Physics.Arcade.ArcadeColliderType} object2 - The second object to check for collision.\n * @param {ArcadePhysicsCallback} collideCallback - The callback to invoke when the two objects collide.\n * @param {ArcadePhysicsCallback} processCallback - The callback to invoke when the two objects collide. Must return a boolean.\n * @param {any} callbackContext - The scope in which to call the callbacks.\n */\nvar Collider = new Class({\n\n    initialize:\n\n    function Collider (world, overlapOnly, object1, object2, collideCallback, processCallback, callbackContext)\n    {\n        /**\n         * The world in which the bodies will collide.\n         *\n         * @name Phaser.Physics.Arcade.Collider#world\n         * @type {Phaser.Physics.Arcade.World}\n         * @since 3.0.0\n         */\n        this.world = world;\n\n        /**\n         * The name of the collider (unused by Phaser).\n         *\n         * @name Phaser.Physics.Arcade.Collider#name\n         * @type {string}\n         * @since 3.1.0\n         */\n        this.name = '';\n\n        /**\n         * Whether the collider is active.\n         *\n         * @name Phaser.Physics.Arcade.Collider#active\n         * @type {boolean}\n         * @default true\n         * @since 3.0.0\n         */\n        this.active = true;\n\n        /**\n         * Whether to check for collisions or overlaps.\n         *\n         * @name Phaser.Physics.Arcade.Collider#overlapOnly\n         * @type {boolean}\n         * @since 3.0.0\n         */\n        this.overlapOnly = overlapOnly;\n\n        /**\n         * The first object to check for collision.\n         *\n         * @name Phaser.Physics.Arcade.Collider#object1\n         * @type {Phaser.Types.Physics.Arcade.ArcadeColliderType}\n         * @since 3.0.0\n         */\n        this.object1 = object1;\n\n        /**\n         * The second object to check for collision.\n         *\n         * @name Phaser.Physics.Arcade.Collider#object2\n         * @type {Phaser.Types.Physics.Arcade.ArcadeColliderType}\n         * @since 3.0.0\n         */\n        this.object2 = object2;\n\n        /**\n         * The callback to invoke when the two objects collide.\n         *\n         * @name Phaser.Physics.Arcade.Collider#collideCallback\n         * @type {ArcadePhysicsCallback}\n         * @since 3.0.0\n         */\n        this.collideCallback = collideCallback;\n\n        /**\n         * If a processCallback exists it must return true or collision checking will be skipped.\n         *\n         * @name Phaser.Physics.Arcade.Collider#processCallback\n         * @type {ArcadePhysicsCallback}\n         * @since 3.0.0\n         */\n        this.processCallback = processCallback;\n\n        /**\n         * The context the collideCallback and processCallback will run in.\n         *\n         * @name Phaser.Physics.Arcade.Collider#callbackContext\n         * @type {object}\n         * @since 3.0.0\n         */\n        this.callbackContext = callbackContext;\n    },\n\n    /**\n     * A name for the Collider.\n     * \n     * Phaser does not use this value, it's for your own reference.\n     *\n     * @method Phaser.Physics.Arcade.Collider#setName\n     * @since 3.1.0\n     *\n     * @param {string} name - The name to assign to the Collider.\n     *\n     * @return {Phaser.Physics.Arcade.Collider} This Collider instance.\n     */\n    setName: function (name)\n    {\n        this.name = name;\n\n        return this;\n    },\n\n    /**\n     * Called by World as part of its step processing, initial operation of collision checking.\n     *\n     * @method Phaser.Physics.Arcade.Collider#update\n     * @since 3.0.0\n     */\n    update: function ()\n    {\n        this.world.collideObjects(\n            this.object1,\n            this.object2,\n            this.collideCallback,\n            this.processCallback,\n            this.callbackContext,\n            this.overlapOnly\n        );\n    },\n\n    /**\n     * Removes Collider from World and disposes of its resources.\n     *\n     * @method Phaser.Physics.Arcade.Collider#destroy\n     * @since 3.0.0\n     */\n    destroy: function ()\n    {\n        this.world.removeCollider(this);\n\n        this.active = false;\n\n        this.world = null;\n\n        this.object1 = null;\n        this.object2 = null;\n\n        this.collideCallback = null;\n        this.processCallback = null;\n        this.callbackContext = null;\n    }\n\n});\n\nmodule.exports = Collider;\n"},"sourceMaps":null,"error":null,"hash":"dadc4988634851becc283708ab922f0c","cacheData":{"env":{}}}