{"id":"../../node_modules/phaser/src/physics/matter-js/components/Transform.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../lib/body/Body","loc":{"line":7,"column":19},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\components\\Transform.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\lib\\body\\Body.js"},{"name":"../../../math/const","loc":{"line":8,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\components\\Transform.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\const.js"},{"name":"../../../math/angle/Wrap","loc":{"line":9,"column":24},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\components\\Transform.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\angle\\Wrap.js"},{"name":"../../../math/angle/WrapDegrees","loc":{"line":10,"column":31},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\matter-js\\components\\Transform.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\angle\\WrapDegrees.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Body = require('../lib/body/Body');\r\nvar MATH_CONST = require('../../../math/const');\r\nvar WrapAngle = require('../../../math/angle/Wrap');\r\nvar WrapAngleDegrees = require('../../../math/angle/WrapDegrees');\r\n\r\n//  global bitmask flag for GameObject.renderMask (used by Scale)\r\nvar _FLAG = 4; // 0100\r\n\r\n//  Transform Component\r\n\r\n/**\r\n * Provides methods used for getting and setting the position, scale and rotation of a Game Object.\r\n *\r\n * @namespace Phaser.Physics.Matter.Components.Transform\r\n * @since 3.0.0\r\n */\r\nvar Transform = {\r\n\r\n    /**\r\n     * The x position of this Game Object.\r\n     *\r\n     * @name Phaser.Physics.Matter.Components.Transform#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.body.position.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._tempVec2.set(value, this.y);\r\n\r\n            Body.setPosition(this.body, this._tempVec2);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y position of this Game Object.\r\n     *\r\n     * @name Phaser.Physics.Matter.Components.Transform#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.body.position.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._tempVec2.set(this.x, value);\r\n\r\n            Body.setPosition(this.body, this._tempVec2);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The horizontal scale of this Game Object.\r\n     *\r\n     * @name Phaser.Physics.Matter.Components.Transform#scaleX\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    scaleX: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._scaleX;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var factorX = 1 / this._scaleX;\r\n            var factorY = 1 / this._scaleY;\r\n    \r\n            this._scaleX = value;\r\n\r\n            if (this._scaleX === 0)\r\n            {\r\n                this.renderFlags &= ~_FLAG;\r\n            }\r\n            else\r\n            {\r\n                this.renderFlags |= _FLAG;\r\n            }\r\n\r\n            //  Reset Matter scale back to 1 (sigh)\r\n            Body.scale(this.body, factorX, factorY);\r\n\r\n            Body.scale(this.body, value, this._scaleY);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The vertical scale of this Game Object.\r\n     *\r\n     * @name Phaser.Physics.Matter.Components.Transform#scaleY\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    scaleY: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._scaleY;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var factorX = 1 / this._scaleX;\r\n            var factorY = 1 / this._scaleY;\r\n\r\n            this._scaleY = value;\r\n\r\n            if (this._scaleY === 0)\r\n            {\r\n                this.renderFlags &= ~_FLAG;\r\n            }\r\n            else\r\n            {\r\n                this.renderFlags |= _FLAG;\r\n            }\r\n\r\n            Body.scale(this.body, factorX, factorY);\r\n\r\n            Body.scale(this.body, this._scaleX, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Use `angle` to set or get rotation of the physics body associated to this GameObject. Unlike rotation, when using set the value can be in degrees, which will be converted to radians internally.\r\n     *\r\n     * @name Phaser.Physics.Matter.Components.Transform#angle\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    angle: {\r\n\r\n        get: function ()\r\n        {\r\n            return WrapAngleDegrees(this.body.angle * MATH_CONST.RAD_TO_DEG);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            //  value is in degrees\r\n            this.rotation = WrapAngleDegrees(value) * MATH_CONST.DEG_TO_RAD;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Use `rotation` to set or get the rotation of the physics body associated with this GameObject. The value when set must be in radians.\r\n     *\r\n     * @name Phaser.Physics.Matter.Components.Transform#rotation\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    rotation: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.body.angle;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            //  value is in radians\r\n            this._rotation = WrapAngle(value);\r\n\r\n            Body.setAngle(this.body, this._rotation);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the position of the physics body along x and y axes. Both the parameters to this function are optional and if not passed any they default to 0.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Transform#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal position of the body.\r\n     * @param {number} [y=x] - The vertical position of the body.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        this._tempVec2.set(x, y);\r\n\r\n        Body.setPosition(this.body, this._tempVec2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Transform#setRotation\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [radians=0] - [description]\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setRotation: function (radians)\r\n    {\r\n        if (radians === undefined) { radians = 0; }\r\n\r\n        this._rotation = WrapAngle(radians);\r\n\r\n        Body.setAngle(this.body, radians);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Transform#setFixedRotation\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setFixedRotation: function ()\r\n    {\r\n        Body.setInertia(this.body, Infinity);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Transform#setAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [degrees=0] - [description]\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setAngle: function (degrees)\r\n    {\r\n        if (degrees === undefined) { degrees = 0; }\r\n\r\n        this.angle = degrees;\r\n\r\n        Body.setAngle(this.body, this.rotation);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the scale of this Game Object.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Transform#setScale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=1] - The horizontal scale of this Game Object.\r\n     * @param {number} [y=x] - The vertical scale of this Game Object. If not set it will use the x value.\r\n     * @param {Phaser.Math.Vector2} [point] - The point (Vector2) from which scaling will occur.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setScale: function (x, y, point)\r\n    {\r\n        if (x === undefined) { x = 1; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        var factorX = 1 / this._scaleX;\r\n        var factorY = 1 / this._scaleY;\r\n\r\n        this._scaleX = x;\r\n        this._scaleY = y;\r\n\r\n        Body.scale(this.body, factorX, factorY, point);\r\n\r\n        Body.scale(this.body, x, y, point);\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Transform;\r\n"},"sourceMaps":null,"error":null,"hash":"f1f92425b81d5f993c4da4c6aec5be7a","cacheData":{"env":{}}}