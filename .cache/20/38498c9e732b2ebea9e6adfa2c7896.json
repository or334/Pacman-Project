{"id":"../../node_modules/phaser/src/input/InputManager.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"../utils/Class","loc":{"line":7,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./const","loc":{"line":8,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\const.js"},{"name":"eventemitter3","loc":{"line":9,"column":27},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\eventemitter3\\index.js"},{"name":"./events","loc":{"line":10,"column":21},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\events\\index.js"},{"name":"../core/events","loc":{"line":11,"column":25},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\core\\events\\index.js"},{"name":"./keyboard/KeyboardManager","loc":{"line":12,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\keyboard\\KeyboardManager.js"},{"name":"./mouse/MouseManager","loc":{"line":13,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\mouse\\MouseManager.js"},{"name":"./Pointer","loc":{"line":14,"column":22},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\Pointer.js"},{"name":"./touch/TouchManager","loc":{"line":15,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\touch\\TouchManager.js"},{"name":"../gameobjects/components/TransformMatrix","loc":{"line":16,"column":30},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\gameobjects\\components\\TransformMatrix.js"},{"name":"../math/TransformXY","loc":{"line":17,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\input\\InputManager.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\TransformXY.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar CONST = require('./const');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar GameEvents = require('../core/events');\r\nvar Keyboard = require('./keyboard/KeyboardManager');\r\nvar Mouse = require('./mouse/MouseManager');\r\nvar Pointer = require('./Pointer');\r\nvar Touch = require('./touch/TouchManager');\r\nvar TransformMatrix = require('../gameobjects/components/TransformMatrix');\r\nvar TransformXY = require('../math/TransformXY');\r\n\r\n/**\r\n * @classdesc\r\n * The Input Manager is responsible for handling the pointer related systems in a single Phaser Game instance.\r\n *\r\n * Based on the Game Config it will create handlers for mouse and touch support.\r\n *\r\n * Keyboard and Gamepad are plugins, handled directly by the InputPlugin class.\r\n *\r\n * It then manages the event queue, pointer creation and general hit test related operations.\r\n *\r\n * You rarely need to interact with the Input Manager directly, and as such, all of its properties and methods\r\n * should be considered private. Instead, you should use the Input Plugin, which is a Scene level system, responsible\r\n * for dealing with all input events for a Scene.\r\n *\r\n * @class InputManager\r\n * @memberof Phaser.Input\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - The Game instance that owns the Input Manager.\r\n * @param {object} config - The Input Configuration object, as set in the Game Config.\r\n */\r\nvar InputManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function InputManager (game, config)\r\n    {\r\n        /**\r\n         * The Game instance that owns the Input Manager.\r\n         * A Game only maintains on instance of the Input Manager at any time.\r\n         *\r\n         * @name Phaser.Input.InputManager#game\r\n         * @type {Phaser.Game}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * A reference to the global Game Scale Manager.\r\n         * Used for all bounds checks and pointer scaling.\r\n         *\r\n         * @name Phaser.Input.InputManager#scaleManager\r\n         * @type {Phaser.Scale.ScaleManager}\r\n         * @since 3.16.0\r\n         */\r\n        this.scaleManager;\r\n\r\n        /**\r\n         * The Canvas that is used for all DOM event input listeners.\r\n         *\r\n         * @name Phaser.Input.InputManager#canvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.0.0\r\n         */\r\n        this.canvas;\r\n\r\n        /**\r\n         * The Game Configuration object, as set during the game boot.\r\n         *\r\n         * @name Phaser.Input.InputManager#config\r\n         * @type {Phaser.Core.Config}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = config;\r\n\r\n        /**\r\n         * If set, the Input Manager will run its update loop every frame.\r\n         *\r\n         * @name Phaser.Input.InputManager#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * The Event Emitter instance that the Input Manager uses to emit events from.\r\n         *\r\n         * @name Phaser.Input.InputManager#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events = new EventEmitter();\r\n\r\n        /**\r\n         * A standard FIFO queue for the native DOM events waiting to be handled by the Input Manager.\r\n         *\r\n         * @name Phaser.Input.InputManager#queue\r\n         * @type {array}\r\n         * @default []\r\n         * @deprecated\r\n         * @since 3.0.0\r\n         */\r\n        this.queue = [];\r\n\r\n        /**\r\n         * DOM Callbacks container.\r\n         *\r\n         * @name Phaser.Input.InputManager#domCallbacks\r\n         * @private\r\n         * @type {object}\r\n         * @deprecated\r\n         * @since 3.10.0\r\n         */\r\n        this.domCallbacks = { up: [], down: [], move: [], upOnce: [], downOnce: [], moveOnce: [] };\r\n\r\n        /**\r\n         * Are any mouse or touch pointers currently over the game canvas?\r\n         * This is updated automatically by the canvas over and out handlers.\r\n         *\r\n         * @name Phaser.Input.InputManager#isOver\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.16.0\r\n         */\r\n        this.isOver = true;\r\n\r\n        /**\r\n         * Are there any up callbacks defined?\r\n         *\r\n         * @name Phaser.Input.InputManager#_hasUpCallback\r\n         * @private\r\n         * @type {boolean}\r\n         * @deprecated\r\n         * @since 3.10.0\r\n         */\r\n        this._hasUpCallback = false;\r\n\r\n        /**\r\n         * Are there any down callbacks defined?\r\n         *\r\n         * @name Phaser.Input.InputManager#_hasDownCallback\r\n         * @private\r\n         * @type {boolean}\r\n         * @deprecated\r\n         * @since 3.10.0\r\n         */\r\n        this._hasDownCallback = false;\r\n\r\n        /**\r\n         * Are there any move callbacks defined?\r\n         *\r\n         * @name Phaser.Input.InputManager#_hasMoveCallback\r\n         * @private\r\n         * @type {boolean}\r\n         * @deprecated\r\n         * @since 3.10.0\r\n         */\r\n        this._hasMoveCallback = false;\r\n\r\n        /**\r\n         * Is a custom cursor currently set? (desktop only)\r\n         *\r\n         * @name Phaser.Input.InputManager#_customCursor\r\n         * @private\r\n         * @type {string}\r\n         * @since 3.10.0\r\n         */\r\n        this._customCursor = '';\r\n\r\n        /**\r\n         * Custom cursor tracking value.\r\n         *\r\n         * 0 - No change.\r\n         * 1 - Set new cursor.\r\n         * 2 - Reset cursor.\r\n         *\r\n         * @name Phaser.Input.InputManager#_setCursor\r\n         * @private\r\n         * @type {integer}\r\n         * @since 3.10.0\r\n         */\r\n        this._setCursor = 0;\r\n\r\n        /**\r\n         * The default CSS cursor to be used when interacting with your game.\r\n         *\r\n         * See the `setDefaultCursor` method for more details.\r\n         *\r\n         * @name Phaser.Input.InputManager#defaultCursor\r\n         * @type {string}\r\n         * @since 3.10.0\r\n         */\r\n        this.defaultCursor = '';\r\n\r\n        /**\r\n         * A reference to the Keyboard Manager class, if enabled via the `input.keyboard` Game Config property.\r\n         *\r\n         * @name Phaser.Input.InputManager#keyboard\r\n         * @type {?Phaser.Input.Keyboard.KeyboardManager}\r\n         * @since 3.16.0\r\n         */\r\n        this.keyboard = (config.inputKeyboard) ? new Keyboard(this) : null;\r\n\r\n        /**\r\n         * A reference to the Mouse Manager class, if enabled via the `input.mouse` Game Config property.\r\n         *\r\n         * @name Phaser.Input.InputManager#mouse\r\n         * @type {?Phaser.Input.Mouse.MouseManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.mouse = (config.inputMouse) ? new Mouse(this) : null;\r\n\r\n        /**\r\n         * A reference to the Touch Manager class, if enabled via the `input.touch` Game Config property.\r\n         *\r\n         * @name Phaser.Input.InputManager#touch\r\n         * @type {Phaser.Input.Touch.TouchManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.touch = (config.inputTouch) ? new Touch(this) : null;\r\n\r\n        /**\r\n         * An array of Pointers that have been added to the game.\r\n         * The first entry is reserved for the Mouse Pointer, the rest are Touch Pointers.\r\n         *\r\n         * By default there is 1 touch pointer enabled. If you need more use the `addPointer` method to start them,\r\n         * or set the `input.activePointers` property in the Game Config.\r\n         *\r\n         * @name Phaser.Input.InputManager#pointers\r\n         * @type {Phaser.Input.Pointer[]}\r\n         * @since 3.10.0\r\n         */\r\n        this.pointers = [];\r\n\r\n        /**\r\n         * The number of touch objects activated and being processed each update.\r\n         *\r\n         * You can change this by either calling `addPointer` at run-time, or by\r\n         * setting the `input.activePointers` property in the Game Config.\r\n         *\r\n         * @name Phaser.Input.InputManager#pointersTotal\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.10.0\r\n         */\r\n        this.pointersTotal = config.inputActivePointers;\r\n\r\n        if (config.inputTouch && this.pointersTotal === 1)\r\n        {\r\n            this.pointersTotal = 2;\r\n        }\r\n\r\n        for (var i = 0; i <= this.pointersTotal; i++)\r\n        {\r\n            var pointer = new Pointer(this, i);\r\n\r\n            pointer.smoothFactor = config.inputSmoothFactor;\r\n\r\n            this.pointers.push(pointer);\r\n        }\r\n\r\n        /**\r\n         * The mouse has its own unique Pointer object, which you can reference directly if making a _desktop specific game_.\r\n         * If you are supporting both desktop and touch devices then do not use this property, instead use `activePointer`\r\n         * which will always map to the most recently interacted pointer.\r\n         *\r\n         * @name Phaser.Input.InputManager#mousePointer\r\n         * @type {?Phaser.Input.Pointer}\r\n         * @since 3.10.0\r\n         */\r\n        this.mousePointer = (config.inputMouse) ? this.pointers[0] : null;\r\n\r\n        /**\r\n         * The most recently active Pointer object.\r\n         *\r\n         * If you've only 1 Pointer in your game then this will accurately be either the first finger touched, or the mouse.\r\n         *\r\n         * If your game doesn't need to support multi-touch then you can safely use this property in all of your game\r\n         * code and it will adapt to be either the mouse or the touch, based on device.\r\n         *\r\n         * @name Phaser.Input.InputManager#activePointer\r\n         * @type {Phaser.Input.Pointer}\r\n         * @since 3.0.0\r\n         */\r\n        this.activePointer = this.pointers[0];\r\n\r\n        /**\r\n         * Reset every frame. Set to `true` if any of the Pointers are dirty this frame.\r\n         *\r\n         * @name Phaser.Input.InputManager#dirty\r\n         * @type {boolean}\r\n         * @since 3.10.0\r\n         */\r\n        this.dirty = false;\r\n\r\n        /**\r\n         * If the top-most Scene in the Scene List receives an input it will stop input from\r\n         * propagating any lower down the scene list, i.e. if you have a UI Scene at the top\r\n         * and click something on it, that click will not then be passed down to any other\r\n         * Scene below. Disable this to have input events passed through all Scenes, all the time.\r\n         *\r\n         * @name Phaser.Input.InputManager#globalTopOnly\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.globalTopOnly = true;\r\n\r\n        /**\r\n         * An internal flag that controls if the Input Manager will ignore or process native DOM events this frame.\r\n         * Set via the InputPlugin.stopPropagation method.\r\n         *\r\n         * @name Phaser.Input.InputManager#ignoreEvents\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.ignoreEvents = false;\r\n\r\n        /**\r\n         * Use the internal event queue or not?\r\n         * \r\n         * Set this via the Game Config with the `inputQueue` property.\r\n         * \r\n         * Phaser 3.15.1 and earlier used a event queue by default.\r\n         * \r\n         * This was changed in version 3.16 to use an immediate-mode system.\r\n         * The previous queue based version remains and is left under this flag for backwards\r\n         * compatibility. This flag, along with the legacy system, will be removed in a future version.\r\n         *\r\n         * @name Phaser.Input.InputManager#useQueue\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.16.0\r\n         */\r\n        this.useQueue = config.inputQueue;\r\n\r\n        /**\r\n         * The time this Input Manager was last updated.\r\n         * This value is populated by the Game Step each frame.\r\n         *\r\n         * @name Phaser.Input.InputManager#time\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.16.2\r\n         */\r\n        this.time = 0;\r\n\r\n        /**\r\n         * Internal property that tracks frame event state.\r\n         *\r\n         * @name Phaser.Input.InputManager#_updatedThisFrame\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.16.0\r\n         */\r\n        this._updatedThisFrame = false;\r\n\r\n        /**\r\n         * A re-cycled point-like object to store hit test values in.\r\n         *\r\n         * @name Phaser.Input.InputManager#_tempPoint\r\n         * @type {{x:number, y:number}}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._tempPoint = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * A re-cycled array to store hit results in.\r\n         *\r\n         * @name Phaser.Input.InputManager#_tempHitTest\r\n         * @type {array}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._tempHitTest = [];\r\n\r\n        /**\r\n         * A re-cycled matrix used in hit test calculations.\r\n         *\r\n         * @name Phaser.Input.InputManager#_tempMatrix\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @private\r\n         * @since 3.4.0\r\n         */\r\n        this._tempMatrix = new TransformMatrix();\r\n\r\n        /**\r\n         * A re-cycled matrix used in hit test calculations.\r\n         *\r\n         * @name Phaser.Input.InputManager#_tempMatrix2\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._tempMatrix2 = new TransformMatrix();\r\n\r\n        game.events.once(GameEvents.BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Boot handler is called by Phaser.Game when it first starts up.\r\n     * The renderer is available by now.\r\n     *\r\n     * @method Phaser.Input.InputManager#boot\r\n     * @protected\r\n     * @fires Phaser.Input.Events#MANAGER_BOOT\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.canvas = this.game.canvas;\r\n\r\n        this.scaleManager = this.game.scale;\r\n\r\n        this.events.emit(Events.MANAGER_BOOT);\r\n\r\n        if (this.useQueue)\r\n        {\r\n            this.game.events.on(GameEvents.PRE_STEP, this.legacyUpdate, this);\r\n        }\r\n        else\r\n        {\r\n            this.game.events.on(GameEvents.PRE_STEP, this.preStep, this);\r\n        }\r\n\r\n        this.game.events.on(GameEvents.POST_STEP, this.postUpdate, this);\r\n\r\n        this.game.events.once(GameEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * Internal canvas state change, called automatically by the Mouse Manager.\r\n     *\r\n     * @method Phaser.Input.InputManager#setCanvasOver\r\n     * @fires Phaser.Input.Events#GAME_OVER\r\n     * @private\r\n     * @since 3.16.0\r\n     *\r\n     * @param {(MouseEvent|TouchEvent)} event - The DOM Event.\r\n     */\r\n    setCanvasOver: function (event)\r\n    {\r\n        this.isOver = true;\r\n\r\n        this.events.emit(Events.GAME_OVER, event);\r\n    },\r\n\r\n    /**\r\n     * Internal canvas state change, called automatically by the Mouse Manager.\r\n     *\r\n     * @method Phaser.Input.InputManager#setCanvasOut\r\n     * @fires Phaser.Input.Events#GAME_OUT\r\n     * @private\r\n     * @since 3.16.0\r\n     *\r\n     * @param {(MouseEvent|TouchEvent)} event - The DOM Event.\r\n     */\r\n    setCanvasOut: function (event)\r\n    {\r\n        this.isOver = false;\r\n\r\n        this.events.emit(Events.GAME_OUT, event);\r\n    },\r\n\r\n    /**\r\n     * Internal update method, called automatically when a DOM input event is received.\r\n     *\r\n     * @method Phaser.Input.InputManager#update\r\n     * @private\r\n     * @fires Phaser.Input.Events#MANAGER_UPDATE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The time stamp value of this game step.\r\n     */\r\n    update: function (time)\r\n    {\r\n        if (!this._updatedThisFrame)\r\n        {\r\n            this._setCursor = 0;\r\n    \r\n            this._updatedThisFrame = true;\r\n\r\n            this.events.emit(Events.MANAGER_UPDATE);\r\n    \r\n            this.ignoreEvents = false;\r\n    \r\n            this.dirty = true;\r\n    \r\n            var pointers = this.pointers;\r\n        \r\n            for (var i = 0; i < this.pointersTotal; i++)\r\n            {\r\n                pointers[i].reset(time);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal update, called automatically by the Game Step.\r\n     *\r\n     * @method Phaser.Input.InputManager#preStep\r\n     * @private\r\n     * @since 3.16.2\r\n     *\r\n     * @param {number} time - The time stamp value of this game step.\r\n     */\r\n    preStep: function (time)\r\n    {\r\n        this.time = time;\r\n\r\n        this.update(time);\r\n    },\r\n\r\n    /**\r\n     * Internal update loop, called automatically by the Game Step when using the legacy event queue.\r\n     *\r\n     * @method Phaser.Input.InputManager#legacyUpdate\r\n     * @private\r\n     * @fires Phaser.Input.Events#MANAGER_UPDATE\r\n     * @since 3.16.0\r\n     *\r\n     * @param {number} time - The time stamp value of this game step.\r\n     */\r\n    legacyUpdate: function (time)\r\n    {\r\n        this.time = time;\r\n\r\n        var i;\r\n\r\n        this._setCursor = 0;\r\n\r\n        this.events.emit(Events.MANAGER_UPDATE);\r\n\r\n        this.ignoreEvents = false;\r\n\r\n        this.dirty = false;\r\n\r\n        var len = this.queue.length;\r\n\r\n        var pointers = this.pointers;\r\n\r\n        for (i = 0; i < this.pointersTotal; i++)\r\n        {\r\n            pointers[i].reset(time);\r\n        }\r\n\r\n        if (!this.enabled || len === 0)\r\n        {\r\n            for (i = 0; i < this.pointersTotal; i++)\r\n            {\r\n                pointers[i].updateMotion();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.dirty = true;\r\n\r\n        //  Clears the queue array, and also means we don't work on array data that could potentially\r\n        //  be modified during the processing phase\r\n        var queue = this.queue.splice(0, len);\r\n        var mouse = this.mousePointer;\r\n\r\n        //  Process the event queue, dispatching all of the events that have stored up\r\n        for (i = 0; i < len; i += 2)\r\n        {\r\n            var type = queue[i];\r\n            var event = queue[i + 1];\r\n\r\n            switch (type)\r\n            {\r\n                case CONST.MOUSE_DOWN:\r\n                    mouse.down(event, time);\r\n                    break;\r\n\r\n                case CONST.MOUSE_MOVE:\r\n                    mouse.move(event, time);\r\n                    break;\r\n\r\n                case CONST.MOUSE_UP:\r\n                    mouse.up(event, time);\r\n                    break;\r\n\r\n                case CONST.TOUCH_START:\r\n                    this.startPointer(event, time);\r\n                    break;\r\n\r\n                case CONST.TOUCH_MOVE:\r\n                    this.updatePointer(event, time);\r\n                    break;\r\n\r\n                case CONST.TOUCH_END:\r\n                    this.stopPointer(event, time);\r\n                    break;\r\n\r\n                case CONST.TOUCH_CANCEL:\r\n                    this.cancelPointer(event, time);\r\n                    break;\r\n\r\n                case CONST.POINTER_LOCK_CHANGE:\r\n                    this.events.emit(Events.POINTERLOCK_CHANGE, event, this.mouse.locked);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < this.pointersTotal; i++)\r\n        {\r\n            pointers[i].updateMotion();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal post-update, called automatically by the Game step.\r\n     *\r\n     * @method Phaser.Input.InputManager#postUpdate\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    postUpdate: function ()\r\n    {\r\n        if (this._setCursor === 1)\r\n        {\r\n            this.canvas.style.cursor = this._customCursor;\r\n        }\r\n        else if (this._setCursor === 2)\r\n        {\r\n            this.canvas.style.cursor = this.defaultCursor;\r\n        }\r\n\r\n        this.dirty = false;\r\n\r\n        this._updatedThisFrame = false;\r\n    },\r\n\r\n    /**\r\n     * Tells the Input system to set a custom cursor.\r\n     * \r\n     * This cursor will be the default cursor used when interacting with the game canvas.\r\n     *\r\n     * If an Interactive Object also sets a custom cursor, this is the cursor that is reset after its use.\r\n     *\r\n     * Any valid CSS cursor value is allowed, including paths to image files, i.e.:\r\n     *\r\n     * ```javascript\r\n     * this.input.setDefaultCursor('url(assets/cursors/sword.cur), pointer');\r\n     * ```\r\n     * \r\n     * Please read about the differences between browsers when it comes to the file formats and sizes they support:\r\n     *\r\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\r\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_User_Interface/Using_URL_values_for_the_cursor_property\r\n     *\r\n     * It's up to you to pick a suitable cursor format that works across the range of browsers you need to support.\r\n     *\r\n     * @method Phaser.Input.InputManager#setDefaultCursor\r\n     * @since 3.10.0\r\n     * \r\n     * @param {string} cursor - The CSS to be used when setting the default cursor.\r\n     */\r\n    setDefaultCursor: function (cursor)\r\n    {\r\n        this.defaultCursor = cursor;\r\n\r\n        if (this.canvas.style.cursor !== cursor)\r\n        {\r\n            this.canvas.style.cursor = cursor;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by the InputPlugin when processing over and out events.\r\n     * \r\n     * Tells the Input Manager to set a custom cursor during its postUpdate step.\r\n     *\r\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\r\n     *\r\n     * @method Phaser.Input.InputManager#setCursor\r\n     * @private\r\n     * @since 3.10.0\r\n     * \r\n     * @param {Phaser.Types.Input.InteractiveObject} interactiveObject - The Interactive Object that called this method.\r\n     */\r\n    setCursor: function (interactiveObject)\r\n    {\r\n        if (interactiveObject.cursor)\r\n        {\r\n            this._setCursor = 1;\r\n            this._customCursor = interactiveObject.cursor;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by the InputPlugin when processing over and out events.\r\n     * \r\n     * Tells the Input Manager to clear the hand cursor, if set, during its postUpdate step.\r\n     *\r\n     * @method Phaser.Input.InputManager#resetCursor\r\n     * @private\r\n     * @since 3.10.0\r\n     * \r\n     * @param {Phaser.Types.Input.InteractiveObject} interactiveObject - The Interactive Object that called this method.\r\n     */\r\n    resetCursor: function (interactiveObject)\r\n    {\r\n        if (interactiveObject.cursor)\r\n        {\r\n            this._setCursor = 2;\r\n        }\r\n    },\r\n\r\n    //  event.targetTouches = list of all touches on the TARGET ELEMENT (i.e. game dom element)\r\n    //  event.touches = list of all touches on the ENTIRE DOCUMENT, not just the target element\r\n    //  event.changedTouches = the touches that CHANGED in this event, not the total number of them\r\n\r\n    /**\r\n     * Called by the main update loop when a Touch Start Event is received.\r\n     *\r\n     * @method Phaser.Input.InputManager#startPointer\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM event to be processed.\r\n     * @param {number} time - The time stamp value of this game step.\r\n     * \r\n     * @return {Phaser.Input.Pointer[]} An array containing all the Pointer instances that were modified by this event.\r\n     */\r\n    startPointer: function (event, time)\r\n    {\r\n        var pointers = this.pointers;\r\n        var changed = [];\r\n\r\n        for (var c = 0; c < event.changedTouches.length; c++)\r\n        {\r\n            var changedTouch = event.changedTouches[c];\r\n\r\n            for (var i = 1; i < this.pointersTotal; i++)\r\n            {\r\n                var pointer = pointers[i];\r\n\r\n                if (!pointer.active)\r\n                {\r\n                    pointer.touchstart(changedTouch, time);\r\n\r\n                    this.activePointer = pointer;\r\n\r\n                    changed.push(pointer);\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return changed;\r\n    },\r\n\r\n    /**\r\n     * Called by the main update loop when a Touch Move Event is received.\r\n     *\r\n     * @method Phaser.Input.InputManager#updatePointer\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM event to be processed.\r\n     * @param {number} time - The time stamp value of this game step.\r\n     * \r\n     * @return {Phaser.Input.Pointer[]} An array containing all the Pointer instances that were modified by this event.\r\n     */\r\n    updatePointer: function (event, time)\r\n    {\r\n        var pointers = this.pointers;\r\n        var changed = [];\r\n\r\n        for (var c = 0; c < event.changedTouches.length; c++)\r\n        {\r\n            var changedTouch = event.changedTouches[c];\r\n\r\n            for (var i = 1; i < this.pointersTotal; i++)\r\n            {\r\n                var pointer = pointers[i];\r\n\r\n                if (pointer.active && pointer.identifier === changedTouch.identifier)\r\n                {\r\n                    pointer.touchmove(changedTouch, time);\r\n\r\n                    this.activePointer = pointer;\r\n\r\n                    changed.push(pointer);\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return changed;\r\n    },\r\n\r\n    //  For touch end its a list of the touch points that have been removed from the surface\r\n    //  https://developer.mozilla.org/en-US/docs/DOM/TouchList\r\n    //  event.changedTouches = the touches that CHANGED in this event, not the total number of them\r\n\r\n    /**\r\n     * Called by the main update loop when a Touch End Event is received.\r\n     *\r\n     * @method Phaser.Input.InputManager#stopPointer\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM event to be processed.\r\n     * @param {number} time - The time stamp value of this game step.\r\n     * \r\n     * @return {Phaser.Input.Pointer[]} An array containing all the Pointer instances that were modified by this event.\r\n     */\r\n    stopPointer: function (event, time)\r\n    {\r\n        var pointers = this.pointers;\r\n        var changed = [];\r\n\r\n        for (var c = 0; c < event.changedTouches.length; c++)\r\n        {\r\n            var changedTouch = event.changedTouches[c];\r\n\r\n            for (var i = 1; i < this.pointersTotal; i++)\r\n            {\r\n                var pointer = pointers[i];\r\n\r\n                if (pointer.active && pointer.identifier === changedTouch.identifier)\r\n                {\r\n                    pointer.touchend(changedTouch, time);\r\n\r\n                    changed.push(pointer);\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return changed;\r\n    },\r\n\r\n    /**\r\n     * Called by the main update loop when a Touch Cancel Event is received.\r\n     *\r\n     * @method Phaser.Input.InputManager#cancelPointer\r\n     * @private\r\n     * @since 3.15.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM event to be processed.\r\n     * @param {number} time - The time stamp value of this game step.\r\n     * \r\n     * @return {Phaser.Input.Pointer[]} An array containing all the Pointer instances that were modified by this event.\r\n     */\r\n    cancelPointer: function (event, time)\r\n    {\r\n        var pointers = this.pointers;\r\n        var changed = [];\r\n\r\n        for (var c = 0; c < event.changedTouches.length; c++)\r\n        {\r\n            var changedTouch = event.changedTouches[c];\r\n\r\n            for (var i = 1; i < this.pointersTotal; i++)\r\n            {\r\n                var pointer = pointers[i];\r\n\r\n                if (pointer.active && pointer.identifier === changedTouch.identifier)\r\n                {\r\n                    pointer.touchend(changedTouch, time);\r\n\r\n                    changed.push(pointer);\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return changed;\r\n    },\r\n\r\n    /**\r\n     * Adds new Pointer objects to the Input Manager.\r\n     *\r\n     * By default Phaser creates 2 pointer objects: `mousePointer` and `pointer1`.\r\n     *\r\n     * You can create more either by calling this method, or by setting the `input.activePointers` property\r\n     * in the Game Config, up to a maximum of 10 pointers.\r\n     *\r\n     * The first 10 pointers are available via the `InputPlugin.pointerX` properties, once they have been added\r\n     * via this method.\r\n     *\r\n     * @method Phaser.Input.InputManager#addPointer\r\n     * @since 3.10.0\r\n     *\r\n     * @param {integer} [quantity=1] The number of new Pointers to create. A maximum of 10 is allowed in total.\r\n     *\r\n     * @return {Phaser.Input.Pointer[]} An array containing all of the new Pointer objects that were created.\r\n     */\r\n    addPointer: function (quantity)\r\n    {\r\n        if (quantity === undefined) { quantity = 1; }\r\n\r\n        var output = [];\r\n\r\n        if (this.pointersTotal + quantity > 10)\r\n        {\r\n            quantity = 10 - this.pointersTotal;\r\n        }\r\n\r\n        for (var i = 0; i < quantity; i++)\r\n        {\r\n            var id = this.pointers.length;\r\n\r\n            var pointer = new Pointer(this, id);\r\n\r\n            pointer.smoothFactor = this.config.inputSmoothFactor;\r\n\r\n            this.pointers.push(pointer);\r\n\r\n            this.pointersTotal++;\r\n\r\n            output.push(pointer);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Process any pending DOM callbacks.\r\n     *\r\n     * @method Phaser.Input.InputManager#processDomCallbacks\r\n     * @private\r\n     * @deprecated\r\n     * @since 3.10.0\r\n     *\r\n     * @param {array} once - The isOnce callbacks to invoke.\r\n     * @param {array} every - The every frame callbacks to invoke.\r\n     * @param {any} event - The native DOM event that is passed to the callbacks.\r\n     *\r\n     * @return {boolean} `true` if there are callbacks still in the list, otherwise `false`.\r\n     */\r\n    processDomCallbacks: function (once, every, event)\r\n    {\r\n        var i = 0;\r\n\r\n        for (i = 0; i < once.length; i++)\r\n        {\r\n            once[i](event);\r\n        }\r\n\r\n        for (i = 0; i < every.length; i++)\r\n        {\r\n            every[i](event);\r\n        }\r\n\r\n        return (every.length > 0);\r\n    },\r\n\r\n    /**\r\n     * Internal method that gets a list of all the active Input Plugins in the game\r\n     * and updates each of them in turn, in reverse order (top to bottom), to allow\r\n     * for DOM top-level event handling simulation.\r\n     *\r\n     * @method Phaser.Input.InputManager#updateInputPlugins\r\n     * @since 3.16.0\r\n     *\r\n     * @param {number} time - The time value from the most recent Game step. Typically a high-resolution timer value, or Date.now().\r\n     * @param {number} delta - The delta value since the last frame. This is smoothed to avoid delta spikes by the TimeStep class.\r\n     */\r\n    updateInputPlugins: function (time, delta)\r\n    {\r\n        var scenes = this.game.scene.getScenes(true, true);\r\n\r\n        for (var i = 0; i < scenes.length; i++)\r\n        {\r\n            var scene = scenes[i];\r\n\r\n            if (scene.sys.input)\r\n            {\r\n                scene.sys.input.update(time, delta);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Queues a touch start event, as passed in by the TouchManager.\r\n     * Also dispatches any DOM callbacks for this event.\r\n     *\r\n     * @method Phaser.Input.InputManager#queueTouchStart\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM Touch event.\r\n     */\r\n    queueTouchStart: function (event)\r\n    {\r\n        if (this.useQueue)\r\n        {\r\n            this.queue.push(CONST.TOUCH_START, event);\r\n\r\n            if (this._hasDownCallback)\r\n            {\r\n                var callbacks = this.domCallbacks;\r\n    \r\n                this._hasDownCallback = this.processDomCallbacks(callbacks.downOnce, callbacks.down, event);\r\n    \r\n                callbacks.downOnce = [];\r\n            }\r\n        }\r\n        else if (this.enabled)\r\n        {\r\n            this.update(event.timeStamp);\r\n\r\n            var changed = this.startPointer(event, event.timeStamp);\r\n\r\n            changed.forEach(function (pointer)\r\n            {\r\n                pointer.updateMotion();\r\n            });\r\n\r\n            this.updateInputPlugins(event.timeStamp, this.game.loop.delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Queues a touch move event, as passed in by the TouchManager.\r\n     * Also dispatches any DOM callbacks for this event.\r\n     *\r\n     * @method Phaser.Input.InputManager#queueTouchMove\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM Touch event.\r\n     */\r\n    queueTouchMove: function (event)\r\n    {\r\n        if (this.useQueue)\r\n        {\r\n            this.queue.push(CONST.TOUCH_MOVE, event);\r\n\r\n            if (this._hasMoveCallback)\r\n            {\r\n                var callbacks = this.domCallbacks;\r\n    \r\n                this._hasMoveCallback = this.processDomCallbacks(callbacks.moveOnce, callbacks.move, event);\r\n    \r\n                callbacks.moveOnce = [];\r\n            }\r\n        }\r\n        else if (this.enabled)\r\n        {\r\n            this.update(event.timeStamp);\r\n\r\n            var changed = this.updatePointer(event, event.timeStamp);\r\n\r\n            changed.forEach(function (pointer)\r\n            {\r\n                pointer.updateMotion();\r\n            });\r\n\r\n            this.updateInputPlugins(event.timeStamp, this.game.loop.delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Queues a touch end event, as passed in by the TouchManager.\r\n     * Also dispatches any DOM callbacks for this event.\r\n     *\r\n     * @method Phaser.Input.InputManager#queueTouchEnd\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM Touch event.\r\n     */\r\n    queueTouchEnd: function (event)\r\n    {\r\n        if (this.useQueue)\r\n        {\r\n            this.queue.push(CONST.TOUCH_END, event);\r\n\r\n            if (this._hasUpCallback)\r\n            {\r\n                var callbacks = this.domCallbacks;\r\n    \r\n                this._hasUpCallback = this.processDomCallbacks(callbacks.upOnce, callbacks.up, event);\r\n    \r\n                callbacks.upOnce = [];\r\n            }\r\n        }\r\n        else if (this.enabled)\r\n        {\r\n            this.update(event.timeStamp);\r\n\r\n            var changed = this.stopPointer(event, event.timeStamp);\r\n\r\n            changed.forEach(function (pointer)\r\n            {\r\n                pointer.updateMotion();\r\n            });\r\n\r\n            this.updateInputPlugins(event.timeStamp, this.game.loop.delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Queues a touch cancel event, as passed in by the TouchManager.\r\n     * Also dispatches any DOM callbacks for this event.\r\n     *\r\n     * @method Phaser.Input.InputManager#queueTouchCancel\r\n     * @private\r\n     * @since 3.15.0\r\n     *\r\n     * @param {TouchEvent} event - The native DOM Touch event.\r\n     */\r\n    queueTouchCancel: function (event)\r\n    {\r\n        if (this.useQueue)\r\n        {\r\n            this.queue.push(CONST.TOUCH_CANCEL, event);\r\n        }\r\n        else if (this.enabled)\r\n        {\r\n            this.update(event.timeStamp);\r\n\r\n            var changed = this.cancelPointer(event, event.timeStamp);\r\n\r\n            changed.forEach(function (pointer)\r\n            {\r\n                pointer.updateMotion();\r\n            });\r\n\r\n            this.updateInputPlugins(event.timeStamp, this.game.loop.delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Queues a mouse down event, as passed in by the MouseManager.\r\n     * Also dispatches any DOM callbacks for this event.\r\n     *\r\n     * @method Phaser.Input.InputManager#queueMouseDown\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {MouseEvent} event - The native DOM Mouse event.\r\n     */\r\n    queueMouseDown: function (event)\r\n    {\r\n        if (this.useQueue)\r\n        {\r\n            this.queue.push(CONST.MOUSE_DOWN, event);\r\n\r\n            if (this._hasDownCallback)\r\n            {\r\n                var callbacks = this.domCallbacks;\r\n\r\n                this._hasDownCallback = this.processDomCallbacks(callbacks.downOnce, callbacks.down, event);\r\n\r\n                callbacks.downOnce = [];\r\n            }\r\n        }\r\n        else if (this.enabled)\r\n        {\r\n            this.update(event.timeStamp);\r\n\r\n            this.mousePointer.down(event, event.timeStamp);\r\n\r\n            this.mousePointer.updateMotion();\r\n\r\n            this.updateInputPlugins(event.timeStamp, this.game.loop.delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Queues a mouse move event, as passed in by the MouseManager.\r\n     * Also dispatches any DOM callbacks for this event.\r\n     *\r\n     * @method Phaser.Input.InputManager#queueMouseMove\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {MouseEvent} event - The native DOM Mouse event.\r\n     */\r\n    queueMouseMove: function (event)\r\n    {\r\n        if (this.useQueue)\r\n        {\r\n            this.queue.push(CONST.MOUSE_MOVE, event);\r\n\r\n            if (this._hasMoveCallback)\r\n            {\r\n                var callbacks = this.domCallbacks;\r\n    \r\n                this._hasMoveCallback = this.processDomCallbacks(callbacks.moveOnce, callbacks.move, event);\r\n    \r\n                callbacks.moveOnce = [];\r\n            }\r\n        }\r\n        else if (this.enabled)\r\n        {\r\n            this.update(event.timeStamp);\r\n\r\n            this.mousePointer.move(event, event.timeStamp);\r\n\r\n            this.mousePointer.updateMotion();\r\n\r\n            this.updateInputPlugins(event.timeStamp, this.game.loop.delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Queues a mouse up event, as passed in by the MouseManager.\r\n     * Also dispatches any DOM callbacks for this event.\r\n     *\r\n     * @method Phaser.Input.InputManager#queueMouseUp\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {MouseEvent} event - The native DOM Mouse event.\r\n     */\r\n    queueMouseUp: function (event)\r\n    {\r\n        if (this.useQueue)\r\n        {\r\n            this.queue.push(CONST.MOUSE_UP, event);\r\n\r\n            if (this._hasUpCallback)\r\n            {\r\n                var callbacks = this.domCallbacks;\r\n    \r\n                this._hasUpCallback = this.processDomCallbacks(callbacks.upOnce, callbacks.up, event);\r\n    \r\n                callbacks.upOnce = [];\r\n            }\r\n        }\r\n        else if (this.enabled)\r\n        {\r\n            this.update(event.timeStamp);\r\n\r\n            this.mousePointer.up(event, event.timeStamp);\r\n\r\n            this.mousePointer.updateMotion();\r\n\r\n            this.updateInputPlugins(event.timeStamp, this.game.loop.delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * **Note:** As of Phaser 3.16 this method is no longer required _unless_ you have set `input.queue = true`\r\n     * in your game config, to force it to use the legacy event queue system. This method is deprecated and\r\n     * will be removed in a future version.\r\n     * \r\n     * Adds a callback to be invoked whenever the native DOM `mouseup` or `touchend` events are received.\r\n     * By setting the `isOnce` argument you can control if the callback is called once,\r\n     * or every time the DOM event occurs.\r\n     *\r\n     * Callbacks passed to this method are invoked _immediately_ when the DOM event happens,\r\n     * within the scope of the DOM event handler. Therefore, they are considered as 'native'\r\n     * from the perspective of the browser. This means they can be used for tasks such as\r\n     * opening new browser windows, or anything which explicitly requires user input to activate.\r\n     * However, as a result of this, they come with their own risks, and as such should not be used\r\n     * for general game input, but instead be reserved for special circumstances.\r\n     *\r\n     * If all you're trying to do is execute a callback when a pointer is released, then\r\n     * please use the internal Input event system instead.\r\n     *\r\n     * Please understand that these callbacks are invoked when the browser feels like doing so,\r\n     * which may be entirely out of the normal flow of the Phaser Game Loop. Therefore, you should absolutely keep\r\n     * Phaser related operations to a minimum in these callbacks. For example, don't destroy Game Objects,\r\n     * change Scenes or manipulate internal systems, otherwise you run a very real risk of creating\r\n     * heisenbugs (https://en.wikipedia.org/wiki/Heisenbug) that prove a challenge to reproduce, never mind\r\n     * solve.\r\n     *\r\n     * @method Phaser.Input.InputManager#addUpCallback\r\n     * @deprecated\r\n     * @since 3.10.0\r\n     *\r\n     * @param {function} callback - The callback to be invoked on this dom event.\r\n     * @param {boolean} [isOnce=true] - `true` if the callback will only be invoked once, `false` to call every time this event happens.\r\n     *\r\n     * @return {this} The Input Manager.\r\n     */\r\n    addUpCallback: function (callback, isOnce)\r\n    {\r\n        if (isOnce === undefined) { isOnce = true; }\r\n\r\n        if (isOnce)\r\n        {\r\n            this.domCallbacks.upOnce.push(callback);\r\n        }\r\n        else\r\n        {\r\n            this.domCallbacks.up.push(callback);\r\n        }\r\n\r\n        this._hasUpCallback = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * **Note:** As of Phaser 3.16 this method is no longer required _unless_ you have set `input.queue = true`\r\n     * in your game config, to force it to use the legacy event queue system. This method is deprecated and\r\n     * will be removed in a future version.\r\n     * \r\n     * Adds a callback to be invoked whenever the native DOM `mousedown` or `touchstart` events are received.\r\n     * By setting the `isOnce` argument you can control if the callback is called once,\r\n     * or every time the DOM event occurs.\r\n     *\r\n     * Callbacks passed to this method are invoked _immediately_ when the DOM event happens,\r\n     * within the scope of the DOM event handler. Therefore, they are considered as 'native'\r\n     * from the perspective of the browser. This means they can be used for tasks such as\r\n     * opening new browser windows, or anything which explicitly requires user input to activate.\r\n     * However, as a result of this, they come with their own risks, and as such should not be used\r\n     * for general game input, but instead be reserved for special circumstances.\r\n     *\r\n     * If all you're trying to do is execute a callback when a pointer is down, then\r\n     * please use the internal Input event system instead.\r\n     *\r\n     * Please understand that these callbacks are invoked when the browser feels like doing so,\r\n     * which may be entirely out of the normal flow of the Phaser Game Loop. Therefore, you should absolutely keep\r\n     * Phaser related operations to a minimum in these callbacks. For example, don't destroy Game Objects,\r\n     * change Scenes or manipulate internal systems, otherwise you run a very real risk of creating\r\n     * heisenbugs (https://en.wikipedia.org/wiki/Heisenbug) that prove a challenge to reproduce, never mind\r\n     * solve.\r\n     *\r\n     * @method Phaser.Input.InputManager#addDownCallback\r\n     * @deprecated\r\n     * @since 3.10.0\r\n     *\r\n     * @param {function} callback - The callback to be invoked on this dom event.\r\n     * @param {boolean} [isOnce=true] - `true` if the callback will only be invoked once, `false` to call every time this event happens.\r\n     *\r\n     * @return {this} The Input Manager.\r\n     */\r\n    addDownCallback: function (callback, isOnce)\r\n    {\r\n        if (isOnce === undefined) { isOnce = true; }\r\n\r\n        if (isOnce)\r\n        {\r\n            this.domCallbacks.downOnce.push(callback);\r\n        }\r\n        else\r\n        {\r\n            this.domCallbacks.down.push(callback);\r\n        }\r\n\r\n        this._hasDownCallback = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * **Note:** As of Phaser 3.16 this method is no longer required _unless_ you have set `input.queue = true`\r\n     * in your game config, to force it to use the legacy event queue system. This method is deprecated and\r\n     * will be removed in a future version.\r\n     * \r\n     * Adds a callback to be invoked whenever the native DOM `mousemove` or `touchmove` events are received.\r\n     * By setting the `isOnce` argument you can control if the callback is called once,\r\n     * or every time the DOM event occurs.\r\n     *\r\n     * Callbacks passed to this method are invoked _immediately_ when the DOM event happens,\r\n     * within the scope of the DOM event handler. Therefore, they are considered as 'native'\r\n     * from the perspective of the browser. This means they can be used for tasks such as\r\n     * opening new browser windows, or anything which explicitly requires user input to activate.\r\n     * However, as a result of this, they come with their own risks, and as such should not be used\r\n     * for general game input, but instead be reserved for special circumstances.\r\n     *\r\n     * If all you're trying to do is execute a callback when a pointer is moved, then\r\n     * please use the internal Input event system instead.\r\n     *\r\n     * Please understand that these callbacks are invoked when the browser feels like doing so,\r\n     * which may be entirely out of the normal flow of the Phaser Game Loop. Therefore, you should absolutely keep\r\n     * Phaser related operations to a minimum in these callbacks. For example, don't destroy Game Objects,\r\n     * change Scenes or manipulate internal systems, otherwise you run a very real risk of creating\r\n     * heisenbugs (https://en.wikipedia.org/wiki/Heisenbug) that prove a challenge to reproduce, never mind\r\n     * solve.\r\n     *\r\n     * @method Phaser.Input.InputManager#addMoveCallback\r\n     * @deprecated\r\n     * @since 3.10.0\r\n     *\r\n     * @param {function} callback - The callback to be invoked on this dom event.\r\n     * @param {boolean} [isOnce=false] - `true` if the callback will only be invoked once, `false` to call every time this event happens.\r\n     *\r\n     * @return {this} The Input Manager.\r\n     */\r\n    addMoveCallback: function (callback, isOnce)\r\n    {\r\n        if (isOnce === undefined) { isOnce = false; }\r\n\r\n        if (isOnce)\r\n        {\r\n            this.domCallbacks.moveOnce.push(callback);\r\n        }\r\n        else\r\n        {\r\n            this.domCallbacks.move.push(callback);\r\n        }\r\n\r\n        this._hasMoveCallback = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given Game Object should be considered as a candidate for input or not.\r\n     *\r\n     * Checks if the Game Object has an input component that is enabled, that it will render,\r\n     * and finally, if it has a parent, that the parent parent, or any ancestor, is visible or not.\r\n     *\r\n     * @method Phaser.Input.InputManager#inputCandidate\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to test.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera which is being tested against.\r\n     *\r\n     * @return {boolean} `true` if the Game Object should be considered for input, otherwise `false`.\r\n     */\r\n    inputCandidate: function (gameObject, camera)\r\n    {\r\n        var input = gameObject.input;\r\n\r\n        if (!input || !input.enabled || !gameObject.willRender(camera))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var visible = true;\r\n        var parent = gameObject.parentContainer;\r\n\r\n        if (parent)\r\n        {\r\n            do\r\n            {\r\n                if (!parent.willRender(camera))\r\n                {\r\n                    visible = false;\r\n                    break;\r\n                }\r\n\r\n                parent = parent.parentContainer;\r\n\r\n            } while (parent);\r\n        }\r\n\r\n        return visible;\r\n    },\r\n\r\n    /**\r\n     * Performs a hit test using the given Pointer and camera, against an array of interactive Game Objects.\r\n     *\r\n     * The Game Objects are culled against the camera, and then the coordinates are translated into the local camera space\r\n     * and used to determine if they fall within the remaining Game Objects hit areas or not.\r\n     *\r\n     * If nothing is matched an empty array is returned.\r\n     *\r\n     * This method is called automatically by InputPlugin.hitTestPointer and doesn't usually need to be invoked directly.\r\n     *\r\n     * @method Phaser.Input.InputManager#hitTest\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Input.Pointer} pointer - The Pointer to test against.\r\n     * @param {array} gameObjects - An array of interactive Game Objects to check.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera which is being tested against.\r\n     * @param {array} [output] - An array to store the results in. If not given, a new empty array is created.\r\n     *\r\n     * @return {array} An array of the Game Objects that were hit during this hit test.\r\n     */\r\n    hitTest: function (pointer, gameObjects, camera, output)\r\n    {\r\n        if (output === undefined) { output = this._tempHitTest; }\r\n\r\n        var tempPoint = this._tempPoint;\r\n\r\n        var csx = camera.scrollX;\r\n        var csy = camera.scrollY;\r\n\r\n        output.length = 0;\r\n\r\n        var x = pointer.x;\r\n        var y = pointer.y;\r\n\r\n        if (camera.resolution !== 1)\r\n        {\r\n            x += camera._x;\r\n            y += camera._y;\r\n        }\r\n\r\n        //  Stores the world point inside of tempPoint\r\n        camera.getWorldPoint(x, y, tempPoint);\r\n\r\n        pointer.worldX = tempPoint.x;\r\n        pointer.worldY = tempPoint.y;\r\n\r\n        var point = { x: 0, y: 0 };\r\n\r\n        var matrix = this._tempMatrix;\r\n        var parentMatrix = this._tempMatrix2;\r\n\r\n        for (var i = 0; i < gameObjects.length; i++)\r\n        {\r\n            var gameObject = gameObjects[i];\r\n\r\n            //  Checks if the Game Object can receive input (isn't being ignored by the camera, invisible, etc)\r\n            //  and also checks all of its parents, if any\r\n            if (!this.inputCandidate(gameObject, camera))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var px = tempPoint.x + (csx * gameObject.scrollFactorX) - csx;\r\n            var py = tempPoint.y + (csy * gameObject.scrollFactorY) - csy;\r\n\r\n            if (gameObject.parentContainer)\r\n            {\r\n                gameObject.getWorldTransformMatrix(matrix, parentMatrix);\r\n\r\n                matrix.applyInverse(px, py, point);\r\n            }\r\n            else\r\n            {\r\n                TransformXY(px, py, gameObject.x, gameObject.y, gameObject.rotation, gameObject.scaleX, gameObject.scaleY, point);\r\n            }\r\n    \r\n            if (this.pointWithinHitArea(gameObject, point.x, point.y))\r\n            {\r\n                output.push(gameObject);\r\n            }\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given x and y coordinate are within the hit area of the Game Object.\r\n     *\r\n     * This method assumes that the coordinate values have already been translated into the space of the Game Object.\r\n     *\r\n     * If the coordinates are within the hit area they are set into the Game Objects Input `localX` and `localY` properties.\r\n     *\r\n     * @method Phaser.Input.InputManager#pointWithinHitArea\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The interactive Game Object to check against.\r\n     * @param {number} x - The translated x coordinate for the hit test.\r\n     * @param {number} y - The translated y coordinate for the hit test.\r\n     *\r\n     * @return {boolean} `true` if the coordinates were inside the Game Objects hit area, otherwise `false`.\r\n     */\r\n    pointWithinHitArea: function (gameObject, x, y)\r\n    {\r\n        //  Normalize the origin\r\n        x += gameObject.displayOriginX;\r\n        y += gameObject.displayOriginY;\r\n\r\n        var input = gameObject.input;\r\n\r\n        if (input && input.hitAreaCallback(input.hitArea, x, y, gameObject))\r\n        {\r\n            input.localX = x;\r\n            input.localY = y;\r\n\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Checks if the given x and y coordinate are within the hit area of the Interactive Object.\r\n     *\r\n     * This method assumes that the coordinate values have already been translated into the space of the Interactive Object.\r\n     *\r\n     * If the coordinates are within the hit area they are set into the Interactive Objects Input `localX` and `localY` properties.\r\n     *\r\n     * @method Phaser.Input.InputManager#pointWithinInteractiveObject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Input.InteractiveObject} object - The Interactive Object to check against.\r\n     * @param {number} x - The translated x coordinate for the hit test.\r\n     * @param {number} y - The translated y coordinate for the hit test.\r\n     *\r\n     * @return {boolean} `true` if the coordinates were inside the Game Objects hit area, otherwise `false`.\r\n     */\r\n    pointWithinInteractiveObject: function (object, x, y)\r\n    {\r\n        if (!object.hitArea)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //  Normalize the origin\r\n        x += object.gameObject.displayOriginX;\r\n        y += object.gameObject.displayOriginY;\r\n\r\n        object.localX = x;\r\n        object.localY = y;\r\n\r\n        return object.hitAreaCallback(object.hitArea, x, y, object);\r\n    },\r\n\r\n    /**\r\n     * Transforms the pageX and pageY values of a Pointer into the scaled coordinate space of the Input Manager.\r\n     *\r\n     * @method Phaser.Input.InputManager#transformPointer\r\n     * @since 3.10.0\r\n     *\r\n     * @param {Phaser.Input.Pointer} pointer - The Pointer to transform the values for.\r\n     * @param {number} pageX - The Page X value.\r\n     * @param {number} pageY - The Page Y value.\r\n     * @param {boolean} wasMove - Are we transforming the Pointer from a move event, or an up / down event?\r\n     */\r\n    transformPointer: function (pointer, pageX, pageY, wasMove)\r\n    {\r\n        var p0 = pointer.position;\r\n        var p1 = pointer.prevPosition;\r\n\r\n        //  Store previous position\r\n        p1.x = p0.x;\r\n        p1.y = p0.y;\r\n\r\n        //  Translate coordinates\r\n        var x = this.scaleManager.transformX(pageX);\r\n        var y = this.scaleManager.transformY(pageY);\r\n\r\n        var a = pointer.smoothFactor;\r\n\r\n        if (!wasMove || a === 0)\r\n        {\r\n            //  Set immediately\r\n            p0.x = x;\r\n            p0.y = y;\r\n        }\r\n        else\r\n        {\r\n            //  Apply smoothing\r\n            p0.x = x * a + p1.x * (1 - a);\r\n            p0.y = y * a + p1.y * (1 - a);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys the Input Manager and all of its systems.\r\n     *\r\n     * There is no way to recover from doing this.\r\n     *\r\n     * @method Phaser.Input.InputManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.events.removeAllListeners();\r\n\r\n        if (this.keyboard)\r\n        {\r\n            this.keyboard.destroy();\r\n        }\r\n\r\n        if (this.mouse)\r\n        {\r\n            this.mouse.destroy();\r\n        }\r\n\r\n        if (this.touch)\r\n        {\r\n            this.touch.destroy();\r\n        }\r\n\r\n        for (var i = 0; i < this.pointers.length; i++)\r\n        {\r\n            this.pointers[i].destroy();\r\n        }\r\n\r\n        this.domCallbacks = {};\r\n        this.pointers = [];\r\n        this.queue = [];\r\n        this._tempHitTest = [];\r\n        this._tempMatrix.destroy();\r\n        this.canvas = null;\r\n        this.game = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = InputManager;\r\n"},"sourceMaps":null,"error":null,"hash":"b7cae6b3dd5dfebbd771b0066570c8a9","cacheData":{"env":{}}}