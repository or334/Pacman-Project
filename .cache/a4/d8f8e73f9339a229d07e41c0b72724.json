{"id":"../../node_modules/phaser/src/physics/arcade/components/Drag.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2019 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Provides methods used for setting the drag properties of an Arcade Physics Body.\n *\n * @namespace Phaser.Physics.Arcade.Components.Drag\n * @since 3.0.0\n */\nvar Drag = {\n\n    /**\n     * Sets the body's horizontal and vertical drag. If the vertical drag value is not provided, the vertical drag is set to the same value as the horizontal drag.\n     *\n     * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\n     * It is the absolute loss of velocity due to movement, in pixels per second squared.\n     * The x and y components are applied separately.\n     *\n     * When `useDamping` is true, this is 1 minus the damping factor.\n     * A value of 1 means the Body loses no velocity.\n     * A value of 0.95 means the Body loses 5% of its velocity per step.\n     * A value of 0.5 means the Body loses 50% of its velocity per step.\n     *\n     * Drag is applied only when `acceleration` is zero.\n     *\n     * @method Phaser.Physics.Arcade.Components.Drag#setDrag\n     * @since 3.0.0\n     *\n     * @param {number} x - The amount of horizontal drag to apply.\n     * @param {number} [y=x] - The amount of vertical drag to apply.\n     *\n     * @return {this} This Game Object.\n     */\n    setDrag: function (x, y)\n    {\n        this.body.drag.set(x, y);\n\n        return this;\n    },\n\n    /**\n     * Sets the body's horizontal drag.\n     *\n     * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\n     * It is the absolute loss of velocity due to movement, in pixels per second squared.\n     * The x and y components are applied separately.\n     *\n     * When `useDamping` is true, this is 1 minus the damping factor.\n     * A value of 1 means the Body loses no velocity.\n     * A value of 0.95 means the Body loses 5% of its velocity per step.\n     * A value of 0.5 means the Body loses 50% of its velocity per step.\n     *\n     * Drag is applied only when `acceleration` is zero.\n     *\n     * @method Phaser.Physics.Arcade.Components.Drag#setDragX\n     * @since 3.0.0\n     *\n     * @param {number} value - The amount of horizontal drag to apply.\n     *\n     * @return {this} This Game Object.\n     */\n    setDragX: function (value)\n    {\n        this.body.drag.x = value;\n\n        return this;\n    },\n\n    /**\n     * Sets the body's vertical drag.\n     *\n     * Drag can be considered as a form of deceleration that will return the velocity of a body back to zero over time.\n     * It is the absolute loss of velocity due to movement, in pixels per second squared.\n     * The x and y components are applied separately.\n     *\n     * When `useDamping` is true, this is 1 minus the damping factor.\n     * A value of 1 means the Body loses no velocity.\n     * A value of 0.95 means the Body loses 5% of its velocity per step.\n     * A value of 0.5 means the Body loses 50% of its velocity per step.\n     *\n     * Drag is applied only when `acceleration` is zero.\n     *\n     * @method Phaser.Physics.Arcade.Components.Drag#setDragY\n     * @since 3.0.0\n     *\n     * @param {number} value - The amount of vertical drag to apply.\n     *\n     * @return {this} This Game Object.\n     */\n    setDragY: function (value)\n    {\n        this.body.drag.y = value;\n\n        return this;\n    },\n\n    /**\n     * If this Body is using `drag` for deceleration this function controls how the drag is applied.\n     * If set to `true` drag will use a damping effect rather than a linear approach. If you are\n     * creating a game where the Body moves freely at any angle (i.e. like the way the ship moves in\n     * the game Asteroids) then you will get a far smoother and more visually correct deceleration\n     * by using damping, avoiding the axis-drift that is prone with linear deceleration.\n     *\n     * If you enable this property then you should use far smaller `drag` values than with linear, as\n     * they are used as a multiplier on the velocity. Values such as 0.95 will give a nice slow\n     * deceleration, where-as smaller values, such as 0.5 will stop an object almost immediately.\n     *\n     * @method Phaser.Physics.Arcade.Components.Drag#setDamping\n     * @since 3.10.0\n     *\n     * @param {boolean} value - `true` to use damping for deceleration, or `false` to use linear deceleration.\n     *\n     * @return {this} This Game Object.\n     */\n    setDamping: function (value)\n    {\n        this.body.useDamping = value;\n\n        return this;\n    }\n\n};\n\nmodule.exports = Drag;\n"},"sourceMaps":null,"error":null,"hash":"22259836a20f05fabeba2095747e4161","cacheData":{"env":{}}}