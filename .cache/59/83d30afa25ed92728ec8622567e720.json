{"id":"../../node_modules/phaser/src/physics/arcade/StaticBody.js","dependencies":[{"name":"C:\\Users\\דור\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561396619369},{"name":"../../geom/circle/Contains","loc":{"line":7,"column":29},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\StaticBody.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\circle\\Contains.js"},{"name":"../../utils/Class","loc":{"line":8,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\StaticBody.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\utils\\Class.js"},{"name":"./const","loc":{"line":9,"column":20},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\StaticBody.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\const.js"},{"name":"../../geom/rectangle/Contains","loc":{"line":10,"column":32},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\StaticBody.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\geom\\rectangle\\Contains.js"},{"name":"../../math/Vector2","loc":{"line":11,"column":22},"parent":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\StaticBody.js","resolved":"C:\\Users\\דור\\Desktop\\pmm\\node_modules\\phaser\\src\\math\\Vector2.js"}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2019 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar CircleContains = require('../../geom/circle/Contains');\nvar Class = require('../../utils/Class');\nvar CONST = require('./const');\nvar RectangleContains = require('../../geom/rectangle/Contains');\nvar Vector2 = require('../../math/Vector2');\n\n/**\n * @classdesc\n * A Static Arcade Physics Body.\n *\n * A Static Body never moves, and isn't automatically synchronized with its parent Game Object.\n * That means if you make any change to the parent's origin, position, or scale after creating or adding the body, you'll need to update the Body manually.\n *\n * A Static Body can collide with other Bodies, but is never moved by collisions.\n *\n * Its dynamic counterpart is {@link Phaser.Physics.Arcade.Body}.\n *\n * @class StaticBody\n * @memberof Phaser.Physics.Arcade\n * @constructor\n * @since 3.0.0\n *\n * @param {Phaser.Physics.Arcade.World} world - The Arcade Physics simulation this Static Body belongs to.\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object this Static Body belongs to.\n */\nvar StaticBody = new Class({\n\n    initialize:\n\n    function StaticBody (world, gameObject)\n    {\n        var width = (gameObject.width) ? gameObject.width : 64;\n        var height = (gameObject.height) ? gameObject.height : 64;\n\n        /**\n         * The Arcade Physics simulation this Static Body belongs to.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#world\n         * @type {Phaser.Physics.Arcade.World}\n         * @since 3.0.0\n         */\n        this.world = world;\n\n        /**\n         * The Game Object this Static Body belongs to.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#gameObject\n         * @type {Phaser.GameObjects.GameObject}\n         * @since 3.0.0\n         */\n        this.gameObject = gameObject;\n\n        /**\n         * Whether the Static Body's boundary is drawn to the debug display.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#debugShowBody\n         * @type {boolean}\n         * @since 3.0.0\n         */\n        this.debugShowBody = world.defaults.debugShowStaticBody;\n\n        /**\n         * The color of this Static Body on the debug display.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#debugBodyColor\n         * @type {integer}\n         * @since 3.0.0\n         */\n        this.debugBodyColor = world.defaults.staticBodyDebugColor;\n\n        /**\n         * Whether this Static Body is updated by the physics simulation.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#enable\n         * @type {boolean}\n         * @default true\n         * @since 3.0.0\n         */\n        this.enable = true;\n\n        /**\n         * Whether this Static Body's boundary is circular (`true`) or rectangular (`false`).\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#isCircle\n         * @type {boolean}\n         * @default false\n         * @since 3.0.0\n         */\n        this.isCircle = false;\n\n        /**\n         * If this Static Body is circular, this is the unscaled radius of the Static Body's boundary, as set by {@link #setCircle}, in source pixels.\n         * The true radius is equal to `halfWidth`.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#radius\n         * @type {number}\n         * @default 0\n         * @since 3.0.0\n         */\n        this.radius = 0;\n\n        /**\n         * The offset of this Static Body's actual position from any updated position.\n         *\n         * Unlike a dynamic Body, a Static Body does not follow its Game Object. As such, this offset is only applied when resizing the Static Body.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#offset\n         * @type {Phaser.Math.Vector2}\n         * @since 3.0.0\n         */\n        this.offset = new Vector2();\n\n        /**\n         * The position of this Static Body within the simulation.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#position\n         * @type {Phaser.Math.Vector2}\n         * @since 3.0.0\n         */\n        this.position = new Vector2(gameObject.x - gameObject.displayOriginX, gameObject.y - gameObject.displayOriginY);\n\n        /**\n         * The width of the Static Body's boundary, in pixels.\n         * If the Static Body is circular, this is also the Static Body's diameter.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#width\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.width = width;\n\n        /**\n         * The height of the Static Body's boundary, in pixels.\n         * If the Static Body is circular, this is also the Static Body's diameter.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#height\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.height = height;\n\n        /**\n         * Half the Static Body's width, in pixels.\n         * If the Static Body is circular, this is also the Static Body's radius.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#halfWidth\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.halfWidth = Math.abs(this.width / 2);\n\n        /**\n         * Half the Static Body's height, in pixels.\n         * If the Static Body is circular, this is also the Static Body's radius.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#halfHeight\n         * @type {number}\n         * @since 3.0.0\n         */\n        this.halfHeight = Math.abs(this.height / 2);\n\n        /**\n         * The center of the Static Body's boundary.\n         * This is the midpoint of its `position` (top-left corner) and its bottom-right corner.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#center\n         * @type {Phaser.Math.Vector2}\n         * @since 3.0.0\n         */\n        this.center = new Vector2(gameObject.x + this.halfWidth, gameObject.y + this.halfHeight);\n\n        /**\n         * A constant zero velocity used by the Arcade Physics simulation for calculations.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#velocity\n         * @type {Phaser.Math.Vector2}\n         * @readonly\n         * @since 3.0.0\n         */\n        this.velocity = Vector2.ZERO;\n\n        /**\n         * A constant `false` value expected by the Arcade Physics simulation.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#allowGravity\n         * @type {boolean}\n         * @readonly\n         * @default false\n         * @since 3.0.0\n         */\n        this.allowGravity = false;\n\n        /**\n         * Gravitational force applied specifically to this Body. Values are in pixels per second squared. Always zero for a Static Body.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#gravity\n         * @type {Phaser.Math.Vector2}\n         * @readonly\n         * @since 3.0.0\n         */\n        this.gravity = Vector2.ZERO;\n\n        /**\n         * Rebound, or restitution, following a collision, relative to 1. Always zero for a Static Body.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#bounce\n         * @type {Phaser.Math.Vector2}\n         * @readonly\n         * @since 3.0.0\n         */\n        this.bounce = Vector2.ZERO;\n\n        //  If true this Body will dispatch events\n\n        /**\n         * Whether the simulation emits a `worldbounds` event when this StaticBody collides with the world boundary.\n         * Always false for a Static Body. (Static Bodies never collide with the world boundary and never trigger a `worldbounds` event.)\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#onWorldBounds\n         * @type {boolean}\n         * @readonly\n         * @default false\n         * @since 3.0.0\n         */\n        this.onWorldBounds = false;\n\n        /**\n         * Whether the simulation emits a `collide` event when this StaticBody collides with another.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#onCollide\n         * @type {boolean}\n         * @default false\n         * @since 3.0.0\n         */\n        this.onCollide = false;\n\n        /**\n         * Whether the simulation emits an `overlap` event when this StaticBody overlaps with another.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#onOverlap\n         * @type {boolean}\n         * @default false\n         * @since 3.0.0\n         */\n        this.onOverlap = false;\n\n        /**\n         * The StaticBody's inertia, relative to a default unit (1). With `bounce`, this affects the exchange of momentum (velocities) during collisions.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#mass\n         * @type {number}\n         * @default 1\n         * @since 3.0.0\n         */\n        this.mass = 1;\n\n        /**\n         * Whether this object can be moved by collisions with another body.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#immovable\n         * @type {boolean}\n         * @default true\n         * @since 3.0.0\n         */\n        this.immovable = true;\n\n        /**\n         * A flag disabling the default horizontal separation of colliding bodies. Pass your own `collideHandler` to the collider.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#customSeparateX\n         * @type {boolean}\n         * @default false\n         * @since 3.0.0\n         */\n        this.customSeparateX = false;\n\n        /**\n         * A flag disabling the default vertical separation of colliding bodies. Pass your own `collideHandler` to the collider.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#customSeparateY\n         * @type {boolean}\n         * @default false\n         * @since 3.0.0\n         */\n        this.customSeparateY = false;\n\n        /**\n         * The amount of horizontal overlap (before separation), if this Body is colliding with another.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#overlapX\n         * @type {number}\n         * @default 0\n         * @since 3.0.0\n         */\n        this.overlapX = 0;\n\n        /**\n         * The amount of vertical overlap (before separation), if this Body is colliding with another.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#overlapY\n         * @type {number}\n         * @default 0\n         * @since 3.0.0\n         */\n        this.overlapY = 0;\n\n        /**\n         * The amount of overlap (before separation), if this StaticBody is circular and colliding with another circular body.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#overlapR\n         * @type {number}\n         * @default 0\n         * @since 3.0.0\n         */\n        this.overlapR = 0;\n\n        /**\n         * Whether this StaticBody has ever overlapped with another while both were not moving.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#embedded\n         * @type {boolean}\n         * @default false\n         * @since 3.0.0\n         */\n        this.embedded = false;\n\n        /**\n         * Whether this StaticBody interacts with the world boundary.\n         * Always false for a Static Body. (Static Bodies never collide with the world boundary.)\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#collideWorldBounds\n         * @type {boolean}\n         * @readonly\n         * @default false\n         * @since 3.0.0\n         */\n        this.collideWorldBounds = false;\n\n        /**\n         * Whether this StaticBody is checked for collisions and for which directions. You can set `checkCollision.none = false` to disable collision checks.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#checkCollision\n         * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\n         * @since 3.0.0\n         */\n        this.checkCollision = { none: false, up: true, down: true, left: true, right: true };\n\n        /**\n         * Whether this StaticBody has ever collided with another body and in which direction.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#touching\n         * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\n         * @since 3.0.0\n         */\n        this.touching = { none: true, up: false, down: false, left: false, right: false };\n\n        /**\n         * Whether this StaticBody was colliding with another body during the last step or any previous step, and in which direction.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#wasTouching\n         * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\n         * @since 3.0.0\n         */\n        this.wasTouching = { none: true, up: false, down: false, left: false, right: false };\n\n        /**\n         * Whether this StaticBody has ever collided with a tile or the world boundary.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#blocked\n         * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\n         * @since 3.0.0\n         */\n        this.blocked = { none: true, up: false, down: false, left: false, right: false };\n\n        /**\n         * The StaticBody's physics type (static by default).\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#physicsType\n         * @type {integer}\n         * @default Phaser.Physics.Arcade.STATIC_BODY\n         * @since 3.0.0\n         */\n        this.physicsType = CONST.STATIC_BODY;\n\n        /**\n         * The calculated change in the Body's horizontal position during the current step.\n         * For a static body this is always zero.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#_dx\n         * @type {number}\n         * @private\n         * @default 0\n         * @since 3.10.0\n         */\n        this._dx = 0;\n\n        /**\n         * The calculated change in the Body's vertical position during the current step.\n         * For a static body this is always zero.\n         *\n         * @name Phaser.Physics.Arcade.StaticBody#_dy\n         * @type {number}\n         * @private\n         * @default 0\n         * @since 3.10.0\n         */\n        this._dy = 0;\n    },\n\n    /**\n     * Changes the Game Object this Body is bound to.\n     * First it removes its reference from the old Game Object, then sets the new one.\n     * You can optionally update the position and dimensions of this Body to reflect that of the new Game Object.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#setGameObject\n     * @since 3.1.0\n     *\n     * @param {Phaser.GameObjects.GameObject} gameObject - The new Game Object that will own this Body.\n     * @param {boolean} [update=true] - Reposition and resize this Body to match the new Game Object?\n     *\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n     *\n     * @see Phaser.Physics.Arcade.StaticBody#updateFromGameObject\n     */\n    setGameObject: function (gameObject, update)\n    {\n        if (gameObject && gameObject !== this.gameObject)\n        {\n            //  Remove this body from the old game object\n            this.gameObject.body = null;\n\n            gameObject.body = this;\n\n            //  Update our reference\n            this.gameObject = gameObject;\n        }\n\n        if (update)\n        {\n            this.updateFromGameObject();\n        }\n\n        return this;\n    },\n\n    /**\n     * Updates this Static Body so that its position and dimensions are updated\n     * based on the current Game Object it is bound to.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#updateFromGameObject\n     * @since 3.1.0\n     *\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n     */\n    updateFromGameObject: function ()\n    {\n        this.world.staticTree.remove(this);\n\n        var gameObject = this.gameObject;\n\n        gameObject.getTopLeft(this.position);\n\n        this.width = gameObject.displayWidth;\n        this.height = gameObject.displayHeight;\n\n        this.halfWidth = Math.abs(this.width / 2);\n        this.halfHeight = Math.abs(this.height / 2);\n\n        this.center.set(this.position.x + this.halfWidth, this.position.y + this.halfHeight);\n\n        this.world.staticTree.insert(this);\n\n        return this;\n    },\n\n    /**\n     * Sets the offset of the body.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#setOffset\n     * @since 3.4.0\n     *\n     * @param {number} x - The horizontal offset of the Body from the Game Object's center.\n     * @param {number} y - The vertical offset of the Body from the Game Object's center.\n     *\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n     */\n    setOffset: function (x, y)\n    {\n        if (y === undefined) { y = x; }\n\n        this.world.staticTree.remove(this);\n\n        this.position.x -= this.offset.x;\n        this.position.y -= this.offset.y;\n\n        this.offset.set(x, y);\n\n        this.position.x += this.offset.x;\n        this.position.y += this.offset.y;\n\n        this.updateCenter();\n\n        this.world.staticTree.insert(this);\n\n        return this;\n    },\n\n    /**\n     * Sets the size of the body.\n     * Resets the width and height to match current frame, if no width and height provided and a frame is found.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#setSize\n     * @since 3.0.0\n     *\n     * @param {integer} [width] - The width of the Body in pixels. Cannot be zero. If not given, and the parent Game Object has a frame, it will use the frame width.\n     * @param {integer} [height] - The height of the Body in pixels. Cannot be zero. If not given, and the parent Game Object has a frame, it will use the frame height.\n     * @param {number} [offsetX] - The horizontal offset of the Body from the Game Object's center.\n     * @param {number} [offsetY] - The vertical offset of the Body from the Game Object's center.\n     *\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n     */\n    setSize: function (width, height, offsetX, offsetY)\n    {\n        if (offsetX === undefined) { offsetX = this.offset.x; }\n        if (offsetY === undefined) { offsetY = this.offset.y; }\n\n        var gameObject = this.gameObject;\n\n        if (!width && gameObject.frame)\n        {\n            width = gameObject.frame.realWidth;\n        }\n\n        if (!height && gameObject.frame)\n        {\n            height = gameObject.frame.realHeight;\n        }\n\n        this.world.staticTree.remove(this);\n\n        this.width = width;\n        this.height = height;\n\n        this.halfWidth = Math.floor(width / 2);\n        this.halfHeight = Math.floor(height / 2);\n\n        this.offset.set(offsetX, offsetY);\n\n        this.updateCenter();\n\n        this.isCircle = false;\n        this.radius = 0;\n\n        this.world.staticTree.insert(this);\n\n        return this;\n    },\n\n    /**\n     * Sets this Static Body to have a circular body and sets its sizes and position.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#setCircle\n     * @since 3.0.0\n     *\n     * @param {number} radius - The radius of the StaticBody, in pixels.\n     * @param {number} [offsetX] - The horizontal offset of the StaticBody from its Game Object, in pixels.\n     * @param {number} [offsetY] - The vertical offset of the StaticBody from its Game Object, in pixels.\n     *\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n     */\n    setCircle: function (radius, offsetX, offsetY)\n    {\n        if (offsetX === undefined) { offsetX = this.offset.x; }\n        if (offsetY === undefined) { offsetY = this.offset.y; }\n\n        if (radius > 0)\n        {\n            this.world.staticTree.remove(this);\n\n            this.isCircle = true;\n\n            this.radius = radius;\n\n            this.width = radius * 2;\n            this.height = radius * 2;\n\n            this.halfWidth = Math.floor(this.width / 2);\n            this.halfHeight = Math.floor(this.height / 2);\n\n            this.offset.set(offsetX, offsetY);\n\n            this.updateCenter();\n\n            this.world.staticTree.insert(this);\n        }\n        else\n        {\n            this.isCircle = false;\n        }\n\n        return this;\n    },\n\n    /**\n     * Updates the StaticBody's `center` from its `position` and dimensions.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#updateCenter\n     * @since 3.0.0\n     */\n    updateCenter: function ()\n    {\n        this.center.set(this.position.x + this.halfWidth, this.position.y + this.halfHeight);\n    },\n\n    /**\n     * Resets this Body to the given coordinates. Also positions its parent Game Object to the same coordinates.\n     * Similar to `updateFromGameObject`, but doesn't modify the Body's dimensions.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#reset\n     * @since 3.0.0\n     *\n     * @param {number} [x] - The x coordinate to reset the body to. If not given will use the parent Game Object's coordinate.\n     * @param {number} [y] - The y coordinate to reset the body to. If not given will use the parent Game Object's coordinate.\n     */\n    reset: function (x, y)\n    {\n        var gameObject = this.gameObject;\n\n        if (x === undefined) { x = gameObject.x; }\n        if (y === undefined) { y = gameObject.y; }\n\n        this.world.staticTree.remove(this);\n\n        gameObject.setPosition(x, y);\n        \n        gameObject.getTopLeft(this.position);\n\n        this.updateCenter();\n\n        this.world.staticTree.insert(this);\n    },\n\n    /**\n     * NOOP function. A Static Body cannot be stopped.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#stop\n     * @since 3.0.0\n     *\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n     */\n    stop: function ()\n    {\n        return this;\n    },\n\n    /**\n     * Returns the x and y coordinates of the top left and bottom right points of the StaticBody.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#getBounds\n     * @since 3.0.0\n     *\n     * @param {Phaser.Types.Physics.Arcade.ArcadeBodyBounds} obj - The object which will hold the coordinates of the bounds.\n     *\n     * @return {Phaser.Types.Physics.Arcade.ArcadeBodyBounds} The same object that was passed with `x`, `y`, `right` and `bottom` values matching the respective values of the StaticBody.\n     */\n    getBounds: function (obj)\n    {\n        obj.x = this.x;\n        obj.y = this.y;\n        obj.right = this.right;\n        obj.bottom = this.bottom;\n\n        return obj;\n    },\n\n    /**\n     * Checks to see if a given x,y coordinate is colliding with this Static Body.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#hitTest\n     * @since 3.0.0\n     *\n     * @param {number} x - The x coordinate to check against this body.\n     * @param {number} y - The y coordinate to check against this body.\n     *\n     * @return {boolean} `true` if the given coordinate lies within this body, otherwise `false`.\n     */\n    hitTest: function (x, y)\n    {\n        return (this.isCircle) ? CircleContains(this, x, y) : RectangleContains(this, x, y);\n    },\n\n    /**\n     * NOOP\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#postUpdate\n     * @since 3.12.0\n     */\n    postUpdate: function ()\n    {\n    },\n\n    /**\n     * The absolute (non-negative) change in this StaticBody's horizontal position from the previous step. Always zero.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#deltaAbsX\n     * @since 3.0.0\n     *\n     * @return {number} Always zero for a Static Body.\n     */\n    deltaAbsX: function ()\n    {\n        return 0;\n    },\n\n    /**\n     * The absolute (non-negative) change in this StaticBody's vertical position from the previous step. Always zero.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#deltaAbsY\n     * @since 3.0.0\n     *\n     * @return {number} Always zero for a Static Body.\n     */\n    deltaAbsY: function ()\n    {\n        return 0;\n    },\n\n    /**\n     * The change in this StaticBody's horizontal position from the previous step. Always zero.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#deltaX\n     * @since 3.0.0\n     *\n     * @return {number} The change in this StaticBody's velocity from the previous step. Always zero.\n     */\n    deltaX: function ()\n    {\n        return 0;\n    },\n\n    /**\n     * The change in this StaticBody's vertical position from the previous step. Always zero.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#deltaY\n     * @since 3.0.0\n     *\n     * @return {number} The change in this StaticBody's velocity from the previous step. Always zero.\n     */\n    deltaY: function ()\n    {\n        return 0;\n    },\n\n    /**\n     * The change in this StaticBody's rotation from the previous step. Always zero.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#deltaZ\n     * @since 3.0.0\n     *\n     * @return {number} The change in this StaticBody's rotation from the previous step. Always zero.\n     */\n    deltaZ: function ()\n    {\n        return 0;\n    },\n\n    /**\n     * Disables this Body and marks it for destruction during the next step.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#destroy\n     * @since 3.0.0\n     */\n    destroy: function ()\n    {\n        this.enable = false;\n\n        this.world.pendingDestroy.set(this);\n    },\n\n    /**\n     * Draws a graphical representation of the StaticBody for visual debugging purposes.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#drawDebug\n     * @since 3.0.0\n     *\n     * @param {Phaser.GameObjects.Graphics} graphic - The Graphics object to use for the debug drawing of the StaticBody.\n     */\n    drawDebug: function (graphic)\n    {\n        var pos = this.position;\n\n        var x = pos.x + this.halfWidth;\n        var y = pos.y + this.halfHeight;\n\n        if (this.debugShowBody)\n        {\n            graphic.lineStyle(1, this.debugBodyColor, 1);\n\n            if (this.isCircle)\n            {\n                graphic.strokeCircle(x, y, this.width / 2);\n            }\n            else\n            {\n                graphic.strokeRect(pos.x, pos.y, this.width, this.height);\n            }\n\n        }\n    },\n\n    /**\n     * Indicates whether the StaticBody is going to be showing a debug visualization during postUpdate.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#willDrawDebug\n     * @since 3.0.0\n     *\n     * @return {boolean} Whether or not the StaticBody is going to show the debug visualization during postUpdate.\n     */\n    willDrawDebug: function ()\n    {\n        return this.debugShowBody;\n    },\n\n    /**\n     * Sets the Mass of the StaticBody. Will set the Mass to 0.1 if the value passed is less than or equal to zero.\n     *\n     * @method Phaser.Physics.Arcade.StaticBody#setMass\n     * @since 3.0.0\n     *\n     * @param {number} value - The value to set the Mass to. Values of zero or less are changed to 0.1.\n     *\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\n     */\n    setMass: function (value)\n    {\n        if (value <= 0)\n        {\n            //  Causes havoc otherwise\n            value = 0.1;\n        }\n\n        this.mass = value;\n\n        return this;\n    },\n\n    /**\n     * The x coordinate of the StaticBody.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#x\n     * @type {number}\n     * @since 3.0.0\n     */\n    x: {\n\n        get: function ()\n        {\n            return this.position.x;\n        },\n\n        set: function (value)\n        {\n            this.world.staticTree.remove(this);\n\n            this.position.x = value;\n\n            this.world.staticTree.insert(this);\n        }\n\n    },\n\n    /**\n     * The y coordinate of the StaticBody.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#y\n     * @type {number}\n     * @since 3.0.0\n     */\n    y: {\n\n        get: function ()\n        {\n            return this.position.y;\n        },\n\n        set: function (value)\n        {\n            this.world.staticTree.remove(this);\n\n            this.position.y = value;\n\n            this.world.staticTree.insert(this);\n        }\n\n    },\n\n    /**\n     * Returns the left-most x coordinate of the area of the StaticBody.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#left\n     * @type {number}\n     * @readonly\n     * @since 3.0.0\n     */\n    left: {\n\n        get: function ()\n        {\n            return this.position.x;\n        }\n\n    },\n\n    /**\n     * The right-most x coordinate of the area of the StaticBody.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#right\n     * @type {number}\n     * @readonly\n     * @since 3.0.0\n     */\n    right: {\n\n        get: function ()\n        {\n            return this.position.x + this.width;\n        }\n\n    },\n\n    /**\n     * The highest y coordinate of the area of the StaticBody.\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#top\n     * @type {number}\n     * @readonly\n     * @since 3.0.0\n     */\n    top: {\n\n        get: function ()\n        {\n            return this.position.y;\n        }\n\n    },\n\n    /**\n     * The lowest y coordinate of the area of the StaticBody. (y + height)\n     *\n     * @name Phaser.Physics.Arcade.StaticBody#bottom\n     * @type {number}\n     * @readonly\n     * @since 3.0.0\n     */\n    bottom: {\n\n        get: function ()\n        {\n            return this.position.y + this.height;\n        }\n\n    }\n\n});\n\nmodule.exports = StaticBody;\n"},"sourceMaps":null,"error":null,"hash":"ebc4842c1f0ab8c77b7c0738785c90c7","cacheData":{"env":{}}}