{"id":"../../node_modules/phaser/src/physics/arcade/SeparateX.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"./GetOverlapX","loc":{"line":7,"column":26},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\SeparateX.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\physics\\arcade\\GetOverlapX.js"}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2019 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar GetOverlapX = require('./GetOverlapX');\n\n/**\n * Separates two overlapping bodies on the X-axis (horizontally).\n *\n * Separation involves moving two overlapping bodies so they don't overlap anymore and adjusting their velocities based on their mass. This is a core part of collision detection.\n *\n * The bodies won't be separated if there is no horizontal overlap between them, if they are static, or if either one uses custom logic for its separation.\n *\n * @function Phaser.Physics.Arcade.SeparateX\n * @since 3.0.0\n *\n * @param {Phaser.Physics.Arcade.Body} body1 - The first Body to separate.\n * @param {Phaser.Physics.Arcade.Body} body2 - The second Body to separate.\n * @param {boolean} overlapOnly - If `true`, the bodies will only have their overlap data set and no separation will take place.\n * @param {number} bias - A value to add to the delta value during overlap checking. Used to prevent sprite tunneling.\n *\n * @return {boolean} `true` if the two bodies overlap horizontally, otherwise `false`.\n */\nvar SeparateX = function (body1, body2, overlapOnly, bias)\n{\n    var overlap = GetOverlapX(body1, body2, overlapOnly, bias);\n\n    //  Can't separate two immovable bodies, or a body with its own custom separation logic\n    if (overlapOnly || overlap === 0 || (body1.immovable && body2.immovable) || body1.customSeparateX || body2.customSeparateX)\n    {\n        //  return true if there was some overlap, otherwise false\n        return (overlap !== 0) || (body1.embedded && body2.embedded);\n    }\n\n    //  Adjust their positions and velocities accordingly (if there was any overlap)\n    var v1 = body1.velocity.x;\n    var v2 = body2.velocity.x;\n\n    if (!body1.immovable && !body2.immovable)\n    {\n        overlap *= 0.5;\n\n        body1.x -= overlap;\n        body2.x += overlap;\n\n        var nv1 = Math.sqrt((v2 * v2 * body2.mass) / body1.mass) * ((v2 > 0) ? 1 : -1);\n        var nv2 = Math.sqrt((v1 * v1 * body1.mass) / body2.mass) * ((v1 > 0) ? 1 : -1);\n        var avg = (nv1 + nv2) * 0.5;\n\n        nv1 -= avg;\n        nv2 -= avg;\n\n        body1.velocity.x = avg + nv1 * body1.bounce.x;\n        body2.velocity.x = avg + nv2 * body2.bounce.x;\n    }\n    else if (!body1.immovable)\n    {\n        body1.x -= overlap;\n        body1.velocity.x = v2 - v1 * body1.bounce.x;\n\n        //  This is special case code that handles things like vertically moving platforms you can ride\n        if (body2.moves)\n        {\n            body1.y += (body2.y - body2.prev.y) * body2.friction.y;\n        }\n    }\n    else\n    {\n        body2.x += overlap;\n        body2.velocity.x = v1 - v2 * body2.bounce.x;\n\n        //  This is special case code that handles things like vertically moving platforms you can ride\n        if (body1.moves)\n        {\n            body2.y += (body1.y - body1.prev.y) * body1.friction.y;\n        }\n    }\n\n    //  If we got this far then there WAS overlap, and separation is complete, so return true\n    return true;\n};\n\nmodule.exports = SeparateX;\n"},"sourceMaps":null,"error":null,"hash":"30658334ac14557508c6ba2ee3ef3936","cacheData":{"env":{}}}