{"id":"../../node_modules/phaser/src/device/Audio.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\package.json","includedInParent":true,"mtime":1561134727120},{"name":"./Browser","loc":{"line":7,"column":22},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\device\\Audio.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\device\\Browser.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Browser = require('./Browser');\r\n\r\n/**\r\n * Determines the audio playback capabilities of the device running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.audio` from within any Scene.\r\n * \r\n * @typedef {object} Phaser.Device.Audio\r\n * @since 3.0.0\r\n * \r\n * @property {boolean} audioData - Can this device play HTML Audio tags?\r\n * @property {boolean} dolby - Can this device play EC-3 Dolby Digital Plus files?\r\n * @property {boolean} m4a - Can this device can play m4a files.\r\n * @property {boolean} mp3 - Can this device play mp3 files?\r\n * @property {boolean} ogg - Can this device play ogg files?\r\n * @property {boolean} opus - Can this device play opus files?\r\n * @property {boolean} wav - Can this device play wav files?\r\n * @property {boolean} webAudio - Does this device have the Web Audio API?\r\n * @property {boolean} webm - Can this device play webm files?\r\n */\r\nvar Audio = {\r\n\r\n    audioData: false,\r\n    dolby: false,\r\n    m4a: false,\r\n    mp3: false,\r\n    ogg: false,\r\n    opus: false,\r\n    wav: false,\r\n    webAudio: false,\r\n    webm: false\r\n\r\n};\r\n\r\nfunction init ()\r\n{\r\n    Audio.audioData = !!(window['Audio']);\r\n\r\n    Audio.webAudio = !!(window['AudioContext'] || window['webkitAudioContext']);\r\n\r\n    var audioElement = document.createElement('audio');\r\n\r\n    var result = !!audioElement.canPlayType;\r\n\r\n    try\r\n    {\r\n        if (result)\r\n        {\r\n            if (audioElement.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''))\r\n            {\r\n                Audio.ogg = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, '') || audioElement.canPlayType('audio/opus;').replace(/^no$/, ''))\r\n            {\r\n                Audio.opus = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/mpeg;').replace(/^no$/, ''))\r\n            {\r\n                Audio.mp3 = true;\r\n            }\r\n\r\n            //  Mimetypes accepted:\r\n            //  developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\r\n            //  bit.ly/iphoneoscodecs\r\n            if (audioElement.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''))\r\n            {\r\n                Audio.wav = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/x-m4a;') || audioElement.canPlayType('audio/aac;').replace(/^no$/, ''))\r\n            {\r\n                Audio.m4a = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''))\r\n            {\r\n                Audio.webm = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/mp4;codecs=\"ec-3\"') !== '')\r\n            {\r\n                if (Browser.edge)\r\n                {\r\n                    Audio.dolby = true;\r\n                }\r\n                else if (Browser.safari && Browser.safariVersion >= 9)\r\n                {\r\n                    if ((/Mac OS X (\\d+)_(\\d+)/).test(navigator.userAgent))\r\n                    {\r\n                        var major = parseInt(RegExp.$1, 10);\r\n                        var minor = parseInt(RegExp.$2, 10);\r\n\r\n                        if ((major === 10 && minor >= 11) || major > 10)\r\n                        {\r\n                            Audio.dolby = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (e)\r\n    {\r\n        //  Nothing to do here\r\n    }\r\n\r\n    return Audio;\r\n}\r\n\r\nmodule.exports = init();\r\n"},"sourceMaps":null,"error":null,"hash":"403b0ad9ecd5d1dbbd21a9e0d2be4efc","cacheData":{"env":{}}}