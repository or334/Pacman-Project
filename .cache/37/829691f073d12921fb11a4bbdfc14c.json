{"id":"scenes/GameScene.js","dependencies":[{"name":"C:\\Users\\Admin\\Desktop\\pmm\\package.json","includedInParent":true,"mtime":1560952935180},{"name":"phaser","loc":{"line":1,"column":19},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\scenes\\GameScene.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\node_modules\\phaser\\src\\phaser.js"},{"name":"../constants","loc":{"line":2,"column":51},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\scenes\\GameScene.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\constants.js"},{"name":"../game-objects/Pacman","loc":{"line":3,"column":23},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\scenes\\GameScene.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\game-objects\\Pacman.js"},{"name":"../game-objects/Ghost","loc":{"line":4,"column":22},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\scenes\\GameScene.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\game-objects\\Ghost.js"},{"name":"../game-objects/Dot","loc":{"line":5,"column":20},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\scenes\\GameScene.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\game-objects\\Dot.js"},{"name":"../game-objects/Candy","loc":{"line":6,"column":22},"parent":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\scenes\\GameScene.js","resolved":"C:\\Users\\Admin\\Desktop\\pmm\\client\\src\\game-objects\\Candy.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GameScene = void 0;\n\nvar _phaser = _interopRequireDefault(require(\"phaser\"));\n\nvar _constants = require(\"../constants\");\n\nvar _Pacman = require(\"../game-objects/Pacman\");\n\nvar _Ghost = require(\"../game-objects/Ghost\");\n\nvar _Dot = require(\"../game-objects/Dot\");\n\nvar _Candy = require(\"../game-objects/Candy\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar GameScene =\n/*#__PURE__*/\nfunction (_Phaser$Scene) {\n  _inherits(GameScene, _Phaser$Scene);\n\n  function GameScene() {\n    var _this;\n\n    _classCallCheck(this, GameScene);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GameScene).call(this, {\n      key: _constants.SCENES.GAME\n    }));\n    _this.player_2 = false;\n    return _this;\n  }\n\n  _createClass(GameScene, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"preload\",\n    value: function preload() {\n      this.dot_points = [[48, 80], [48, 112], [48, 144], [48, 176], [48, 208], [48, 240], [48, 272], [368, 112], [48, 336], [48, 368], [48, 400], [48, 432], [48, 464], [48, 496], [48, 528], [48, 560], [48, 592], [80, 48], [80, 272], [80, 336], [80, 592], [112, 48], [112, 80], [112, 112], [112, 144], [112, 176], [112, 208], [112, 272], [112, 336], [112, 400], [112, 432], [112, 464], [112, 496], [112, 528], [112, 560], [112, 592], [144, 48], [144, 80], [144, 112], [144, 272], [144, 336], [144, 400], [144, 464], [176, 48], [176, 80], [176, 112], [176, 272], [176, 336], [176, 400], [176, 464], [176, 496], [176, 528], [176, 560], [176, 592], [208, 48], [208, 80], [208, 112], [208, 272], [208, 336], [208, 400], [208, 464], [208, 528], [240, 48], [240, 80], [240, 112], [240, 144], [240, 176], [240, 208], [240, 272], [240, 336], [240, 400], [240, 464], [240, 528], [240, 592], [272, 48], [272, 272], [272, 336], [272, 400], [272, 464], [272, 528], [272, 592], [304, 48], [304, 80], [304, 112], [304, 144], [304, 176], [304, 208], [304, 240], [304, 272], [304, 336], [304, 400], [304, 528], [304, 592], [336, 48], [336, 272], [336, 304], [336, 336], [336, 400], [336, 432], [336, 496], [336, 528], [336, 592], [368, 48], [368, 80], [368, 144], [368, 176], [368, 208], [368, 272], [368, 432], [368, 496], [368, 592], [400, 48], [400, 208], [400, 272], [400, 336], [400, 368], [400, 432], [400, 496], [400, 528], [400, 560], [400, 592], [432, 48], [432, 112], [432, 176], [432, 208], [432, 272], [432, 304], [432, 336], [432, 368], [432, 432], [432, 496], [464, 48], [464, 112], [464, 144], [464, 176], [464, 272], [464, 336], [464, 368], [464, 432], [464, 496], [464, 528], [464, 560], [464, 592], [496, 48], [496, 272], [496, 432], [496, 496], [496, 592], [528, 48], [528, 80], [528, 112], [528, 144], [528, 176], [528, 208], [528, 240], [528, 272], [528, 304], [528, 336], [528, 368], [528, 400], [528, 432], [528, 496], [528, 528], [528, 592], [560, 48], [560, 272], [560, 496], [560, 528], [560, 592], [592, 48], [592, 80], [592, 112], [592, 144], [592, 176], [592, 208], [592, 272], [592, 336], [592, 368], [592, 400], [592, 432], [592, 464], [592, 496], [592, 528], [592, 560], [592, 592], [624, 48], [624, 80], [624, 112], [624, 144], [624, 176], [624, 208], [624, 272], [624, 336], [624, 400], [624, 592], [656, 48], [656, 80], [656, 112], [656, 144], [656, 176], [656, 208], [656, 272], [656, 336], [656, 400], [656, 432], [656, 464], [656, 496], [656, 528], [656, 592], [688, 48], [688, 80], [688, 112], [688, 144], [688, 176], [688, 208], [688, 240], [688, 272], [688, 528], [688, 592], [720, 48], [720, 272], [720, 304], [720, 336], [720, 368], [720, 400], [720, 432], [720, 464], [720, 496], [720, 528], [720, 592], [752, 48], [752, 112], [752, 176], [752, 208], [752, 240], [752, 272], [752, 336], [752, 592], [784, 48], [784, 112], [784, 176], [784, 208], [784, 240], [784, 272], [784, 336], [784, 368], [784, 400], [784, 432], [784, 464], [784, 496], [784, 528], [784, 560], [784, 592], [816, 48], [816, 112], [816, 176], [816, 208], [816, 240], [816, 272], [816, 304], [816, 336], [848, 48], [848, 112], [848, 144], [848, 176], [848, 208], [848, 240], [848, 272], [848, 336], [848, 368], [848, 400], [848, 432], [848, 464], [848, 496], [848, 528], [848, 560], [848, 592]];\n      this.load.json('q_data', '../../assets/questions.json');\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      var _this2 = this;\n\n      this.question_mode = false;\n      this.qdata = this.cache.json.get('q_data');\n      this.level = this.add.tilemap(_constants.TILEMAPS.LEVEL, _constants.CONFIG.TILE_SIZE, _constants.CONFIG.TILE_SIZE, _constants.CONFIG.WIDTH_TILES, _constants.CONFIG.HEIGHT_TILES);\n      this.levelTileset = this.level.addTilesetImage('pokemon_32x32', _constants.TILESETS.POKEMON);\n      this.backgroundLayer = this.level.createStaticLayer('background', this.levelTileset);\n      this.wallsLayer = this.level.createStaticLayer('walls', this.levelTileset);\n      this.wallsLayer.setCollisionByProperty({\n        wall: true\n      });\n      this.players = [new _Pacman.Pacman(this, this.input.keyboard.addKeys({\n        up: 'UP',\n        down: 'DOWN',\n        right: 'RIGHT',\n        left: 'LEFT'\n      }), 1)];\n\n      if (this.player_2) {\n        this.players.push(new _Pacman.Pacman(this, this.input.keyboard.addKeys({\n          up: 'W',\n          down: 'S',\n          right: 'D',\n          left: 'A'\n        }), 2));\n      }\n\n      this.players_score = [];\n      this.dots = [];\n\n      for (var i = 0; i < this.dot_points.length; i++) {\n        this.dots.push(new _Dot.Dot(this, this.dot_points[i][0], this.dot_points[i][1]));\n      }\n\n      this.QuestionText = this.add.text(900, 48, '', {\n        font: '14px monospace',\n        fill: '#ffffff'\n      });\n      this.add.existing(this.QuestionText);\n      this.candies = [new _Candy.Candy(this, 848, 550), new _Candy.Candy(this, 48, 480), new _Candy.Candy(this, 48, 112), new _Candy.Candy(this, 240, 592)];\n      this.ghosts = [new _Ghost.Ghost(this, 0), new _Ghost.Ghost(this, 1), new _Ghost.Ghost(this, 2), new _Ghost.Ghost(this, 3)]; // add a collider between players/ghosts and walls\n\n      this.physics.add.collider([].concat(_toConsumableArray(this.players), _toConsumableArray(this.ghosts)), this.wallsLayer); //check if ghosts are touching the players\n\n      this.physics.add.overlap(this.candies, this.players, function (g, p) {\n        if (Math.abs(p.body.overlapX) > 3 || Math.abs(p.body.overlapY) > 3) {\n          g.TouchPacman(p);\n          _this2.question_mode = true;\n\n          _this2.QuestionText.setText(_this2.get_question());\n\n          for (var i = 0; i < _this2.ghosts.length; i++) {\n            _this2.ghosts[i].question_mode = true;\n          }\n        }\n      });\n      this.physics.add.overlap(this.dots, this.players, function (g, p) {\n        if (Math.abs(p.body.overlapX) > 3 || Math.abs(p.body.overlapY) > 3) {\n          g.TouchPacman(p);\n          p.TouchDot();\n        }\n      });\n      this.physics.add.overlap(this.ghosts, this.players, function (g, p) {\n        if (Math.abs(p.body.overlapX) > 3 || Math.abs(p.body.overlapY) > 3) {\n          if (!_this2.question_mode) {\n            p.TouchGhost();\n            g.TouchPacman();\n\n            if (p.lives == 0) {\n              _this2.players_score.push('Player ' + p.player.toString() + ' Points: ' + p.points.toString());\n\n              _this2.players.splice(_this2.players.indexOf(p), 1);\n\n              p.destroy();\n            }\n          } else {\n            g.TouchPacman();\n\n            for (var i = 0; i < _this2.ghosts.length; i++) {\n              _this2.ghosts[i].alpha = 1;\n              _this2.ghosts[i].question_mode = false;\n            }\n\n            if (_this2.answer_index == g.ghost_number) {\n              p.points += _this2.question_worth;\n\n              _this2.QuestionText.setText('Correct answer!');\n            } else {\n              _this2.QuestionText.setText('Wrong answer!');\n            }\n\n            _this2.question_mode = false;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this3 = this;\n\n      this.physics.world.wrap([].concat(_toConsumableArray(this.players), _toConsumableArray(this.ghosts)), _constants.CONFIG.FRAME_SIZE / 2);\n      this.players.forEach(function (p) {\n        return p.move(_this3.wallsLayer);\n      });\n      this.ghosts.forEach(function (g) {\n        return g.move(_this3.wallsLayer);\n      });\n      this.game_on = false;\n\n      for (var i = 0; i < this.players.length; i++) {\n        if (this.players[i].lives > 0) {\n          this.game_on = true;\n        }\n      }\n\n      if (!this.game_on) {\n        this.scene.start('SCORE_SCENE', this.players_score);\n      }\n\n      if (this.question_mode) {\n        for (var i = 0; i < this.ghosts.length; i++) {\n          this.ghosts[i].alpha = 1.5 - this.ghosts[i].alpha;\n        }\n      }\n    }\n  }, {\n    key: \"get_question\",\n    value: function get_question() {\n      var random_question_number = Math.floor(Math.random() * this.qdata[\"results\"].length);\n      var question = this.qdata[\"results\"][random_question_number][\"question\"];\n      var answers = this.qdata[\"results\"][random_question_number][\"incorrect_answers\"];\n      this.answer_index = Math.floor(Math.random() * 4);\n      this.question_worth = 0;\n      if (this.qdata[\"results\"][random_question_number][\"difficulty\"] == \"easy\") this.question_worth = 100;else if (this.qdata[\"results\"][random_question_number][\"difficulty\"] == \"medium\") this.question_worth = 200;else this.question_worth = 400;\n      answers.splice(this.answer_index, 0, this.qdata[\"results\"][random_question_number][\"correct_answer\"]);\n      var msg = '';\n\n      while (question.length > 50) {\n        msg += question.slice(0, 50) + '\\n';\n        question = question.slice(50);\n      }\n\n      msg += question + \"\\n\\n\";\n      msg += 'Blue: ' + answers[0] + \"\\n\";\n      msg += 'Red: ' + answers[1] + \"\\n\";\n      msg += 'White: ' + answers[2] + \"\\n\";\n      msg += 'Orange: ' + answers[3];\n      return msg;\n    }\n  }]);\n\n  return GameScene;\n}(_phaser.default.Scene);\n\nexports.GameScene = GameScene;"},"sourceMaps":null,"error":null,"hash":"a146f08e6e9e4fffe006f7a5b43c224b","cacheData":{"env":{}}}